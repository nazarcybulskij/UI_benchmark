"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qualifyActivityName = qualifyActivityName;
exports.copyGradleProjectRecursively = copyGradleProjectRecursively;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

function qualifyActivityName(activityName, packageName) {
  if ([activityName, packageName].some(name => !name || _lodash.default.includes(name, '*'))) {
    return activityName;
  }

  const dotPos = activityName.indexOf('.');

  if (dotPos > 0) {
    return activityName;
  }

  return `${packageName}${dotPos === 0 ? '' : '.'}${activityName}`;
}

async function copyGradleProjectRecursively(sourceBaseDir, targetBaseDir) {
  await _appiumSupport.fs.walkDir(sourceBaseDir, true, async (itemPath, isDirectory) => {
    const relativePath = _path.default.relative(sourceBaseDir, itemPath);

    const targetPath = _path.default.resolve(targetBaseDir, relativePath);

    const isInGradleBuildDir = `${_path.default.sep}${itemPath}`.includes(`${_path.default.sep}build${_path.default.sep}`);

    if (isInGradleBuildDir) {
      return false;
    }

    if (isDirectory) {
      await (0, _appiumSupport.mkdirp)(targetPath);
    } else {
      await _appiumSupport.fs.copyFile(itemPath, targetPath);
    }

    return false;
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJxdWFsaWZ5QWN0aXZpdHlOYW1lIiwiYWN0aXZpdHlOYW1lIiwicGFja2FnZU5hbWUiLCJzb21lIiwibmFtZSIsIl8iLCJpbmNsdWRlcyIsImRvdFBvcyIsImluZGV4T2YiLCJjb3B5R3JhZGxlUHJvamVjdFJlY3Vyc2l2ZWx5Iiwic291cmNlQmFzZURpciIsInRhcmdldEJhc2VEaXIiLCJmcyIsIndhbGtEaXIiLCJpdGVtUGF0aCIsImlzRGlyZWN0b3J5IiwicmVsYXRpdmVQYXRoIiwicGF0aCIsInJlbGF0aXZlIiwidGFyZ2V0UGF0aCIsInJlc29sdmUiLCJpc0luR3JhZGxlQnVpbGREaXIiLCJzZXAiLCJjb3B5RmlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBU0EsU0FBU0EsbUJBQVQsQ0FBOEJDLFlBQTlCLEVBQTRDQyxXQUE1QyxFQUF5RDtBQUl2RCxNQUFJLENBQUNELFlBQUQsRUFBZUMsV0FBZixFQUE0QkMsSUFBNUIsQ0FBa0NDLElBQUQsSUFBVSxDQUFDQSxJQUFELElBQVNDLGdCQUFFQyxRQUFGLENBQVdGLElBQVgsRUFBaUIsR0FBakIsQ0FBcEQsQ0FBSixFQUFnRjtBQUM5RSxXQUFPSCxZQUFQO0FBQ0Q7O0FBRUQsUUFBTU0sTUFBTSxHQUFHTixZQUFZLENBQUNPLE9BQWIsQ0FBcUIsR0FBckIsQ0FBZjs7QUFDQSxNQUFJRCxNQUFNLEdBQUcsQ0FBYixFQUFnQjtBQUNkLFdBQU9OLFlBQVA7QUFDRDs7QUFDRCxTQUFRLEdBQUVDLFdBQVksR0FBRUssTUFBTSxLQUFLLENBQVgsR0FBZSxFQUFmLEdBQW9CLEdBQUksR0FBRU4sWUFBYSxFQUEvRDtBQUNEOztBQU9ELGVBQWVRLDRCQUFmLENBQTZDQyxhQUE3QyxFQUE0REMsYUFBNUQsRUFBMkU7QUFDekUsUUFBTUMsa0JBQUdDLE9BQUgsQ0FBV0gsYUFBWCxFQUEwQixJQUExQixFQUFnQyxPQUFPSSxRQUFQLEVBQWlCQyxXQUFqQixLQUFpQztBQUNyRSxVQUFNQyxZQUFZLEdBQUdDLGNBQUtDLFFBQUwsQ0FBY1IsYUFBZCxFQUE2QkksUUFBN0IsQ0FBckI7O0FBQ0EsVUFBTUssVUFBVSxHQUFHRixjQUFLRyxPQUFMLENBQWFULGFBQWIsRUFBNEJLLFlBQTVCLENBQW5COztBQUVBLFVBQU1LLGtCQUFrQixHQUFJLEdBQUVKLGNBQUtLLEdBQUksR0FBRVIsUUFBUyxFQUF2QixDQUF5QlIsUUFBekIsQ0FBbUMsR0FBRVcsY0FBS0ssR0FBSSxRQUFPTCxjQUFLSyxHQUFJLEVBQTlELENBQTNCOztBQUNBLFFBQUlELGtCQUFKLEVBQXdCO0FBQ3RCLGFBQU8sS0FBUDtBQUNEOztBQUVELFFBQUlOLFdBQUosRUFBaUI7QUFDZixZQUFNLDJCQUFPSSxVQUFQLENBQU47QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNUCxrQkFBR1csUUFBSCxDQUFZVCxRQUFaLEVBQXNCSyxVQUF0QixDQUFOO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFQO0FBQ0QsR0FmSyxDQUFOO0FBZ0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMsIG1rZGlycCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLyoqXG4gKiBodHRwczovL2FuZHJvaWQuZ29vZ2xlc291cmNlLmNvbS9wbGF0Zm9ybS9mcmFtZXdvcmtzL2Jhc2UvKy9tYXN0ZXIvdG9vbHMvYWFwdC9SZXNvdXJjZS5jcHAjNzU1XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFjdGl2aXR5TmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhY2thZ2VOYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcXVhbGlmaWVkIGFjdGl2aXR5IG5hbWVcbiAqL1xuZnVuY3Rpb24gcXVhbGlmeUFjdGl2aXR5TmFtZSAoYWN0aXZpdHlOYW1lLCBwYWNrYWdlTmFtZSkge1xuICAvLyBpZiBlaXRoZXIgYWN0aXZpdHkgb3IgcGFja2FnZSBuYW1lIGlzIG5vdCBzZXRcbiAgLy8gb3IgYW55IG9mIHRoZXNlIGNvbnRhaW4gd2lsZGNhcmRzIHRoZW4gdGhlcmUgaXNcbiAgLy8gbm8gcG9pbnQgaW4gcXVhbGlmeWluZyB0aGUgYWN0aXZpdHkgbmFtZVxuICBpZiAoW2FjdGl2aXR5TmFtZSwgcGFja2FnZU5hbWVdLnNvbWUoKG5hbWUpID0+ICFuYW1lIHx8IF8uaW5jbHVkZXMobmFtZSwgJyonKSkpIHtcbiAgICByZXR1cm4gYWN0aXZpdHlOYW1lO1xuICB9XG5cbiAgY29uc3QgZG90UG9zID0gYWN0aXZpdHlOYW1lLmluZGV4T2YoJy4nKTtcbiAgaWYgKGRvdFBvcyA+IDApIHtcbiAgICByZXR1cm4gYWN0aXZpdHlOYW1lO1xuICB9XG4gIHJldHVybiBgJHtwYWNrYWdlTmFtZX0ke2RvdFBvcyA9PT0gMCA/ICcnIDogJy4nfSR7YWN0aXZpdHlOYW1lfWA7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgY29weSBhbGwgZmlsZXMgZXhjZXB0IGJ1aWxkIGRpcmVjdG9yaWVzIGNvbnRlbnRzXG4gKiBAcGFyYW0gc291cmNlQmFzZURpciB7c3RyaW5nfSBkaXJlY3RvcnkgdG8gY29weSBmaWxlcyBmcm9tXG4gKiBAcGFyYW0gdGFyZ2V0QmFzZURpciB7c3RyaW5nfSBkaXJlY3RvcnkgdG8gY29weSBmaWxlcyB0b1xuICovXG5hc3luYyBmdW5jdGlvbiBjb3B5R3JhZGxlUHJvamVjdFJlY3Vyc2l2ZWx5IChzb3VyY2VCYXNlRGlyLCB0YXJnZXRCYXNlRGlyKSB7XG4gIGF3YWl0IGZzLndhbGtEaXIoc291cmNlQmFzZURpciwgdHJ1ZSwgYXN5bmMgKGl0ZW1QYXRoLCBpc0RpcmVjdG9yeSkgPT4ge1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHBhdGgucmVsYXRpdmUoc291cmNlQmFzZURpciwgaXRlbVBhdGgpO1xuICAgIGNvbnN0IHRhcmdldFBhdGggPSBwYXRoLnJlc29sdmUodGFyZ2V0QmFzZURpciwgcmVsYXRpdmVQYXRoKTtcblxuICAgIGNvbnN0IGlzSW5HcmFkbGVCdWlsZERpciA9IGAke3BhdGguc2VwfSR7aXRlbVBhdGh9YC5pbmNsdWRlcyhgJHtwYXRoLnNlcH1idWlsZCR7cGF0aC5zZXB9YCk7XG4gICAgaWYgKGlzSW5HcmFkbGVCdWlsZERpcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc0RpcmVjdG9yeSkge1xuICAgICAgYXdhaXQgbWtkaXJwKHRhcmdldFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBmcy5jb3B5RmlsZShpdGVtUGF0aCwgdGFyZ2V0UGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHF1YWxpZnlBY3Rpdml0eU5hbWUsIGNvcHlHcmFkbGVQcm9qZWN0UmVjdXJzaXZlbHkgfTtcbiJdLCJmaWxlIjoibGliL3V0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
