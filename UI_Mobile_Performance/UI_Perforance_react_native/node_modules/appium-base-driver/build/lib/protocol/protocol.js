"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.isSessionCommand = isSessionCommand;
exports.driverShouldDoJwpProxy = driverShouldDoJwpProxy;
exports.determineProtocol = determineProtocol;
Object.defineProperty(exports, "MJSONWP_ELEMENT_KEY", {
  enumerable: true,
  get: function () {
    return _helpers.MJSONWP_ELEMENT_KEY;
  }
});
Object.defineProperty(exports, "W3C_ELEMENT_KEY", {
  enumerable: true,
  get: function () {
    return _helpers.W3C_ELEMENT_KEY;
  }
});
exports.PROTOCOLS = exports.DEFAULT_BASE_PATH = exports.IMAGE_ELEMENT_PREFIX = exports.Protocol = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _validators = require("./validators");

var _errors = require("./errors");

var _routes = require("./routes");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _helpers = require("./helpers");

var _sessionsCache = _interopRequireDefault(require("./sessions-cache"));

const PROTOCOLS = {
  W3C: 'W3C',
  MJSONWP: 'MJSONWP'
};
exports.PROTOCOLS = PROTOCOLS;
const LOG_OBJ_LENGTH = 1024;
const IMAGE_ELEMENT_PREFIX = 'appium-image-element-';
exports.IMAGE_ELEMENT_PREFIX = IMAGE_ELEMENT_PREFIX;
const CREATE_SESSION_COMMAND = 'createSession';
const DELETE_SESSION_COMMAND = 'deleteSession';
const DEFAULT_BASE_PATH = '/wd/hub';
exports.DEFAULT_BASE_PATH = DEFAULT_BASE_PATH;
const IMG_EL_BODY_RE = new RegExp(`"(${_helpers.W3C_ELEMENT_KEY}|${_helpers.MJSONWP_ELEMENT_KEY})":\s*` + `"${IMAGE_ELEMENT_PREFIX}[^"]+"`);
const IMG_EL_URL_RE = new RegExp(`/(element|screenshot)` + `/${IMAGE_ELEMENT_PREFIX}[^/]+`);

class Protocol {}

exports.Protocol = Protocol;

function determineProtocol(desiredCapabilities, requiredCapabilities, capabilities) {
  return _lodash.default.isPlainObject(capabilities) ? PROTOCOLS.W3C : PROTOCOLS.MJSONWP;
}

function extractProtocol(driver, sessionId = null) {
  const dstDriver = _lodash.default.isFunction(driver.driverForSession) ? driver.driverForSession(sessionId) : driver;

  if (dstDriver === driver) {
    return driver.protocol;
  }

  return dstDriver ? dstDriver.protocol : _sessionsCache.default.getProtocol(sessionId);
}

function isSessionCommand(command) {
  return !_lodash.default.includes(_routes.NO_SESSION_ID_COMMANDS, command);
}

function wrapParams(paramSets, jsonObj) {
  let res = jsonObj;

  if (_lodash.default.isArray(jsonObj) || !_lodash.default.isObject(jsonObj)) {
    res = {};
    res[paramSets.wrap] = jsonObj;
  }

  return res;
}

function unwrapParams(paramSets, jsonObj) {
  let res = jsonObj;

  if (_lodash.default.isObject(jsonObj)) {
    if (jsonObj[paramSets.unwrap]) {
      res = jsonObj[paramSets.unwrap];
    }
  }

  return res;
}

function checkParams(paramSets, jsonObj, protocol) {
  let requiredParams = [];
  let optionalParams = [];

  let receivedParams = _lodash.default.keys(jsonObj);

  if (paramSets) {
    if (paramSets.required) {
      if (!_lodash.default.isArray(_lodash.default.first(paramSets.required))) {
        requiredParams = [paramSets.required];
      } else {
        requiredParams = paramSets.required;
      }
    }

    if (paramSets.optional) {
      optionalParams = paramSets.optional;
    }

    if (paramSets.validate) {
      let message = paramSets.validate(jsonObj, protocol);

      if (message) {
        throw new _errors.errors.BadParametersError(message, jsonObj);
      }
    }
  }

  if (requiredParams.length === 0) {
    return;
  }

  if (optionalParams.indexOf('sessionId') === -1) {
    optionalParams.push('sessionId');
  }

  if (optionalParams.indexOf('id') === -1) {
    optionalParams.push('id');
  }

  for (let params of requiredParams) {
    if (_lodash.default.difference(receivedParams, params, optionalParams).length === 0 && _lodash.default.difference(params, receivedParams).length === 0) {
      return;
    }
  }

  throw new _errors.errors.BadParametersError(paramSets, receivedParams);
}

function makeArgs(requestParams, jsonObj, payloadParams, protocol) {
  let urlParams = _lodash.default.keys(requestParams).reverse();

  let requiredParams = payloadParams.required;

  if (_lodash.default.isArray(_lodash.default.first(payloadParams.required))) {
    let keys = _lodash.default.keys(jsonObj);

    for (let params of payloadParams.required) {
      if (_lodash.default.without(params, ...keys).length === 0) {
        requiredParams = params;
        break;
      }
    }
  }

  let args;

  if (_lodash.default.isFunction(payloadParams.makeArgs)) {
    args = payloadParams.makeArgs(jsonObj, protocol);
  } else {
    args = _lodash.default.flatten(requiredParams).map(p => jsonObj[p]);

    if (payloadParams.optional) {
      args = args.concat(_lodash.default.flatten(payloadParams.optional).map(p => jsonObj[p]));
    }
  }

  args = args.concat(urlParams.map(u => requestParams[u]));
  return args;
}

function routeConfiguringFunction(driver) {
  if (!driver.sessionExists) {
    throw new Error('Drivers used with MJSONWP must implement `sessionExists`');
  }

  if (!(driver.executeCommand || driver.execute)) {
    throw new Error('Drivers used with MJSONWP must implement `executeCommand` or `execute`');
  }

  return function addRoutes(app, basePath = DEFAULT_BASE_PATH) {
    driver.basePath = basePath;

    for (const [path, methods] of _lodash.default.toPairs(_routes.METHOD_MAP)) {
      for (const [method, spec] of _lodash.default.toPairs(methods)) {
        buildHandler(app, method, `${basePath}${path}`, spec, driver, isSessionCommand(spec.command));
      }
    }
  };
}

function buildHandler(app, method, path, spec, driver, isSessCmd) {
  let asyncHandler = async (req, res) => {
    let jsonObj = req.body;
    let httpResBody = {};
    let httpStatus = 200;
    let newSessionId;
    let currentProtocol = extractProtocol(driver, req.params.sessionId);
    let terminateSocket = false;

    try {
      if (isSessCmd && !driver.sessionExists(req.params.sessionId)) {
        terminateSocket = true;
        throw new _errors.errors.NoSuchDriverError();
      }

      if (isSessCmd && driverShouldDoJwpProxy(driver, req, spec.command)) {
        await doJwpProxy(driver, req, res);
        return;
      }

      if (!spec.command) {
        throw new _errors.errors.NotImplementedError();
      }

      if (spec.payloadParams && spec.payloadParams.wrap) {
        jsonObj = wrapParams(spec.payloadParams, jsonObj);
      }

      if (spec.payloadParams && spec.payloadParams.unwrap) {
        jsonObj = unwrapParams(spec.payloadParams, jsonObj);
      }

      if (spec.command === CREATE_SESSION_COMMAND) {
        currentProtocol = determineProtocol(...makeArgs(req.params, jsonObj, spec.payloadParams || {}));
      }

      checkParams(spec.payloadParams, jsonObj, currentProtocol);
      let args = makeArgs(req.params, jsonObj, spec.payloadParams || {}, currentProtocol);
      let driverRes;

      if (_validators.validators[spec.command]) {
        _validators.validators[spec.command](...args);
      }

      _sessionsCache.default.getLogger(req.params.sessionId, currentProtocol).debug(`Calling ` + `${driver.constructor.name}.${spec.command}() with args: ` + _lodash.default.truncate(JSON.stringify(args), {
        length: LOG_OBJ_LENGTH
      }));

      if (driver.executeCommand) {
        driverRes = await driver.executeCommand(spec.command, ...args);
      } else {
        driverRes = await driver.execute(spec.command, ...args);
      }

      currentProtocol = extractProtocol(driver, req.params.sessionId) || currentProtocol;

      if (_lodash.default.isPlainObject(driverRes) && _lodash.default.has(driverRes, 'protocol')) {
        currentProtocol = driverRes.protocol || currentProtocol;

        if (driverRes.error) {
          throw driverRes.error;
        }

        driverRes = driverRes.value;
      }

      if (spec.command === CREATE_SESSION_COMMAND) {
        newSessionId = driverRes[0];

        _sessionsCache.default.putSession(newSessionId, currentProtocol);

        _sessionsCache.default.getLogger(newSessionId, currentProtocol).debug(`Cached the protocol value '${currentProtocol}' for the new session ${newSessionId}`);

        if (currentProtocol === PROTOCOLS.MJSONWP) {
          driverRes = driverRes[1];
        } else if (currentProtocol === PROTOCOLS.W3C) {
          driverRes = {
            capabilities: driverRes[1]
          };
        }
      }

      driverRes = (0, _helpers.formatResponseValue)(driverRes);

      if (spec.command === DELETE_SESSION_COMMAND) {
        terminateSocket = true;

        _sessionsCache.default.getLogger(req.params.sessionId, currentProtocol).debug(`Received response: ${_lodash.default.truncate(JSON.stringify(driverRes), {
          length: LOG_OBJ_LENGTH
        })}`);

        _sessionsCache.default.getLogger(req.params.sessionId, currentProtocol).debug('But deleting session, so not returning');

        driverRes = null;
      }

      if (_appiumSupport.util.hasValue(driverRes)) {
        if (_appiumSupport.util.hasValue(driverRes.status) && !isNaN(driverRes.status) && parseInt(driverRes.status, 10) !== 0) {
          throw (0, _errors.errorFromMJSONWPStatusCode)(driverRes.status, driverRes.value);
        } else if (_lodash.default.isPlainObject(driverRes.value) && driverRes.value.error) {
          throw (0, _errors.errorFromW3CJsonCode)(driverRes.value.error, driverRes.value.message, driverRes.value.stacktrace);
        }
      }

      httpResBody.value = driverRes;

      _sessionsCache.default.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Responding ` + `to client with driver.${spec.command}() result: ${_lodash.default.truncate(JSON.stringify(driverRes), {
        length: LOG_OBJ_LENGTH
      })}`);

      if (spec.command === DELETE_SESSION_COMMAND) {
        _sessionsCache.default.resetLogger(req.params.sessionId);
      }
    } catch (err) {
      let actualErr = err;
      currentProtocol = currentProtocol || extractProtocol(driver, req.params.sessionId || newSessionId);
      let errMsg = err.stacktrace || err.stack;

      if (!_lodash.default.includes(errMsg, err.message)) {
        errMsg = `${err.message}${errMsg ? '\n' + errMsg : ''}`;
      }

      _sessionsCache.default.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Encountered ` + `internal error running command: ${errMsg}`);

      if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
        actualErr = err.getActualError();
      }

      if (currentProtocol === PROTOCOLS.W3C) {
        [httpStatus, httpResBody] = (0, _errors.getResponseForW3CError)(actualErr);
      } else if (currentProtocol === PROTOCOLS.MJSONWP) {
        [httpStatus, httpResBody] = (0, _errors.getResponseForJsonwpError)(actualErr);
      } else {
        let jsonwpRes = (0, _errors.getResponseForJsonwpError)(actualErr);
        let w3cRes = (0, _errors.getResponseForW3CError)(actualErr);
        httpResBody = { ...jsonwpRes[1],
          ...w3cRes[1]
        };
        httpStatus = jsonwpRes[0];
      }

      if (spec.command === CREATE_SESSION_COMMAND) {
        terminateSocket = true;
      }
    }

    if (_lodash.default.isString(httpResBody)) {
      res.status(httpStatus).send(httpResBody);
    } else {
      if (newSessionId) {
        if (currentProtocol === PROTOCOLS.W3C) {
          httpResBody.value.sessionId = newSessionId;
        } else {
          httpResBody.sessionId = newSessionId;
        }
      } else {
        httpResBody.sessionId = req.params.sessionId || null;
      }

      if (currentProtocol === PROTOCOLS.W3C) {
        delete httpResBody.sessionId;
      }

      httpResBody = (0, _helpers.formatStatus)(httpResBody, httpStatus, currentProtocol);
      res.status(httpStatus).json(httpResBody);
    }

    if (terminateSocket) {
      _sessionsCache.default.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Destroying socket connection`);

      res.socket.destroy();
    }
  };

  app[method.toLowerCase()](path, (req, res) => {
    _bluebird.default.resolve(asyncHandler(req, res)).done();
  });
}

function driverShouldDoJwpProxy(driver, req, command) {
  if (!driver.proxyActive(req.params.sessionId)) {
    return false;
  }

  if (command === 'deleteSession') {
    return false;
  }

  if (driver.proxyRouteIsAvoided(req.params.sessionId, req.method, req.originalUrl)) {
    return false;
  }

  if (IMG_EL_URL_RE.test(req.originalUrl)) {
    return false;
  }

  const stringBody = JSON.stringify(req.body);

  if (stringBody && IMG_EL_BODY_RE.test(stringBody)) {
    return false;
  }

  return true;
}

async function doJwpProxy(driver, req, res) {
  _sessionsCache.default.getLogger(req.params.sessionId, extractProtocol(driver, req.params.sessionId)).info('Driver proxy active, passing request on via HTTP proxy');

  if (!driver.canProxy(req.params.sessionId)) {
    throw new Error('Trying to proxy to a JSONWP server but driver is unable to proxy');
  }

  try {
    const proxiedRes = await driver.executeCommand('proxyReqRes', req, res, req.params.sessionId);
    if (proxiedRes && proxiedRes.error) throw proxiedRes.error;
  } catch (err) {
    if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
      throw err;
    } else {
      throw new Error(`Could not proxy. Proxy error: ${err.message}`);
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
