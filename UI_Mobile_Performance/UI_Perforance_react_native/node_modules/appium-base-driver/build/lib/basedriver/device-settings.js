"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BASEDRIVER_HANDLED_SETTINGS = exports.DeviceSettings = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _images = require("./commands/images");

var _imageElement = require("./image-element");

const GLOBAL_DEFAULT_SETTINGS = {
  imageMatchThreshold: _images.DEFAULT_MATCH_THRESHOLD,
  fixImageFindScreenshotDims: true,
  fixImageTemplateSize: false,
  fixImageTemplateScale: false,
  defaultImageTemplateScale: _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE,
  checkForImageElementStaleness: true,
  autoUpdateImageElementPosition: false,
  imageElementTapStrategy: _imageElement.IMAGE_EL_TAP_STRATEGY_W3C,
  getMatchedImageResult: false
};
const BASEDRIVER_HANDLED_SETTINGS = ['imageMatchThreshold', 'fixImageFindScreenshotDims', 'fixImageTemplateSize', 'fixImageTemplateScale', 'defaultImageTemplateScale', 'checkForImageElementStaleness', 'autoUpdateImageElementPosition', 'imageElementTapStrategy', 'getMatchedImageResult'];
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;

class DeviceSettings {
  constructor(defaultSettings = {}, onSettingsUpdate = null) {
    this._settings = Object.assign({}, GLOBAL_DEFAULT_SETTINGS, defaultSettings);
    this.onSettingsUpdate = onSettingsUpdate;
  }

  async update(newSettings) {
    if (!_lodash.default.isPlainObject(newSettings)) {
      throw new Error(`Settings update should be called with valid JSON. Got ` + `${JSON.stringify(newSettings)} instead`);
    }

    for (const prop of _lodash.default.keys(newSettings)) {
      if (!_lodash.default.isUndefined(this._settings[prop])) {
        if (this._settings[prop] === newSettings[prop]) {
          _logger.default.debug(`The value of '${prop}' setting did not change. Skipping the update for it`);

          continue;
        }
      }

      if (_lodash.default.isFunction(this.onSettingsUpdate)) {
        await this.onSettingsUpdate(prop, newSettings[prop], this._settings[prop]);
        this._settings[prop] = newSettings[prop];
      } else {
        _logger.default.errorAndThrow(`Unable to update settings; ` + `onSettingsUpdate method not found on '${this.constructor.name}'`);
      }
    }
  }

  getSettings() {
    return this._settings;
  }

}

exports.DeviceSettings = DeviceSettings;
var _default = DeviceSettings;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
