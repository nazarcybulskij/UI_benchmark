"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COMMAND_URLS_CONFLICTS = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _helpers = require("../basedriver/helpers");

var _protocol = require("../protocol/protocol");

var _helpers2 = require("../protocol/helpers");

const log = _appiumSupport.logger.getLogger('Protocol Converter');

const COMMAND_URLS_CONFLICTS = [{
  commandNames: ['execute', 'executeAsync'],
  jsonwpConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute_async' : '/execute'),
  w3cConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute/async' : '/execute/sync')
}, {
  commandNames: ['getElementScreenshot'],
  jsonwpConverter: url => url.replace(/\/element\/([^/]+)\/screenshot$/, '/screenshot/$1'),
  w3cConverter: url => url.replace(/\/screenshot\/([^/]+)/, '/element/$1/screenshot')
}, {
  commandNames: ['getWindowHandles', 'getWindowHandle'],

  jsonwpConverter(url) {
    return /\/window$/.test(url) ? url.replace(/\/window$/, '/window_handle') : url.replace(/\/window\/handle(s?)$/, '/window_handle$1');
  },

  w3cConverter(url) {
    return /\/window_handle$/.test(url) ? url.replace(/\/window_handle$/, '/window') : url.replace(/\/window_handles$/, '/window/handles');
  }

}, {
  commandNames: ['getProperty'],
  jsonwpConverter: w3cUrl => {
    const w3cPropertyRegex = /\/element\/([^/]+)\/property\/([^/]+)/;
    const jsonwpUrl = w3cUrl.replace(w3cPropertyRegex, '/element/$1/attribute/$2');
    log.info(`Converting W3C '${w3cUrl}' to '${jsonwpUrl}'`);
    return jsonwpUrl;
  },
  w3cConverter: jsonwpUrl => jsonwpUrl
}];
exports.COMMAND_URLS_CONFLICTS = COMMAND_URLS_CONFLICTS;
const {
  MJSONWP,
  W3C
} = _protocol.PROTOCOLS;

class ProtocolConverter {
  constructor(proxyFunc) {
    this.proxyFunc = proxyFunc;
    this._downstreamProtocol = null;
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getTimeoutRequestObjects(body) {
    if (this.downstreamProtocol === W3C && _lodash.default.has(body, 'ms') && _lodash.default.has(body, 'type')) {
      const typeToW3C = x => x === 'page load' ? 'pageLoad' : x;

      return [{
        [typeToW3C(body.type)]: body.ms
      }];
    }

    if (this.downstreamProtocol === MJSONWP && (!_lodash.default.has(body, 'ms') || !_lodash.default.has(body, 'type'))) {
      const typeToJSONWP = x => x === 'pageLoad' ? 'page load' : x;

      return _lodash.default.toPairs(body).filter(pair => /^\d+(?:[.,]\d*?)?$/.test(`${pair[1]}`)).map(function (pair) {
        return {
          type: typeToJSONWP(pair[0]),
          ms: pair[1]
        };
      });
    }

    return [body];
  }

  async proxySetTimeouts(url, method, body) {
    let response, resBody;
    const timeoutRequestObjects = this.getTimeoutRequestObjects(body);
    log.debug(`Will send the following request bodies to /timeouts: ${JSON.stringify(timeoutRequestObjects)}`);

    for (const timeoutObj of timeoutRequestObjects) {
      [response, resBody] = await this.proxyFunc(url, method, timeoutObj);

      if (this.downstreamProtocol !== MJSONWP) {
        return [response, resBody];
      }

      if (response.statusCode >= 400) {
        return [response, resBody];
      }
    }

    return [response, resBody];
  }

  async proxySetWindow(url, method, body) {
    const bodyObj = _appiumSupport.util.safeJsonParse(body);

    if (_lodash.default.isPlainObject(bodyObj)) {
      if (this.downstreamProtocol === W3C && _lodash.default.has(bodyObj, 'name') && !_lodash.default.has(bodyObj, 'handle')) {
        log.debug(`Copied 'name' value '${bodyObj.name}' to 'handle' as per W3C spec`);
        return await this.proxyFunc(url, method, { ...bodyObj,
          handle: bodyObj.name
        });
      }

      if (this.downstreamProtocol === MJSONWP && _lodash.default.has(bodyObj, 'handle') && !_lodash.default.has(bodyObj, 'name')) {
        log.debug(`Copied 'handle' value '${bodyObj.handle}' to 'name' as per JSONWP spec`);
        return await this.proxyFunc(url, method, { ...bodyObj,
          name: bodyObj.handle
        });
      }
    }

    return await this.proxyFunc(url, method, body);
  }

  async proxySetValue(url, method, body) {
    const bodyObj = _appiumSupport.util.safeJsonParse(body);

    if (_lodash.default.isPlainObject(bodyObj) && (_appiumSupport.util.hasValue(bodyObj.text) || _appiumSupport.util.hasValue(bodyObj.value))) {
      let {
        text,
        value
      } = bodyObj;

      if (_appiumSupport.util.hasValue(text) && !_appiumSupport.util.hasValue(value)) {
        value = _lodash.default.isString(text) ? [...text] : _lodash.default.isArray(text) ? text : [];
        log.debug(`Added 'value' property ${JSON.stringify(value)} to 'setValue' request body`);
      } else if (!_appiumSupport.util.hasValue(text) && _appiumSupport.util.hasValue(value)) {
        text = _lodash.default.isArray(value) ? value.join('') : _lodash.default.isString(value) ? value : '';
        log.debug(`Added 'text' property ${JSON.stringify(text)} to 'setValue' request body`);
      }

      return await this.proxyFunc(url, method, Object.assign({}, bodyObj, {
        text,
        value
      }));
    }

    return await this.proxyFunc(url, method, body);
  }

  async proxySetFrame(url, method, body) {
    const bodyObj = _appiumSupport.util.safeJsonParse(body);

    return _lodash.default.has(bodyObj, 'id') && _lodash.default.isPlainObject(bodyObj.id) ? await this.proxyFunc(url, method, { ...bodyObj,
      id: (0, _helpers.duplicateKeys)(bodyObj.id, _protocol.MJSONWP_ELEMENT_KEY, _protocol.W3C_ELEMENT_KEY)
    }) : await this.proxyFunc(url, method, body);
  }

  async proxyPerformActions(url, method, body) {
    const bodyObj = _appiumSupport.util.safeJsonParse(body);

    return _lodash.default.isPlainObject(bodyObj) ? await this.proxyFunc(url, method, (0, _helpers.duplicateKeys)(bodyObj, _protocol.MJSONWP_ELEMENT_KEY, _protocol.W3C_ELEMENT_KEY)) : await this.proxyFunc(url, method, body);
  }

  async convertAndProxy(commandName, url, method, body) {
    if (!this.downstreamProtocol) {
      const [res, resBodyObj] = await this.proxyFunc(url, method, body);
      return [res, (0, _helpers2.formatStatus)(resBodyObj, res.statusCode)];
    }

    switch (commandName) {
      case 'timeouts':
        return await this.proxySetTimeouts(url, method, body);

      case 'setWindow':
        return await this.proxySetWindow(url, method, body);

      case 'setValue':
        return await this.proxySetValue(url, method, body);

      case 'performActions':
        return await this.proxyPerformActions(url, method, body);

      case 'setFrame':
        return await this.proxySetFrame(url, method, body);

      default:
        break;
    }

    for (const {
      commandNames,
      jsonwpConverter,
      w3cConverter
    } of COMMAND_URLS_CONFLICTS) {
      if (!commandNames.includes(commandName)) {
        continue;
      }

      const rewrittenUrl = this.downstreamProtocol === MJSONWP ? jsonwpConverter(url) : w3cConverter(url);

      if (rewrittenUrl === url) {
        log.debug(`Did not know how to rewrite the original URL '${url}' ` + `for ${this.downstreamProtocol} protocol`);
        break;
      }

      log.info(`Rewrote the original URL '${url}' to '${rewrittenUrl}' ` + `for ${this.downstreamProtocol} protocol`);
      return await this.proxyFunc(rewrittenUrl, method, body);
    }

    return await this.proxyFunc(url, method, body);
  }

}

var _default = ProtocolConverter;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9qc29ud3AtcHJveHkvcHJvdG9jb2wtY29udmVydGVyLmpzIl0sIm5hbWVzIjpbImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsIkNPTU1BTkRfVVJMU19DT05GTElDVFMiLCJjb21tYW5kTmFtZXMiLCJqc29ud3BDb252ZXJ0ZXIiLCJ1cmwiLCJyZXBsYWNlIiwiaW5jbHVkZXMiLCJ3M2NDb252ZXJ0ZXIiLCJ0ZXN0IiwidzNjVXJsIiwidzNjUHJvcGVydHlSZWdleCIsImpzb253cFVybCIsImluZm8iLCJNSlNPTldQIiwiVzNDIiwiUFJPVE9DT0xTIiwiUHJvdG9jb2xDb252ZXJ0ZXIiLCJjb25zdHJ1Y3RvciIsInByb3h5RnVuYyIsIl9kb3duc3RyZWFtUHJvdG9jb2wiLCJkb3duc3RyZWFtUHJvdG9jb2wiLCJ2YWx1ZSIsImdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyIsImJvZHkiLCJfIiwiaGFzIiwidHlwZVRvVzNDIiwieCIsInR5cGUiLCJtcyIsInR5cGVUb0pTT05XUCIsInRvUGFpcnMiLCJmaWx0ZXIiLCJwYWlyIiwibWFwIiwicHJveHlTZXRUaW1lb3V0cyIsIm1ldGhvZCIsInJlc3BvbnNlIiwicmVzQm9keSIsInRpbWVvdXRSZXF1ZXN0T2JqZWN0cyIsImRlYnVnIiwiSlNPTiIsInN0cmluZ2lmeSIsInRpbWVvdXRPYmoiLCJzdGF0dXNDb2RlIiwicHJveHlTZXRXaW5kb3ciLCJib2R5T2JqIiwidXRpbCIsInNhZmVKc29uUGFyc2UiLCJpc1BsYWluT2JqZWN0IiwibmFtZSIsImhhbmRsZSIsInByb3h5U2V0VmFsdWUiLCJoYXNWYWx1ZSIsInRleHQiLCJpc1N0cmluZyIsImlzQXJyYXkiLCJqb2luIiwiT2JqZWN0IiwiYXNzaWduIiwicHJveHlTZXRGcmFtZSIsImlkIiwiTUpTT05XUF9FTEVNRU5UX0tFWSIsIlczQ19FTEVNRU5UX0tFWSIsInByb3h5UGVyZm9ybUFjdGlvbnMiLCJjb252ZXJ0QW5kUHJveHkiLCJjb21tYW5kTmFt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S2pFLEdBQXJCLEVBQTBCO0FBQ3hCTixRQUFBQSxHQUFHLENBQUMwQyxLQUFKLENBQVcsaURBQWdEcEMsR0FBSSxJQUFyRCxHQUNQLE9BQU0sS0FBS2dCLGtCQUFtQixXQURqQztBQUVBO0FBQ0Q7O0FBQ0R0QixNQUFBQSxHQUFHLENBQUNjLElBQUosQ0FBVSw2QkFBNEJSLEdBQUksU0FBUWlFLFlBQWEsSUFBdEQsR0FDTixPQUFNLEtBQUtqRCxrQkFBbUIsV0FEakM7QUFFQSxhQUFPLE1BQU0sS0FBS0YsU0FBTCxDQUFlbUQsWUFBZixFQUE2QmpDLE1BQTdCLEVBQXFDYixJQUFyQyxDQUFiO0FBQ0Q7O0FBR0QsV0FBTyxNQUFNLEtBQUtMLFNBQUwsQ0FBZWQsR0FBZixFQUFvQmdDLE1BQXBCLEVBQTRCYixJQUE1QixDQUFiO0FBQ0Q7O0FBak1xQjs7ZUFvTVRQLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGxvZ2dlciwgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IGR1cGxpY2F0ZUtleXMgfSBmcm9tICcuLi9iYXNlZHJpdmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgUFJPVE9DT0xTLCBNSlNPTldQX0VMRU1FTlRfS0VZLCBXM0NfRUxFTUVOVF9LRVkgfSBmcm9tICcuLi9wcm90b2NvbC9wcm90b2NvbCc7XG5pbXBvcnQgeyBmb3JtYXRTdGF0dXMgfSBmcm9tICcuLi9wcm90b2NvbC9oZWxwZXJzJztcblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignUHJvdG9jb2wgQ29udmVydGVyJyk7XG5cblxuZXhwb3J0IGNvbnN0IENPTU1BTkRfVVJMU19DT05GTElDVFMgPSBbXG4gIHtcbiAgICBjb21tYW5kTmFtZXM6IFsnZXhlY3V0ZScsICdleGVjdXRlQXN5bmMnXSxcbiAgICBqc29ud3BDb252ZXJ0ZXI6ICh1cmwpID0+IHVybC5yZXBsYWNlKC9cXC9leGVjdXRlLiovLFxuICAgICAgdXJsLmluY2x1ZGVzKCdhc3luYycpID8gJy9leGVjdXRlX2FzeW5jJyA6ICcvZXhlY3V0ZScpLFxuICAgIHczY0NvbnZlcnRlcjogKHVybCkgPT4gdXJsLnJlcGxhY2UoL1xcL2V4ZWN1dGUuKi8sXG4gICAgICB1cmwuaW5jbHVkZXMoJ2FzeW5jJykgPyAnL2V4ZWN1dGUvYXN5bmMnIDogJy9leGVjdXRlL3N5bmMnKSxcbiAgfSxcbiAge1xuICAgIGNvbW1hbmROYW1lczogWydnZXRFbGVtZW50U2NyZWVuc2hvdCddLFxuICAgIGpzb253cENvbnZlcnRlcjogKHVybCkgPT4gdXJsLnJlcGxhY2UoL1xcL2VsZW1lbnRcXC8oW14vXSspXFwvc2NyZWVuc2hvdCQvLFxuICAgICAgJy9zY3JlZW5zaG90LyQxJyksXG4gICAgdzNjQ29udmVydGVyOiAodXJsKSA9PiB1cmwucmVwbGFjZSgvXFwvc2NyZWVuc2hvdFxcLyhbXi9dKykvLFxuICAgICAgJy9lbGVtZW50LyQxL3NjcmVlbnNob3QnKSxcbiAgfSxcbiAge1xuICAgIGNvbW1hbmROYW1lczogWydnZXRXaW5kb3dIYW5kbGVzJywgJ2dldFdpbmRvd0hhbmRsZSddLFxuICAgIGpzb253cENvbnZlcnRlciAodXJsKSB7XG4gICAgICByZXR1cm4gL1xcL3dpbmRvdyQvLnRlc3QodXJsKVxuICAgICAgICA/IHVybC5yZXBsYWNlKC9cXC93aW5kb3ckLywgJy93aW5kb3dfaGFuZGxlJylcbiAgICAgICAgOiB1cmwucmVwbGFjZSgvXFwvd2luZG93XFwvaGFuZGxlKHM/KSQvLCAnL3dpbmRvd19oYW5kbGUkMScpO1xuICAgIH0sXG4gICAgdzNjQ29udmVydGVyICh1cmwpIHtcbiAgICAgIHJldHVybiAvXFwvd2luZG93X2hhbmRsZSQvLnRlc3QodXJsKVxuICAgICAgICA/IHVybC5yZXBsYWNlKC9cXC93aW5kb3dfaGFuZGxlJC8sICcvd2luZG93JylcbiAgICAgICAgOiB1cmwucmVwbGFjZSgvXFwvd2luZG93X2hhbmRsZXMkLywgJy93aW5kb3cvaGFuZGxlcycpO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBjb21tYW5kTmFtZXM6IFsnZ2V0UHJvcGVydHknXSxcbiAgICBqc29ud3BDb252ZXJ0ZXI6ICh3M2NVcmwpID0+IHtcbiAgICAgIGNvbnN0IHczY1Byb3BlcnR5UmVnZXggPSAvXFwvZWxlbWVudFxcLyhbXi9dKylcXC9wcm9wZXJ0eVxcLyhbXi9dKykvO1xuICAgICAgY29uc3QganNvbndwVXJsID0gdzNjVXJsLnJlcGxhY2UodzNjUHJvcGVydHlSZWdleCwgJy9lbGVtZW50LyQxL2F0dHJpYnV0ZS8kMicpO1xuICAgICAgbG9nLmluZm8oYENvbnZlcnRpbmcgVzNDICcke3czY1VybH0nIHRvICcke2pzb253cFVybH0nYCk7XG4gICAgICByZXR1cm4ganNvbndwVXJsO1xuICAgIH0sXG4gICAgdzNjQ29udmVydGVyOiAoanNvbndwVXJsKSA9PiBqc29ud3BVcmwgLy8gRG9uJ3QgY29udmVydCBKU09OV1AgVVJMIHRvIFczQy4gVzNDIGFjY2VwdHMgL2F0dHJpYnV0ZSBhbmQgL3Byb3BlcnR5XG4gIH1cbl07XG5cbmNvbnN0IHtNSlNPTldQLCBXM0N9ID0gUFJPVE9DT0xTO1xuXG5cbmNsYXNzIFByb3RvY29sQ29udmVydGVyIHtcbiAgY29uc3RydWN0b3IgKHByb3h5RnVuYykge1xuICAgIHRoaXMucHJveHlGdW5jID0gcHJveHlGdW5jO1xuICAgIHRoaXMuX2Rvd25zdHJlYW1Qcm90b2NvbCA9IG51bGw7XG4gIH1cblxuICBzZXQgZG93bnN0cmVhbVByb3RvY29sICh2YWx1ZSkge1xuICAgIHRoaXMuX2Rvd25zdHJlYW1Qcm90b2NvbCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGRvd25zdHJlYW1Qcm90b2NvbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rvd25zdHJlYW1Qcm90b2NvbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXM0MgL3RpbWVvdXRzIGNhbiB0YWtlIGFzIG1hbnkgYXMgMyB0aW1lb3V0IHR5cGVzIGF0IG9uY2UsIE1KU09OV1AgL3RpbWVvdXRzIG9ubHkgdGFrZXMgb25lXG4gICAqIGF0IGEgdGltZS4gU28gaWYgd2UncmUgdXNpbmcgVzNDIGFuZCBwcm94eWluZyB0byBNSlNPTldQIGFuZCB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgdGltZW91dCB0eXBlXG4gICAqIHByb3ZpZGVkIGluIHRoZSByZXF1ZXN0LCB3ZSBuZWVkIHRvIGRvIDMgcHJveGllcyBhbmQgY29tYmluZSB0aGUgcmVzdWx0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBib2R5IFJlcXVlc3QgYm9keVxuICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgVzNDICsgTUpTT05XUCBjb21wYXRpYmxlIHRpbWVvdXQgb2JqZWN0c1xuICAgKi9cbiAgZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzIChib2R5KSB7XG4gICAgaWYgKHRoaXMuZG93bnN0cmVhbVByb3RvY29sID09PSBXM0MgJiYgXy5oYXMoYm9keSwgJ21zJykgJiYgXy5oYXMoYm9keSwgJ3R5cGUnKSkge1xuICAgICAgY29uc3QgdHlwZVRvVzNDID0gKHgpID0+IHggPT09ICdwYWdlIGxvYWQnID8gJ3BhZ2VMb2FkJyA6IHg7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgW3R5cGVUb1czQyhib2R5LnR5cGUpXTogYm9keS5tcyxcbiAgICAgIH1dO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCA9PT0gTUpTT05XUCAmJiAoIV8uaGFzKGJvZHksICdtcycpIHx8ICFfLmhhcyhib2R5LCAndHlwZScpKSkge1xuICAgICAgY29uc3QgdHlwZVRvSlNPTldQID0gKHgpID0+IHggPT09ICdwYWdlTG9hZCcgPyAncGFnZSBsb2FkJyA6IHg7XG4gICAgICByZXR1cm4gXy50b1BhaXJzKGJvZHkpXG4gICAgICAgIC8vIE9ubHkgdHJhbnNmb3JtIHRoZSBlbnRyeSBpZiBtcyB2YWx1ZSBpcyBhIHZhbGlkIHBvc2l0aXZlIGZsb2F0IG51bWJlclxuICAgICAgICAuZmlsdGVyKChwYWlyKSA9PiAvXlxcZCsoPzpbLixdXFxkKj8pPyQvLnRlc3QoYCR7cGFpclsxXX1gKSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocGFpcikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlVG9KU09OV1AocGFpclswXSksXG4gICAgICAgICAgICBtczogcGFpclsxXSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2JvZHldO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3h5IGFuIGFycmF5IG9mIHRpbWVvdXQgb2JqZWN0cyBhbmQgbWVyZ2UgdGhlIHJlc3VsdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIEVuZHBvaW50IHVybFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIEVuZHBvaW50IG1ldGhvZFxuICAgKiBAcGFyYW0ge09iamVjdH0gYm9keSBSZXF1ZXN0IGJvZHlcbiAgICovXG4gIGFzeW5jIHByb3h5U2V0VGltZW91dHMgKHVybCwgbWV0aG9kLCBib2R5KSB7XG4gICAgbGV0IHJlc3BvbnNlLCByZXNCb2R5O1xuXG4gICAgY29uc3QgdGltZW91dFJlcXVlc3RPYmplY3RzID0gdGhpcy5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoYm9keSk7XG4gICAgbG9nLmRlYnVnKGBXaWxsIHNlbmQgdGhlIGZvbGxvd2luZyByZXF1ZXN0IGJvZGllcyB0byAvdGltZW91dHM6ICR7SlNPTi5zdHJpbmdpZnkodGltZW91dFJlcXVlc3RPYmplY3RzKX1gKTtcbiAgICBmb3IgKGNvbnN0IHRpbWVvdXRPYmogb2YgdGltZW91dFJlcXVlc3RPYmplY3RzKSB7XG4gICAgICBbcmVzcG9uc2UsIHJlc0JvZHldID0gYXdhaXQgdGhpcy5wcm94eUZ1bmModXJsLCBtZXRob2QsIHRpbWVvdXRPYmopO1xuXG4gICAgICAvLyBJZiB3ZSBnb3QgYSBub24tTUpTT05XUCByZXNwb25zZSwgcmV0dXJuIHRoZSByZXN1bHQsIG5vdGhpbmcgbGVmdCB0byBkb1xuICAgICAgaWYgKHRoaXMuZG93bnN0cmVhbVByb3RvY29sICE9PSBNSlNPTldQKSB7XG4gICAgICAgIHJldHVybiBbcmVzcG9uc2UsIHJlc0JvZHldO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBnb3QgYW4gZXJyb3IsIHJldHVybiB0aGUgZXJyb3IgcmlnaHQgYXdheVxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgICAgIHJldHVybiBbcmVzcG9uc2UsIHJlc0JvZHldO1xuICAgICAgfVxuXG4gICAgICAvLyAuLi5PdGhlcndpc2UsIGNvbnRpbnVlIHRvIHRoZSBuZXh0IHRpbWVvdXRzIGNhbGxcbiAgICB9XG4gICAgcmV0dXJuIFtyZXNwb25zZSwgcmVzQm9keV07XG4gIH1cblxuICBhc3luYyBwcm94eVNldFdpbmRvdyAodXJsLCBtZXRob2QsIGJvZHkpIHtcbiAgICBjb25zdCBib2R5T2JqID0gdXRpbC5zYWZlSnNvblBhcnNlKGJvZHkpO1xuICAgIGlmIChfLmlzUGxhaW5PYmplY3QoYm9keU9iaikpIHtcbiAgICAgIGlmICh0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCA9PT0gVzNDICYmIF8uaGFzKGJvZHlPYmosICduYW1lJykgJiYgIV8uaGFzKGJvZHlPYmosICdoYW5kbGUnKSkge1xuICAgICAgICBsb2cuZGVidWcoYENvcGllZCAnbmFtZScgdmFsdWUgJyR7Ym9keU9iai5uYW1lfScgdG8gJ2hhbmRsZScgYXMgcGVyIFczQyBzcGVjYCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5RnVuYyh1cmwsIG1ldGhvZCwge1xuICAgICAgICAgIC4uLmJvZHlPYmosXG4gICAgICAgICAgaGFuZGxlOiBib2R5T2JqLm5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZG93bnN0cmVhbVByb3RvY29sID09PSBNSlNPTldQICYmIF8uaGFzKGJvZHlPYmosICdoYW5kbGUnKSAmJiAhXy5oYXMoYm9keU9iaiwgJ25hbWUnKSkge1xuICAgICAgICBsb2cuZGVidWcoYENvcGllZCAnaGFuZGxlJyB2YWx1ZSAnJHtib2R5T2JqLmhhbmRsZX0nIHRvICduYW1lJyBhcyBwZXIgSlNPTldQIHNwZWNgKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCB7XG4gICAgICAgICAgLi4uYm9keU9iaixcbiAgICAgICAgICBuYW1lOiBib2R5T2JqLmhhbmRsZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCBib2R5KTtcbiAgfVxuXG4gIGFzeW5jIHByb3h5U2V0VmFsdWUgKHVybCwgbWV0aG9kLCBib2R5KSB7XG4gICAgY29uc3QgYm9keU9iaiA9IHV0aWwuc2FmZUpzb25QYXJzZShib2R5KTtcbiAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGJvZHlPYmopICYmICh1dGlsLmhhc1ZhbHVlKGJvZHlPYmoudGV4dCkgfHwgdXRpbC5oYXNWYWx1ZShib2R5T2JqLnZhbHVlKSkpIHtcbiAgICAgIGxldCB7dGV4dCwgdmFsdWV9ID0gYm9keU9iajtcbiAgICAgIGlmICh1dGlsLmhhc1ZhbHVlKHRleHQpICYmICF1dGlsLmhhc1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IF8uaXNTdHJpbmcodGV4dClcbiAgICAgICAgICA/IFsuLi50ZXh0XVxuICAgICAgICAgIDogKF8uaXNBcnJheSh0ZXh0KSA/IHRleHQgOiBbXSk7XG4gICAgICAgIGxvZy5kZWJ1ZyhgQWRkZWQgJ3ZhbHVlJyBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0gdG8gJ3NldFZhbHVlJyByZXF1ZXN0IGJvZHlgKTtcbiAgICAgIH0gZWxzZSBpZiAoIXV0aWwuaGFzVmFsdWUodGV4dCkgJiYgdXRpbC5oYXNWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgdGV4dCA9IF8uaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IHZhbHVlLmpvaW4oJycpXG4gICAgICAgICAgOiAoXy5pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZSA6ICcnKTtcbiAgICAgICAgbG9nLmRlYnVnKGBBZGRlZCAndGV4dCcgcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeSh0ZXh0KX0gdG8gJ3NldFZhbHVlJyByZXF1ZXN0IGJvZHlgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5RnVuYyh1cmwsIG1ldGhvZCwgT2JqZWN0LmFzc2lnbih7fSwgYm9keU9iaiwge1xuICAgICAgICB0ZXh0LFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUZ1bmModXJsLCBtZXRob2QsIGJvZHkpO1xuICB9XG5cbiAgYXN5bmMgcHJveHlTZXRGcmFtZSAodXJsLCBtZXRob2QsIGJvZHkpIHtcbiAgICBjb25zdCBib2R5T2JqID0gdXRpbC5zYWZlSnNvblBhcnNlKGJvZHkpO1xuICAgIHJldHVybiBfLmhhcyhib2R5T2JqLCAnaWQnKSAmJiBfLmlzUGxhaW5PYmplY3QoYm9keU9iai5pZClcbiAgICAgID8gYXdhaXQgdGhpcy5wcm94eUZ1bmModXJsLCBtZXRob2QsIHtcbiAgICAgICAgLi4uYm9keU9iaixcbiAgICAgICAgaWQ6IGR1cGxpY2F0ZUtleXMoYm9keU9iai5pZCwgTUpTT05XUF9FTEVNRU5UX0tFWSwgVzNDX0VMRU1FTlRfS0VZKSxcbiAgICAgIH0pXG4gICAgICA6IGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCBib2R5KTtcbiAgfVxuXG4gIGFzeW5jIHByb3h5UGVyZm9ybUFjdGlvbnMgKHVybCwgbWV0aG9kLCBib2R5KSB7XG4gICAgY29uc3QgYm9keU9iaiA9IHV0aWwuc2FmZUpzb25QYXJzZShib2R5KTtcbiAgICByZXR1cm4gXy5pc1BsYWluT2JqZWN0KGJvZHlPYmopXG4gICAgICA/IGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCBkdXBsaWNhdGVLZXlzKGJvZHlPYmosIE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSkpXG4gICAgICA6IGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCBib2R5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgXCJjcm9zc2luZ1wiIGVuZHBvaW50cyBmb3IgdGhlIGNhc2VcbiAgICogd2hlbiB1cHN0cmVhbSBhbmQgZG93bnN0cmVhbSBkcml2ZXJzIG9wZXJhdGUgZGlmZmVyZW50IHByb3RvY29sc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWFuZE5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAqIEBwYXJhbSB7P3N0cmluZ3xvYmplY3R9IGJvZHlcbiAgICogQHJldHVybnMgVGhlIHByb3h5ZnlpbmcgcmVzdWx0IGFzIFtyZXNwb25zZSwgcmVzcG9uc2VCb2R5XSB0dXBsZVxuICAgKi9cbiAgYXN5bmMgY29udmVydEFuZFByb3h5IChjb21tYW5kTmFtZSwgdXJsLCBtZXRob2QsIGJvZHkpIHtcbiAgICBpZiAoIXRoaXMuZG93bnN0cmVhbVByb3RvY29sKSB7XG4gICAgICAvLyBQYXRjaCBjYWxscyB3aXRoIEdFTkVSSUMgcHJvdG9jb2xcbiAgICAgIC8vIHRvIHByZXNlcnZlIHRoZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICBjb25zdCBbcmVzLCByZXNCb2R5T2JqXSA9IGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCBib2R5KTtcbiAgICAgIHJldHVybiBbcmVzLCBmb3JtYXRTdGF0dXMocmVzQm9keU9iaiwgcmVzLnN0YXR1c0NvZGUpXTtcbiAgICB9XG5cbiAgICAvLyBTYW1lIHVybCwgYnV0IGRpZmZlcmVudCBhcmd1bWVudHNcbiAgICBzd2l0Y2ggKGNvbW1hbmROYW1lKSB7XG4gICAgICBjYXNlICd0aW1lb3V0cyc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5U2V0VGltZW91dHModXJsLCBtZXRob2QsIGJvZHkpO1xuICAgICAgY2FzZSAnc2V0V2luZG93JzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlTZXRXaW5kb3codXJsLCBtZXRob2QsIGJvZHkpO1xuICAgICAgY2FzZSAnc2V0VmFsdWUnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eVNldFZhbHVlKHVybCwgbWV0aG9kLCBib2R5KTtcbiAgICAgIGNhc2UgJ3BlcmZvcm1BY3Rpb25zJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlQZXJmb3JtQWN0aW9ucyh1cmwsIG1ldGhvZCwgYm9keSk7XG4gICAgICBjYXNlICdzZXRGcmFtZSc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5U2V0RnJhbWUodXJsLCBtZXRob2QsIGJvZHkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gU2FtZSBhcmd1bWVudHMsIGJ1dCBkaWZmZXJlbnQgVVJMc1xuICAgIGZvciAoY29uc3Qge2NvbW1hbmROYW1lcywganNvbndwQ29udmVydGVyLCB3M2NDb252ZXJ0ZXJ9IG9mIENPTU1BTkRfVVJMU19DT05GTElDVFMpIHtcbiAgICAgIGlmICghY29tbWFuZE5hbWVzLmluY2x1ZGVzKGNvbW1hbmROYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmV3cml0dGVuVXJsID0gdGhpcy5kb3duc3RyZWFtUHJvdG9jb2wgPT09IE1KU09OV1BcbiAgICAgICAgPyBqc29ud3BDb252ZXJ0ZXIodXJsKVxuICAgICAgICA6IHczY0NvbnZlcnRlcih1cmwpO1xuICAgICAgaWYgKHJld3JpdHRlblVybCA9PT0gdXJsKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgRGlkIG5vdCBrbm93IGhvdyB0byByZXdyaXRlIHRoZSBvcmlnaW5hbCBVUkwgJyR7dXJsfScgYCArXG4gICAgICAgICAgYGZvciAke3RoaXMuZG93bnN0cmVhbVByb3RvY29sfSBwcm90b2NvbGApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGxvZy5pbmZvKGBSZXdyb3RlIHRoZSBvcmlnaW5hbCBVUkwgJyR7dXJsfScgdG8gJyR7cmV3cml0dGVuVXJsfScgYCArXG4gICAgICAgIGBmb3IgJHt0aGlzLmRvd25zdHJlYW1Qcm90b2NvbH0gcHJvdG9jb2xgKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5RnVuYyhyZXdyaXR0ZW5VcmwsIG1ldGhvZCwgYm9keSk7XG4gICAgfVxuXG4gICAgLy8gTm8gbWF0Y2hlcyBmb3VuZC4gUHJvY2VlZCBub3JtYWxseVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5RnVuYyh1cmwsIG1ldGhvZCwgYm9keSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdG9jb2xDb252ZXJ0ZXI7XG4iXSwiZmlsZSI6ImxpYi9qc29ud3AtcHJveHkvcHJvdG9jb2wtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
