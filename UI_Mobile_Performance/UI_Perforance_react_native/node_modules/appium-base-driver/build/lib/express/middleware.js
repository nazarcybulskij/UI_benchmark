"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allowCrossDomain = allowCrossDomain;
exports.fixPythonContentType = fixPythonContentType;
exports.defaultToJSONContentType = defaultToJSONContentType;
exports.catchAllHandler = catchAllHandler;
exports.catch404Handler = catch404Handler;
exports.catch4XXHandler = catch4XXHandler;
exports.allowCrossDomainAsyncExecute = allowCrossDomainAsyncExecute;
Object.defineProperty(exports, "handleIdempotency", {
  enumerable: true,
  get: function () {
    return _idempotency.handleIdempotency;
  }
});

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _protocol = require("../protocol");

var _idempotency = require("./idempotency");

function allowCrossDomain(req, res, next) {
  try {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, OPTIONS, DELETE');
    res.header('Access-Control-Allow-Headers', 'Cache-Control, Pragma, Origin, X-Requested-With, Content-Type, Accept, User-Agent');

    if ('OPTIONS' === req.method) {
      return res.sendStatus(200);
    }
  } catch (err) {
    _logger.default.error(`Unexpected error: ${err.stack}`);
  }

  next();
}

function allowCrossDomainAsyncExecute(basePath) {
  return (req, res, next) => {
    const receiveAsyncResponseRegExp = new RegExp(`${_lodash.default.escapeRegExp(basePath)}/session/[a-f0-9-]+/(appium/)?receive_async_response`);

    if (!receiveAsyncResponseRegExp.test(req.url)) {
      return next();
    }

    allowCrossDomain(req, res, next);
  };
}

function fixPythonContentType(basePath) {
  return (req, res, next) => {
    if (new RegExp(`^${_lodash.default.escapeRegExp(basePath)}`).test(req.path) && /^Python/.test(req.headers['user-agent'])) {
      if (req.headers['content-type'] === 'application/x-www-form-urlencoded') {
        req.headers['content-type'] = 'application/json; charset=utf-8';
      }
    }

    next();
  };
}

function defaultToJSONContentType(req, res, next) {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/json; charset=utf-8';
  }

  next();
}

function catchAllHandler(err, req, res, next) {
  _logger.default.error(`Uncaught error: ${err.message}`);

  _logger.default.error('Sending generic error response');

  try {
    res.status(500).send({
      status: _protocol.errors.UnknownError.code(),
      value: `ERROR running Appium command: ${err.message}`
    });

    _logger.default.error(err);
  } catch (ign) {
    next(ign);
  }
}

function catch4XXHandler(err, req, res, next) {
  if (err.status >= 400 && err.status < 500) {
    _logger.default.debug(`Setting content type to 'text/plain' for HTTP status '${err.status}'`);

    res.set('content-type', 'text/plain');
    res.status(err.status).send(`Unable to process request: ${err.message}`);
  } else {
    next(err);
  }
}

function catch404Handler(req, res) {
  _logger.default.debug('No route found. Setting content type to \'text/plain\'');

  res.set('content-type', 'text/plain');
  res.status(404).send(`The URL '${req.originalUrl}' did not map to a valid resource`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL21pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiYWxsb3dDcm9zc0RvbWFpbiIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXIiLCJtZXRob2QiLCJzZW5kU3RhdHVzIiwiZXJyIiwibG9nIiwiZXJyb3IiLCJzdGFjayIsImFsbG93Q3Jvc3NEb21haW5Bc3luY0V4ZWN1dGUiLCJiYXNlUGF0aCIsInJlY2VpdmVBc3luY1Jlc3BvbnNlUmVnRXhwIiwiUmVnRXhwIiwiXyIsImVzY2FwZVJlZ0V4cCIsInRlc3QiLCJ1cmwiLCJmaXhQeXRob25Db250ZW50VHlwZSIsInBhdGgiLCJoZWFkZXJzIiwiZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlIiwiY2F0Y2hBbGxIYW5kbGVyIiwibWVzc2FnZSIsInN0YXR1cyIsInNlbmQiLCJlcnJvcnMiLCJVbmtub3duRXJyb3IiLCJjb2RlIiwidmFsdWUiLCJpZ24iLCJjYXRjaDRYWEhhbmRsZXIiLCJkZWJ1ZyIsInNldCIsImNhdGNoNDA0SGFuZGxlciIsIm9yaWdpbmFsVXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFNBQVNBLGdCQUFULENBQTJCQyxHQUEzQixFQUFnQ0MsR0FBaEMsRUFBcUNDLElBQXJDLEVBQTJDO0FBQ3pDLE1BQUk7QUFDRkQsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsNkJBQVgsRUFBMEMsR0FBMUM7QUFDQUYsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsaUNBQTNDO0FBQ0FGLElBQUFBLEdBQUcsQ0FBQ0UsTUFBSixDQUFXLDhCQUFYLEVBQTJDLG1GQUEzQzs7QUFHQSxRQUFJLGNBQWNILEdBQUcsQ0FBQ0ksTUFBdEIsRUFBOEI7QUFDNUIsYUFBT0gsR0FBRyxDQUFDSSxVQUFKLENBQWUsR0FBZixDQUFQO0FBQ0Q7QUFDRixHQVRELENBU0UsT0FBT0MsR0FBUCxFQUFZO0FB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QUFKLENBQVdsQixHQUFHLENBQUNrQixNQUFmLEVBQXVCQyxJQUF2QixDQUE2Qiw4QkFBNkJuQixHQUFHLENBQUNpQixPQUFRLEVBQXRFO0FBQ0QsR0FORCxNQU1PO0FBQ0xyQixJQUFBQSxJQUFJLENBQUNJLEdBQUQsQ0FBSjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzRCLGVBQVQsQ0FBMEJsQyxHQUExQixFQUErQkMsR0FBL0IsRUFBb0M7QUFHbENNLGtCQUFJeUIsS0FBSixDQUFVLHdEQUFWOztBQUNBL0IsRUFBQUEsR0FBRyxDQUFDZ0MsR0FBSixDQUFRLGNBQVIsRUFBd0IsWUFBeEI7QUFDQWhDLEVBQUFBLEdBQUcsQ0FBQ3VCLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFzQixZQUFXekIsR0FBRyxDQUFDbUMsV0FBWSxtQ0FBakQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJy4uL3Byb3RvY29sJztcbmltcG9ydCB7IGhhbmRsZUlkZW1wb3RlbmN5IH0gZnJvbSAnLi9pZGVtcG90ZW5jeSc7XG5cbmZ1bmN0aW9uIGFsbG93Q3Jvc3NEb21haW4gKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHRyeSB7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ0dFVCwgUE9TVCwgUFVULCBPUFRJT05TLCBERUxFVEUnKTtcbiAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJywgJ0NhY2hlLUNvbnRyb2wsIFByYWdtYSwgT3JpZ2luLCBYLVJlcXVlc3RlZC1XaXRoLCBDb250ZW50LVR5cGUsIEFjY2VwdCwgVXNlci1BZ2VudCcpO1xuXG4gICAgLy8gbmVlZCB0byByZXNwb25kIDIwMCB0byBPUFRJT05TXG4gICAgaWYgKCdPUFRJT05TJyA9PT0gcmVxLm1ldGhvZCkge1xuICAgICAgcmV0dXJuIHJlcy5zZW5kU3RhdHVzKDIwMCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYFVuZXhwZWN0ZWQgZXJyb3I6ICR7ZXJyLnN0YWNrfWApO1xuICB9XG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gYWxsb3dDcm9zc0RvbWFpbkFzeW5jRXhlY3V0ZSAoYmFzZVBhdGgpIHtcbiAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIC8vIHRoZXJlIGFyZSB0d28gcGF0aHMgZm9yIGFzeW5jIHJlc3BvbnNlcywgc28gY292ZXIgYm90aFxuICAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdHhZaUV6LzFcbiAgICBjb25zdCByZWNlaXZlQXN5bmNSZXNwb25zZVJlZ0V4cCA9IG5ldyBSZWdFeHAoYCR7Xy5lc2NhcGVSZWdFeHAoYmFzZVBhdGgpfS9zZXNzaW9uL1thLWYwLTktXSsvKGFwcGl1bS8pP3JlY2VpdmVfYXN5bmNfcmVzcG9uc2VgKTtcbiAgICBpZiAoIXJlY2VpdmVBc3luY1Jlc3BvbnNlUmVnRXhwLnRlc3QocmVxLnVybCkpIHtcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfVxuICAgIGFsbG93Q3Jvc3NEb21haW4ocmVxLCByZXMsIG5leHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaXhQeXRob25Db250ZW50VHlwZSAoYmFzZVBhdGgpIHtcbiAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIC8vIGhhY2sgYmVjYXVzZSBweXRob24gY2xpZW50IGxpYnJhcnkgZ2l2ZXMgdXMgd3JvbmcgY29udGVudC10eXBlXG4gICAgaWYgKG5ldyBSZWdFeHAoYF4ke18uZXNjYXBlUmVnRXhwKGJhc2VQYXRoKX1gKS50ZXN0KHJlcS5wYXRoKSAmJiAvXlB5dGhvbi8udGVzdChyZXEuaGVhZGVyc1sndXNlci1hZ2VudCddKSkge1xuICAgICAgaWYgKHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpIHtcbiAgICAgICAgcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgfVxuICAgIH1cbiAgICBuZXh0KCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb0pTT05Db250ZW50VHlwZSAocmVxLCByZXMsIG5leHQpIHtcbiAgaWYgKCFyZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10pIHtcbiAgICByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCc7XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBjYXRjaEFsbEhhbmRsZXIgKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgbG9nLmVycm9yKGBVbmNhdWdodCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgbG9nLmVycm9yKCdTZW5kaW5nIGdlbmVyaWMgZXJyb3IgcmVzcG9uc2UnKTtcbiAgdHJ5IHtcbiAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCh7XG4gICAgICBzdGF0dXM6IGVycm9ycy5Vbmtub3duRXJyb3IuY29kZSgpLFxuICAgICAgdmFsdWU6IGBFUlJPUiBydW5uaW5nIEFwcGl1bSBjb21tYW5kOiAke2Vyci5tZXNzYWdlfWBcbiAgICB9KTtcbiAgICBsb2cuZXJyb3IoZXJyKTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgbmV4dChpZ24pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoNFhYSGFuZGxlciAoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICBpZiAoZXJyLnN0YXR1cyA+PSA0MDAgJiYgZXJyLnN0YXR1cyA8IDUwMCkge1xuICAgIC8vIHNldCB0aGUgY29udGVudCB0eXBlIHRvIGB0ZXh0L3BsYWluYFxuICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avc2VsZW5pdW0vd2lraS9Kc29uV2lyZVByb3RvY29sI1Jlc3BvbnNlc1xuICAgIGxvZy5kZWJ1ZyhgU2V0dGluZyBjb250ZW50IHR5cGUgdG8gJ3RleHQvcGxhaW4nIGZvciBIVFRQIHN0YXR1cyAnJHtlcnIuc3RhdHVzfSdgKTtcbiAgICByZXMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbicpO1xuICAgIHJlcy5zdGF0dXMoZXJyLnN0YXR1cykuc2VuZChgVW5hYmxlIHRvIHByb2Nlc3MgcmVxdWVzdDogJHtlcnIubWVzc2FnZX1gKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0KGVycik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2F0Y2g0MDRIYW5kbGVyIChyZXEsIHJlcykge1xuICAvLyBzZXQgdGhlIGNvbnRlbnQgdHlwZSB0byBgdGV4dC9wbGFpbmBcbiAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9zZWxlbml1bS93aWtpL0pzb25XaXJlUHJvdG9jb2wjUmVzcG9uc2VzXG4gIGxvZy5kZWJ1ZygnTm8gcm91dGUgZm91bmQuIFNldHRpbmcgY29udGVudCB0eXBlIHRvIFxcJ3RleHQvcGxhaW5cXCcnKTtcbiAgcmVzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFRoZSBVUkwgJyR7cmVxLm9yaWdpbmFsVXJsfScgZGlkIG5vdCBtYXAgdG8gYSB2YWxpZCByZXNvdXJjZWApO1xufVxuXG5leHBvcnQge1xuICBhbGxvd0Nyb3NzRG9tYWluLCBmaXhQeXRob25Db250ZW50VHlwZSwgZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlLFxuICBjYXRjaEFsbEhhbmRsZXIsIGNhdGNoNDA0SGFuZGxlciwgY2F0Y2g0WFhIYW5kbGVyLFxuICBhbGxvd0Nyb3NzRG9tYWluQXN5bmNFeGVjdXRlLCBoYW5kbGVJZGVtcG90ZW5jeSxcbn07XG4iXSwiZmlsZSI6ImxpYi9leHByZXNzL21pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
