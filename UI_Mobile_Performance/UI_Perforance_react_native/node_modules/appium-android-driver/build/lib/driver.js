"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _index = _interopRequireDefault(require("./commands/index"));

var _androidHelpers = require("./android-helpers");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumAdb = require("appium-adb");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _sharedPreferencesBuilder = require("shared-preferences-builder");

var _bluebird = _interopRequireDefault(require("bluebird"));

const APP_EXTENSION = '.apk';
const DEVICE_PORT = 4724;
const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['GET', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/network_connection')]];

class AndroidDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.sessionChromedrivers = {};
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = _lodash.default.clone(NO_PROXY);
    this.settings = new _appiumBaseDriver.DeviceSettings({
      ignoreUnimportantViews: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.apkStrings = {};
    this.unlocker = _androidHelpers.helpers.unlocker;

    for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      AndroidDriver.prototype[cmd] = fn;
    }

    this.curContext = this.defaultContextName();
  }

  async createSession(...args) {
    try {
      let [sessionId, caps] = await super.createSession(...args);
      let serverDetails = {
        platform: 'LINUX',
        webStorageEnabled: false,
        takesScreenshot: true,
        javascriptEnabled: true,
        databaseEnabled: false,
        networkConnectionEnabled: true,
        locationContextEnabled: false,
        warnings: {},
        desired: this.caps
      };
      this.caps = Object.assign(serverDetails, this.caps);
      let defaultOpts = {
        action: 'android.intent.action.MAIN',
        category: 'android.intent.category.LAUNCHER',
        flags: '0x10200000',
        disableAndroidWatchers: false,
        tmpDir: await _appiumSupport.tempDir.staticDir(),
        fullReset: false,
        autoLaunch: true,
        adbPort: _appiumAdb.DEFAULT_ADB_PORT,
        bootstrapPort: DEVICE_PORT,
        androidInstallTimeout: 90000
      };

      _lodash.default.defaults(this.opts, defaultOpts);

      this.useUnlockHelperApp = _lodash.default.isUndefined(this.caps.unlockType);

      if (this.opts.noReset === true) {
        this.opts.fullReset = false;
      }

      if (this.opts.fullReset === true) {
        this.opts.noReset = false;
      }

      this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
      this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

      if (this.isChromeSession) {
        _logger.default.info("We're going to run a Chrome-based session");

        let {
          pkg,
          activity
        } = _androidHelpers.helpers.getChromePkg(this.opts.browserName);

        this.opts.appPackage = pkg;
        this.opts.appActivity = activity;

        _logger.default.info(`Chrome-type package and activity are ${pkg} and ${activity}`);
      }

      if (this.opts.nativeWebScreenshot) {
        this.jwpProxyAvoid.push(['GET', new RegExp('^/session/[^/]+/screenshot')]);
      }

      if (this.opts.reboot) {
        this.setAvdFromCapabilities(caps);
      }

      let {
        udid,
        emPort
      } = await _androidHelpers.helpers.getDeviceInfoFromCaps(this.opts);
      this.opts.udid = udid;
      this.opts.emPort = emPort;
      this.adb = await _androidHelpers.helpers.createADB({
        udid: this.opts.udid,
        emPort: this.opts.emPort,
        adbPort: this.opts.adbPort,
        suppressKillServer: this.opts.suppressKillServer,
        remoteAdbHost: this.opts.remoteAdbHost,
        clearDeviceLogsOnStart: this.opts.clearDeviceLogsOnStart,
        adbExecTimeout: this.opts.adbExecTimeout,
        allowOfflineDevices: this.opts.allowOfflineDevices
      });

      if ((await this.adb.getApiLevel()) >= 23) {
        _logger.default.warn("Consider setting 'automationName' capability to " + "'uiautomator2' on Android >= 6, since UIAutomator framework " + 'is not maintained anymore by the OS vendor.');
      }

      if (this.helpers.isPackageOrBundle(this.opts.app)) {
        this.opts.appPackage = this.opts.app;
        this.opts.app = null;
      }

      if (this.opts.app) {
        this.opts.app = await this.helpers.configureApp(this.opts.app, APP_EXTENSION);
        await this.checkAppPresent();
      } else if (this.appOnDevice) {
        _logger.default.info(`App file was not listed, instead we're going to run ` + `${this.opts.appPackage} directly on the device`);

        await this.checkPackagePresent();
      }

      if (_appiumSupport.util.hasValue(this.opts.networkSpeed)) {
        if (!this.isEmulator()) {
          _logger.default.warn('Sorry, networkSpeed capability is only available for emulators');
        } else {
          let networkSpeed = _androidHelpers.helpers.ensureNetworkSpeed(this.adb, this.opts.networkSpeed);

          await this.adb.networkSpeed(networkSpeed);
        }
      }

      if (_appiumSupport.util.hasValue(this.opts.gpsEnabled)) {
        if (this.isEmulator()) {
          _logger.default.info(`Trying to ${this.opts.gpsEnabled ? 'enable' : 'disable'} gps location provider`);

          await this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled);
        } else {
          _logger.default.warn('Sorry! gpsEnabled capability is only available for emulators');
        }
      }

      await this.startAndroidSession(this.opts);
      return [sessionId, this.caps];
    } catch (e) {
      try {
        await this.deleteSession();
      } catch (ign) {}

      throw e;
    }
  }

  isEmulator() {
    return _androidHelpers.helpers.isEmulator(this.adb, this.opts);
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, '-');
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  get appOnDevice() {
    return this.helpers.isPackageOrBundle(this.opts.app) || !this.opts.app && this.helpers.isPackageOrBundle(this.opts.appPackage);
  }

  get isChromeSession() {
    return _androidHelpers.helpers.isChromeBrowser(this.opts.browserName);
  }

  async onSettingsUpdate(key, value) {
    if (key === 'ignoreUnimportantViews') {
      await this.setCompressedLayoutHierarchy(value);
    }
  }

  async startAndroidSession() {
    _logger.default.info(`Starting Android session`);

    this.defaultIME = await _androidHelpers.helpers.initDevice(this.adb, this.opts);
    this.caps.deviceName = this.adb.curDeviceId;
    this.caps.deviceUDID = this.opts.udid;
    this.caps.platformVersion = await this.adb.getPlatformVersion();
    this.caps.deviceScreenSize = await this.adb.getScreenSize();
    this.caps.deviceModel = await this.adb.getModel();
    this.caps.deviceManufacturer = await this.adb.getManufacturer();

    if (this.opts.disableWindowAnimation) {
      if (await this.adb.isAnimationOn()) {
        if ((await this.adb.getApiLevel()) >= 28) {
          _logger.default.warn('Relaxing hidden api policy to manage animation scale');

          await this.adb.setHiddenApiPolicy('1', !!this.opts.ignoreHiddenApiPolicyError);
        }

        _logger.default.info('Disabling window animation as it is requested by "disableWindowAnimation" capability');

        await this.adb.setAnimationState(false);
        this._wasWindowAnimationDisabled = true;
      } else {
        _logger.default.info('Window animation is already disabled');
      }
    }

    if (this.opts.autoLaunch) {
      await this.initAUT();
    }

    this.bootstrap = new _androidHelpers.helpers.bootstrap(this.adb, this.opts.bootstrapPort, this.opts.websocket);
    await this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts);
    this.bootstrap.onUnexpectedShutdown.catch(async err => {
      if (!this.bootstrap.ignoreUnexpectedShutdown) {
        await this.startUnexpectedShutdown(err);
      }
    });

    if (!this.opts.skipUnlock) {
      await _androidHelpers.helpers.unlock(this, this.adb, this.caps);
    }

    if (this.opts.ignoreUnimportantViews) {
      await this.settings.update({
        ignoreUnimportantViews: this.opts.ignoreUnimportantViews
      });
    }

    if (this.isChromeSession) {
      await this.startChromeSession();
    } else {
      if (this.opts.autoLaunch) {
        await this.startAUT();
      }
    }

    if (_appiumSupport.util.hasValue(this.opts.orientation)) {
      _logger.default.debug(`Setting initial orientation to '${this.opts.orientation}'`);

      await this.setOrientation(this.opts.orientation);
    }

    await this.initAutoWebview();
  }

  async initAutoWebview() {
    if (this.opts.autoWebview) {
      let viewName = this.defaultWebviewName();
      let timeout = this.opts.autoWebviewTimeout || 2000;

      _logger.default.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

      await (0, _asyncbox.retryInterval)(timeout / 500, 500, async () => {
        await this.setContext(viewName);
      });
    }
  }

  async initAUT() {
    let launchInfo = await _androidHelpers.helpers.getLaunchInfo(this.adb, this.opts);
    Object.assign(this.opts, launchInfo);
    Object.assign(this.caps, launchInfo);

    if (this.opts.uninstallOtherPackages) {
      _androidHelpers.helpers.validateDesiredCaps(this.opts);

      await _androidHelpers.helpers.uninstallOtherPackages(this.adb, _androidHelpers.helpers.parseArray(this.opts.uninstallOtherPackages), [_androidHelpers.SETTINGS_HELPER_PKG_ID]);
    }

    if (this.opts.otherApps) {
      let otherApps;

      try {
        otherApps = _androidHelpers.helpers.parseArray(this.opts.otherApps);
      } catch (e) {
        _logger.default.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
      }

      otherApps = await _bluebird.default.all(otherApps.map(app => this.helpers.configureApp(app, APP_EXTENSION)));
      await _androidHelpers.helpers.installOtherApks(otherApps, this.adb, this.opts);
    }

    if (!this.opts.app) {
      if (this.opts.fullReset) {
        _logger.default.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
      }

      _logger.default.debug('No app capability. Assuming it is already on the device');

      if (this.opts.fastReset) {
        await _androidHelpers.helpers.resetApp(this.adb, this.opts);
      }

      return;
    }

    if (!this.opts.skipUninstall) {
      await this.adb.uninstallApk(this.opts.appPackage);
    }

    await _androidHelpers.helpers.installApk(this.adb, this.opts);
    const apkStringsForLanguage = await _androidHelpers.helpers.pushStrings(this.opts.language, this.adb, this.opts);

    if (this.opts.language) {
      this.apkStrings[this.opts.language] = apkStringsForLanguage;
    }

    if (!_lodash.default.isUndefined(this.opts.sharedPreferences)) {
      await this.setSharedPreferences(this.opts);
    }
  }

  async checkAppPresent() {
    _logger.default.debug('Checking whether app is actually present');

    if (!(await _appiumSupport.fs.exists(this.opts.app))) {
      _logger.default.errorAndThrow(`Could not find app apk at ${this.opts.app}`);
    }
  }

  async checkPackagePresent() {
    _logger.default.debug('Checking whether package is present on the device');

    if (!(await this.adb.shell(['pm', 'list', 'packages', this.opts.appPackage]))) {
      _logger.default.errorAndThrow(`Could not find package ${this.opts.appPackage} on the device`);
    }
  }

  async setCompressedLayoutHierarchy(compress) {
    await this.bootstrap.sendAction('compressedLayoutHierarchy', {
      compressLayout: compress
    });
  }

  async deleteSession() {
    _logger.default.debug('Shutting down Android driver');

    await _androidHelpers.helpers.removeAllSessionWebSocketHandlers(this.server, this.sessionId);
    await this.mobileStopScreenStreaming();
    await super.deleteSession();

    if (this.bootstrap) {
      await this.stopChromedriverProxies();

      if (this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME) {
        _logger.default.debug(`Resetting IME to ${this.defaultIME}`);

        await this.adb.setIME(this.defaultIME);
      }

      if (!this.isChromeSession && !this.opts.dontStopAppOnReset) {
        await this.adb.forceStop(this.opts.appPackage);
      }

      await this.adb.goToHome();

      if (this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice) {
        await this.adb.uninstallApk(this.opts.appPackage);
      }

      await this.bootstrap.shutdown();
      this.bootstrap = null;
    } else {
      _logger.default.debug("Called deleteSession but bootstrap wasn't active");
    }

    await this.adb.stopLogcat();

    if (this.useUnlockHelperApp) {
      await this.adb.forceStop('io.appium.unlock');
    }

    if (this._wasWindowAnimationDisabled) {
      _logger.default.info('Restoring window animation state');

      await this.adb.setAnimationState(true);

      if ((await this.adb.getApiLevel()) >= 28) {
        _logger.default.info('Restoring hidden api policy to the device default configuration');

        await this.adb.setDefaultHiddenApiPolicy(!!this.opts.ignoreHiddenApiPolicyError);
      }
    }

    if (this.opts.reboot) {
      let avdName = this.opts.avd.replace('@', '');

      _logger.default.debug(`closing emulator '${avdName}'`);

      await this.adb.killEmulator(avdName);
    }
  }

  async setSharedPreferences() {
    let sharedPrefs = this.opts.sharedPreferences;

    _logger.default.info('Trying to set shared preferences');

    let name = sharedPrefs.name;

    if (_lodash.default.isUndefined(name)) {
      _logger.default.warn(`Skipping setting Shared preferences, name is undefined: ${JSON.stringify(sharedPrefs)}`);

      return false;
    }

    let remotePath = `/data/data/${this.opts.appPackage}/shared_prefs`;
    let remoteFile = `${remotePath}/${name}.xml`;
    let localPath = `/tmp/${name}.xml`;
    let builder = this.getPrefsBuilder();
    builder.build(sharedPrefs.prefs);

    _logger.default.info(`Creating temporary shared preferences: ${localPath}`);

    builder.toFile(localPath);

    _logger.default.info(`Creating shared_prefs remote folder: ${remotePath}`);

    await this.adb.shell(['mkdir', '-p', remotePath]);

    _logger.default.info(`Pushing shared_prefs to ${remoteFile}`);

    await this.adb.push(localPath, remoteFile);

    try {
      _logger.default.info(`Trying to remove shared preferences temporary file`);

      if (await _appiumSupport.fs.exists(localPath)) {
        await _appiumSupport.fs.unlink(localPath);
      }
    } catch (e) {
      _logger.default.warn(`Error trying to remove temporary file ${localPath}`);
    }

    return true;
  }

  getPrefsBuilder() {
    return new _sharedPreferencesBuilder.SharedPrefsBuilder();
  }

  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }

    if ((!caps.browserName || !_androidHelpers.helpers.isChromeBrowser(caps.browserName)) && !caps.app && !caps.appPackage) {
      _logger.default.errorAndThrow('The desired capabilities must include either an app, appPackage or browserName');
    }

    return _androidHelpers.helpers.validateDesiredCaps(caps);
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return this.jwpProxyActive;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return _lodash.default.isFunction(this.proxyReqRes);
  }

}

exports.AndroidDriver = AndroidDriver;
var _default = AndroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiQVBQX0VYVEVOU0lPTiIsIkRFVklDRV9QT1JUIiwiTk9fUFJPWFkiLCJSZWdFeHAiLCJBbmRyb2lkRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInNob3VsZFZhbGlkYXRlQ2FwcyIsImxvY2F0b3JTdHJhdGVnaWVzIiwiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwiZGVzaXJlZENvbnN0cmFpbnRzIiwic2Vzc2lvbkNocm9tZWRyaXZlcnMiLCJqd3BQcm94eUFjdGl2ZSIsImp3cFByb3h5QXZvaWQiLCJfIiwiY2xvbmUiLCJzZXR0aW5ncyIsIkRldmljZVNldHRpbmdzIiwiaWdub3JlVW5pbXBvcnRhbnRWaWV3cyIsIm9uU2V0dGluZ3NVcGRhdGUiLCJiaW5kIiwiY2hyb21lZHJpdmVyIiwiYXBrU3RyaW5ncyIsInVubG9ja2VyIiwiaGVscGVycyIsImNtZCIsImZuIiwidG9QYWlycyIsImNvbW1hbmRzIiwicHJvdG90eXBlIiwiY3VyQ29udGV4dCIsImRlZmF1bHRDb250ZXh0TmFtZSIsImNyZWF0ZVNlc3Npb24iLCJhcmdzIiwic2Vzc2lvbklkIiwiY2FwcyIsInNlcnZlckRldGFpbHMiLCJwbGF0Zm9ybSIsIndlYlN0b3JhZ2VFbmFibGVkIiwidGFrZXNTY3JlZW5zaG90IiwiamF2YXNjcmlwdEVuYWJsZWQiLCJkYXRhYmFzZUVuYWJsZWQiLCJuZXR3b3JrQ29ubmVjdGlvbkVuYWJsZWQiLCJsb2NhdGlvbkNvbnRleHRFbmFibGVkIiwid2FybmluZ3MiLCJkZXNpcmVkIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdE9wdHMiLCJhY3Rpb24iLCJjYXRlZ29yeSIsImZsYWdzIiwiZGlzYWJsZUFuZHJvaWRXYXRjaGVycyIsInRtcERpciIsInRlbXBEaXIiLCJzdGF0aWNEaXIiLCJmdWxsUmVzZXQiLCJhdXRvTGF1bmNoIiwiYWRiUG9ydCIsIkRFRkFVTFRfQURCX1BPUlQiLCJib290c3RyYXBQb3J0IiwiYW5kcm9pZEluc3RhbGxUaW1lb3V0IiwiZGVmYXVsdHMiLCJ1c2VVbmxvY2tIZWxwZXJBcHAiLCJpc1VuZGVmaW5lZCIsInVubG9ja1R5cGUiLCJub1Jlc2V0IiwiZmFzdFJlc2V0Iiwic2tpcFVuaW5zdGFsbCIsImlzQ2hyb21lU2Vzc2lvbiIsImxvZyIsImluZm8iLCJwa2ciLCJhY3Rpdml0eSIsImdldENocm9tZVBrZyIsImJyb3dzZXJOYW1lIiwiYXBwUGFja2FnZSIsImFwcEFjdGl2aXR5IiwibmF0aXZlV2ViU2NyZWVuc2hvdCIsInB1c2giLCJyZWJvb3QiLCJzZXRBdmRGcm9tQ2FwYWJpbGl0aWVzIiwidWRpZCIsImVtUG9ydCIsImdldERldmljZUluZm9Gcm9tQ2FwcyIsImFkYiIsImNyZWF0ZUFEQiIsInN1cHByZXNzS2lsbFNlcnZlciIsInJlbW90ZUFkYkhvc3QiLCJjbGVhckRldmljZUxvZ3NPblN0YXJ0IiwiYWRiRXhlY1RpbWVvdXQiLCJhbGxvd09mZmxpbmVEZXZpY2VzIiwiZ2V0QXBpTGV2ZWwiLCJ3YXJuIiwiaXNQYWNrYWdlT3JCdW5kbGUiLCJhcHAiLCJjb25maWd1cmVBcHAiLCJjaGVja0FwcFByZXNlbnQiLCJhcHBPbkRldmljZSIsImNoZWNrUGFja2FnZVByZXNlbnQiLCJ1dGlsIiwiaGFzVmFsdWUiLCJuZXR3b3JrU3BlZWQiLCJpc0VtdWxhdG9yIiwiZW5zdXJlTmV0d29ya1NwZWVkIiwiZ3BzRW5hYmxlZCIsInRvZ2dsZUdQU0xvY2F0aW9uUHJvdmlkZXIiLCJzdGFydEFuZHJvaWRTZXNzaW9uIiwiZSIsImRlbGV0ZVNlc3Npb24iLCJpZ24iLCJhdmQiLCJkZXZpY2VOYW1lIiwiZXJyb3JBbmRUaHJvdyIsInBsYXRmb3JtVmVyc2lvbiIsImF2ZERldmljZSIsInJlcGxhY2UiLCJpc0Nocm9tZUJyb3dzZXIiLCJrZXkiLCJ2YWx1ZSIsInNldENvbXByZXNzZWRMYXlvdXRIaWVyYXJjaHkiLCJkZWZhdWx0SU1FIiwiaW5pdERldmljZSIsImN1ckRldmljZUlkIiwiZGV2aWNlVURJRCIsImdldFBsYXRmb3JtVmVyc2lvbiIsImRldmljZVNjcmVlblNpemUiLCJnZXRTY3JlZW5TaXplIiwiZGV2aWNlTW9kZWwiLCJnZXRNb2RlbCIsImRldmljZU1hbnVmYWN0dXJlciIsImdldE1hbnVmYWN0dXJlciIsImRpc2FibGVXaW5kb3dBbmltYXRpb24iLCJpc0FuaW1hdGlvbk9uIiwic2V0SGlkZGVuQXBpUG9saWN5IiwiaWdub3JlSGlkZGVuQXBpUG9saWN5RXJyb3IiLCJzZXRBbmltYXRpb25TdGF0ZSIsIl93YXNXaW5kb3dBbmltYXRpb25EaXNhYmxlZCIsImluaXRBVVQiLCJib290c3RyYXAiLCJ3ZWJzb2NrZXQiLCJzdGFydCIsImFjY2VwdFNzbENlcnRzIiwib25VbmV4cGVjdGVkU2h1dGRvd24iLCJjYXRjaCIsImVyciIsImlnbm9yZVVuZXhwZWN0ZWRTaHV0ZG93biIsInN0YXJ0VW5leHBlY3RlZFNodXRkb3duIiwic2tpcFVubG9jayIsInVubG9jayIsInVwZGF0ZSIsInN0YXJ0Q2hyb21lU2Vzc2lvbiIsInN0YXJ0QVVUIiwib3JpZW50YXRpb24iLCJkZWJ1ZyIsInNldE9yaWVudGF0aW9uIiwiaW5pdEF1dG9XZWJ2aWV3IiwiYXV0b1dlYnZpZXciLCJ2aWV3TmFtZSIsImRlZmF1bHRXZWJ2aWV3TmFtZSIsInRpbWVvdXQiLCJhdXRvV2Vidmlld1RpbWVvdXQiLCJzZXRDb250ZXh0IiwibGF1bmNoSW5mbyIsImdldExhdW5jaEluZm8iLCJ1bmluc3RhbGxPdGhlclBhY2thZ2VzIiwidmFsaWRhdGVEZXNpcmVkQ2FwcyIsInBhcnNlQXJyYXkiLCJTRVRUSU5HU19IRUxQRVJfUEtHX0lEIiwib3RoZXJBcHBzIiwibWVzc2FnZSIsIkIiLCJhbGwiLCJtYXAiLCJpbnN0YWxsT3RoZXJBcGtzIiwicmVzZXRBcHAiLCJ1bmluc3RhbGxBcGsiLCJpbnN0YWxsQXBrIiwiYXBrU3RyaW5nc0Zvckxhbmd1YWdlIiwicHVzaFN0cmluZ3MiLCJsYW5ndWFnZSIsInNoYXJlZFByZWZlcmVuY2VzIiwic2V0U2hhcmVkUHJlZmVyZW5jZXMiLCJmcyIsImV4aXN0cyIsInNoZWxsIiwiY29tcHJlc3MiLCJzZW5kQWN0aW9uIiwiY29tcHJlc3NMYXlvdXQiLCJyZW1vdmVBbGxTZXNzaW9uV2ViU29ja2V0SGFuZGxlcnMiLCJzZXJ2ZXIiLCJtb2JpbGVTdG9wU2NyZWVuU3RyZWFtaW5nIiwic3RvcENocm9tZWRyaXZlclByb3hpZXMiLCJ1bmljb2RlS2V5Ym9hcmQiLCJyZXNldEtleWJvYXJkIiwic2V0SU1FIiwiZG9udFN0b3BBcHBPblJlc2V0IiwiZm9yY2VTdG9wIiwiZ29Ub0hvbWUiLCJzaHV0ZG93biIsInN0b3BMb2djYXQiLCJzZXREZWZhdWx0SGlkZGVuQXBpUG9saWN5IiwiYXZkTmFtZSIsImtpbGxFbXVsYXRvciIsInNoYXJlZFByZWZzIiwibmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW1vdGVQYXRoIiwicmVtb3RlRmlsZSIsImxvY2FsUGF0aCIsImJ1aWxkZXIiLCJnZXRQcmVmc0J1aWxkZXIiLCJidWlsZCIsInByZWZzIiwidG9GaWxlIiwidW5saW5rIiwiU2hhcmVkUHJlZnNCdWlsZGVyIiwicHJveHlBY3RpdmUiLCJnZXRQcm94eUF2b2lkTGlzdCIsImNhblByb3h5IiwiaXNGdW5jdGlvbiIsInByb3h5UmVxUmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGFBQWEsR0FBRyxNQUF0QjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxJQUFwQjtBQUlBLE1BQU1DLFFBQVEsR0FBRyxDQUNmLENBQUMsTUFBRCxFQUFTLElBQUlDLE1BQUosQ0FBVyx5QkFBWCxDQUFULENBRGUsRUFFZixDQUFDLEtBQUQsRUFBUSxJQUFJQSxNQUFKLENBQVcseUJBQVgsQ0FBUixDQUZlLEVBR2YsQ0FBQyxNQUFELEVBQVMsSUFBSUEs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QUFhO0FBQ25CLFVBQU0wTCxRQUFOLENBQWUxTCxTQUFmO0FBR0EsV0FBT3BCLGdCQUFFK00sVUFBRixDQUFhLEtBQUtDLFdBQWxCLENBQVA7QUFDRDs7QUE1ZG9DOzs7ZUFnZXhCM04sYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEcml2ZXIsIERldmljZVNldHRpbmdzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBkZXNpcmVkQ29uc3RyYWludHMgZnJvbSAnLi9kZXNpcmVkLWNhcHMnO1xuaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMvaW5kZXgnO1xuaW1wb3J0IHsgaGVscGVycywgU0VUVElOR1NfSEVMUEVSX1BLR19JRCB9IGZyb20gJy4vYW5kcm9pZC1oZWxwZXJzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IERFRkFVTFRfQURCX1BPUlQgfSBmcm9tICdhcHBpdW0tYWRiJztcbmltcG9ydCB7IGZzLCB0ZW1wRGlyLCB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IFNoYXJlZFByZWZzQnVpbGRlciB9IGZyb20gJ3NoYXJlZC1wcmVmZXJlbmNlcy1idWlsZGVyJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgQVBQX0VYVEVOU0lPTiA9ICcuYXBrJztcbmNvbnN0IERFVklDRV9QT1JUID0gNDcyNDtcblxuLy8gVGhpcyBpcyBhIHNldCBvZiBtZXRob2RzIGFuZCBwYXRocyB0aGF0IHdlIG5ldmVyIHdhbnQgdG8gcHJveHkgdG9cbi8vIENocm9tZWRyaXZlclxuY29uc3QgTk9fUFJPWFkgPSBbXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9jb250ZXh0JyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9jb250ZXh0JyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0nKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy90b3VjaC9wZXJmb3JtJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvdG91Y2gvbXVsdGkvcGVyZm9ybScpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL29yaWVudGF0aW9uJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9vcmllbnRhdGlvbicpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2V4ZWN1dGUnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9leGVjdXRlL3N5bmMnKV0sXG4gIFsnR0VUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL25ldHdvcmtfY29ubmVjdGlvbicpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL25ldHdvcmtfY29ubmVjdGlvbicpXSxcbl07XG5cbmNsYXNzIEFuZHJvaWREcml2ZXIgZXh0ZW5kcyBCYXNlRHJpdmVyIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc2hvdWxkVmFsaWRhdGVDYXBzID0gdHJ1ZSkge1xuICAgIHN1cGVyKG9wdHMsIHNob3VsZFZhbGlkYXRlQ2Fwcyk7XG5cbiAgICB0aGlzLmxvY2F0b3JTdHJhdGVnaWVzID0gW1xuICAgICAgJ3hwYXRoJyxcbiAgICAgICdpZCcsXG4gICAgICAnY2xhc3MgbmFtZScsXG4gICAgICAnYWNjZXNzaWJpbGl0eSBpZCcsXG4gICAgICAnLWFuZHJvaWQgdWlhdXRvbWF0b3InXG4gICAgXTtcbiAgICB0aGlzLmRlc2lyZWRDYXBDb25zdHJhaW50cyA9IGRlc2lyZWRDb25zdHJhaW50cztcbiAgICB0aGlzLnNlc3Npb25DaHJvbWVkcml2ZXJzID0ge307XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuandwUHJveHlBdm9pZCA9IF8uY2xvbmUoTk9fUFJPWFkpO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgRGV2aWNlU2V0dGluZ3Moe2lnbm9yZVVuaW1wb3J0YW50Vmlld3M6IGZhbHNlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TZXR0aW5nc1VwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNocm9tZWRyaXZlciA9IG51bGw7XG4gICAgdGhpcy5hcGtTdHJpbmdzID0ge307XG4gICAgdGhpcy51bmxvY2tlciA9IGhlbHBlcnMudW5sb2NrZXI7XG5cbiAgICBmb3IgKGxldCBbY21kLCBmbl0gb2YgXy50b1BhaXJzKGNvbW1hbmRzKSkge1xuICAgICAgQW5kcm9pZERyaXZlci5wcm90b3R5cGVbY21kXSA9IGZuO1xuICAgIH1cblxuICAgIC8vIG5lZWRzIHRvIGJlIGFmdGVyIHRoZSBsaW5lIHdoaWNoIGFzc2lnbnMgY29tbWFuZHMgdG8gQW5kcm9pZERyaXZlci5wcm90b3R5cGUsIHNvIHRoYXQgYHRoaXMuZGVmYXVsdENvbnRleHROYW1lYCBpcyBkZWZpbmVkLlxuICAgIHRoaXMuY3VyQ29udGV4dCA9IHRoaXMuZGVmYXVsdENvbnRleHROYW1lKCk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVTZXNzaW9uICguLi5hcmdzKSB7XG4gICAgLy8gdGhlIHdob2xlIGNyZWF0ZVNlc3Npb24gZmxvdyBpcyBzdXJyb3VuZGVkIGluIGEgdHJ5LWNhdGNoIHN0YXRlbWVudFxuICAgIC8vIGlmIGNyZWF0aW5nIGEgc2Vzc2lvbiBmYWlscyBhdCBhbnkgcG9pbnQsIHdlIHRlYXJkb3duIGV2ZXJ5dGhpbmcgd2VcbiAgICAvLyBzZXQgdXAgYmVmb3JlIHRocm93aW5nIHRoZSBlcnJvci5cbiAgICB0cnkge1xuICAgICAgbGV0IFtzZXNzaW9uSWQsIGNhcHNdID0gYXdhaXQgc3VwZXIuY3JlYXRlU2Vzc2lvbiguLi5hcmdzKTtcblxuICAgICAgbGV0IHNlcnZlckRldGFpbHMgPSB7XG4gICAgICAgIHBsYXRmb3JtOiAnTElOVVgnLFxuICAgICAgICB3ZWJTdG9yYWdlRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHRha2VzU2NyZWVuc2hvdDogdHJ1ZSxcbiAgICAgICAgamF2YXNjcmlwdEVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGRhdGFiYXNlRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIG5ldHdvcmtDb25uZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgbG9jYXRpb25Db250ZXh0RW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHdhcm5pbmdzOiB7fSxcbiAgICAgICAgZGVzaXJlZDogdGhpcy5jYXBzXG4gICAgICB9O1xuXG4gICAgICB0aGlzLmNhcHMgPSBPYmplY3QuYXNzaWduKHNlcnZlckRldGFpbHMsIHRoaXMuY2Fwcyk7XG5cbiAgICAgIC8vIGFzc2lnbmluZyBkZWZhdWx0c1xuICAgICAgbGV0IGRlZmF1bHRPcHRzID0ge1xuICAgICAgICBhY3Rpb246ICdhbmRyb2lkLmludGVudC5hY3Rpb24uTUFJTicsXG4gICAgICAgIGNhdGVnb3J5OiAnYW5kcm9pZC5pbnRlbnQuY2F0ZWdvcnkuTEFVTkNIRVInLFxuICAgICAgICBmbGFnczogJzB4MTAyMDAwMDAnLFxuICAgICAgICBkaXNhYmxlQW5kcm9pZFdhdGNoZXJzOiBmYWxzZSxcbiAgICAgICAgdG1wRGlyOiBhd2FpdCB0ZW1wRGlyLnN0YXRpY0RpcigpLFxuICAgICAgICBmdWxsUmVzZXQ6IGZhbHNlLFxuICAgICAgICBhdXRvTGF1bmNoOiB0cnVlLFxuICAgICAgICBhZGJQb3J0OiBERUZBVUxUX0FEQl9QT1JULFxuICAgICAgICBib290c3RyYXBQb3J0OiBERVZJQ0VfUE9SVCxcbiAgICAgICAgYW5kcm9pZEluc3RhbGxUaW1lb3V0OiA5MDAwMCxcbiAgICAgIH07XG4gICAgICBfLmRlZmF1bHRzKHRoaXMub3B0cywgZGVmYXVsdE9wdHMpO1xuICAgICAgdGhpcy51c2VVbmxvY2tIZWxwZXJBcHAgPSBfLmlzVW5kZWZpbmVkKHRoaXMuY2Fwcy51bmxvY2tUeXBlKTtcblxuICAgICAgLy8gbm90IHVzZXIgdmlzaWJsZSB2aWEgY2Fwc1xuICAgICAgaWYgKHRoaXMub3B0cy5ub1Jlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMub3B0cy5mdWxsUmVzZXQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdHMuZnVsbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMub3B0cy5ub1Jlc2V0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdHMuZmFzdFJlc2V0ID0gIXRoaXMub3B0cy5mdWxsUmVzZXQgJiYgIXRoaXMub3B0cy5ub1Jlc2V0O1xuICAgICAgdGhpcy5vcHRzLnNraXBVbmluc3RhbGwgPSB0aGlzLm9wdHMuZmFzdFJlc2V0IHx8IHRoaXMub3B0cy5ub1Jlc2V0O1xuXG4gICAgICBpZiAodGhpcy5pc0Nocm9tZVNlc3Npb24pIHtcbiAgICAgICAgbG9nLmluZm8oXCJXZSdyZSBnb2luZyB0byBydW4gYSBDaHJvbWUtYmFzZWQgc2Vzc2lvblwiKTtcbiAgICAgICAgbGV0IHtwa2csIGFjdGl2aXR5fSA9IGhlbHBlcnMuZ2V0Q2hyb21lUGtnKHRoaXMub3B0cy5icm93c2VyTmFtZSk7XG4gICAgICAgIHRoaXMub3B0cy5hcHBQYWNrYWdlID0gcGtnO1xuICAgICAgICB0aGlzLm9wdHMuYXBwQWN0aXZpdHkgPSBhY3Rpdml0eTtcbiAgICAgICAgbG9nLmluZm8oYENocm9tZS10eXBlIHBhY2thZ2UgYW5kIGFjdGl2aXR5IGFyZSAke3BrZ30gYW5kICR7YWN0aXZpdHl9YCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdHMubmF0aXZlV2ViU2NyZWVuc2hvdCkge1xuICAgICAgICB0aGlzLmp3cFByb3h5QXZvaWQucHVzaChbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9zY3JlZW5zaG90JyldKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0cy5yZWJvb3QpIHtcbiAgICAgICAgdGhpcy5zZXRBdmRGcm9tQ2FwYWJpbGl0aWVzKGNhcHMpO1xuICAgICAgfVxuXG4gICAgICAvLyBnZXQgZGV2aWNlIHVkaWQgZm9yIHRoaXMgc2Vzc2lvblxuICAgICAgbGV0IHt1ZGlkLCBlbVBvcnR9ID0gYXdhaXQgaGVscGVycy5nZXREZXZpY2VJbmZvRnJvbUNhcHModGhpcy5vcHRzKTtcbiAgICAgIHRoaXMub3B0cy51ZGlkID0gdWRpZDtcbiAgICAgIHRoaXMub3B0cy5lbVBvcnQgPSBlbVBvcnQ7XG5cbiAgICAgIC8vIHNldCB1cCBhbiBpbnN0YW5jZSBvZiBBREJcbiAgICAgIHRoaXMuYWRiID0gYXdhaXQgaGVscGVycy5jcmVhdGVBREIoe1xuICAgICAgICB1ZGlkOiB0aGlzLm9wdHMudWRpZCxcbiAgICAgICAgZW1Qb3J0OiB0aGlzLm9wdHMuZW1Qb3J0LFxuICAgICAgICBhZGJQb3J0OiB0aGlzLm9wdHMuYWRiUG9ydCxcbiAgICAgICAgc3VwcHJlc3NLaWxsU2VydmVyOiB0aGlzLm9wdHMuc3VwcHJlc3NLaWxsU2VydmVyLFxuICAgICAgICByZW1vdGVBZGJIb3N0OiB0aGlzLm9wdHMucmVtb3RlQWRiSG9zdCxcbiAgICAgICAgY2xlYXJEZXZpY2VMb2dzT25TdGFydDogdGhpcy5vcHRzLmNsZWFyRGV2aWNlTG9nc09uU3RhcnQsXG4gICAgICAgIGFkYkV4ZWNUaW1lb3V0OiB0aGlzLm9wdHMuYWRiRXhlY1RpbWVvdXQsXG4gICAgICAgIGFsbG93T2ZmbGluZURldmljZXM6IHRoaXMub3B0cy5hbGxvd09mZmxpbmVEZXZpY2VzLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhd2FpdCB0aGlzLmFkYi5nZXRBcGlMZXZlbCgpID49IDIzKSB7XG4gICAgICAgIGxvZy53YXJuKFwiQ29uc2lkZXIgc2V0dGluZyAnYXV0b21hdGlvbk5hbWUnIGNhcGFiaWxpdHkgdG8gXCIgK1xuICAgICAgICAgIFwiJ3VpYXV0b21hdG9yMicgb24gQW5kcm9pZCA+PSA2LCBzaW5jZSBVSUF1dG9tYXRvciBmcmFtZXdvcmsgXCIgK1xuICAgICAgICAgICdpcyBub3QgbWFpbnRhaW5lZCBhbnltb3JlIGJ5IHRoZSBPUyB2ZW5kb3IuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhlbHBlcnMuaXNQYWNrYWdlT3JCdW5kbGUodGhpcy5vcHRzLmFwcCkpIHtcbiAgICAgICAgLy8gdXNlciBwcm92aWRlZCBwYWNrYWdlIGluc3RlYWQgb2YgYXBwIGZvciAnYXBwJyBjYXBhYmlsaXR5LCBtYXNzYWdlIG9wdGlvbnNcbiAgICAgICAgdGhpcy5vcHRzLmFwcFBhY2thZ2UgPSB0aGlzLm9wdHMuYXBwO1xuICAgICAgICB0aGlzLm9wdHMuYXBwID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0cy5hcHApIHtcbiAgICAgICAgLy8gZmluZCBhbmQgY29weSwgb3IgZG93bmxvYWQgYW5kIHVuemlwIGFuIGFwcCB1cmwgb3IgcGF0aFxuICAgICAgICB0aGlzLm9wdHMuYXBwID0gYXdhaXQgdGhpcy5oZWxwZXJzLmNvbmZpZ3VyZUFwcCh0aGlzLm9wdHMuYXBwLCBBUFBfRVhURU5TSU9OKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0FwcFByZXNlbnQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcHBPbkRldmljZSkge1xuICAgICAgICAvLyB0aGUgYXBwIGlzbid0IGFuIGFjdHVhbCBhcHAgZmlsZSBidXQgcmF0aGVyIHNvbWV0aGluZyB3ZSB3YW50IHRvXG4gICAgICAgIC8vIGFzc3VtZSBpcyBvbiB0aGUgZGV2aWNlIGFuZCBqdXN0IGxhdW5jaCB2aWEgdGhlIGFwcFBhY2thZ2VcbiAgICAgICAgbG9nLmluZm8oYEFwcCBmaWxlIHdhcyBub3QgbGlzdGVkLCBpbnN0ZWFkIHdlJ3JlIGdvaW5nIHRvIHJ1biBgICtcbiAgICAgICAgICBgJHt0aGlzLm9wdHMuYXBwUGFja2FnZX0gZGlyZWN0bHkgb24gdGhlIGRldmljZWApO1xuICAgICAgICBhd2FpdCB0aGlzLmNoZWNrUGFja2FnZVByZXNlbnQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU29tZSBjbG91ZCBzZXJ2aWNlcyB1c2luZyBhcHBpdW0gbGF1bmNoIHRoZSBhdmQgdGhlbXNlbHZlcywgc28gd2UgZW5zdXJlIG5ldHNwZWVkXG4gICAgICAvLyBpcyBzZXQgZm9yIGVtdWxhdG9ycyBieSBjYWxsaW5nIGFkYi5uZXR3b3JrU3BlZWQgYmVmb3JlIHJ1bm5pbmcgdGhlIGFwcFxuICAgICAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLm5ldHdvcmtTcGVlZCkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW11bGF0b3IoKSkge1xuICAgICAgICAgIGxvZy53YXJuKCdTb3JyeSwgbmV0d29ya1NwZWVkIGNhcGFiaWxpdHkgaXMgb25seSBhdmFpbGFibGUgZm9yIGVtdWxhdG9ycycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBuZXR3b3JrU3BlZWQgPSBoZWxwZXJzLmVuc3VyZU5ldHdvcmtTcGVlZCh0aGlzLmFkYiwgdGhpcy5vcHRzLm5ldHdvcmtTcGVlZCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGIubmV0d29ya1NwZWVkKG5ldHdvcmtTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgdG8gZW5hYmxlL2Rpc2FibGUgZ3BzIGJlZm9yZSBydW5uaW5nIHRoZSBhcHBsaWNhdGlvblxuICAgICAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLmdwc0VuYWJsZWQpKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW11bGF0b3IoKSkge1xuICAgICAgICAgIGxvZy5pbmZvKGBUcnlpbmcgdG8gJHt0aGlzLm9wdHMuZ3BzRW5hYmxlZCA/ICdlbmFibGUnIDogJ2Rpc2FibGUnfSBncHMgbG9jYXRpb24gcHJvdmlkZXJgKTtcbiAgICAgICAgICBhd2FpdCB0aGlzLmFkYi50b2dnbGVHUFNMb2NhdGlvblByb3ZpZGVyKHRoaXMub3B0cy5ncHNFbmFibGVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2cud2FybignU29ycnkhIGdwc0VuYWJsZWQgY2FwYWJpbGl0eSBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgZW11bGF0b3JzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5zdGFydEFuZHJvaWRTZXNzaW9uKHRoaXMub3B0cyk7XG4gICAgICByZXR1cm4gW3Nlc3Npb25JZCwgdGhpcy5jYXBzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZ25vcmluZyBkZWxldGUgc2Vzc2lvbiBleGNlcHRpb24gaWYgYW55IGFuZCB0aHJvdyB0aGUgcmVhbCBlcnJvclxuICAgICAgLy8gdGhhdCBoYXBwZW5lZCB3aGlsZSBjcmVhdGluZyB0aGUgc2Vzc2lvbi5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpc0VtdWxhdG9yICgpIHtcbiAgICByZXR1cm4gaGVscGVycy5pc0VtdWxhdG9yKHRoaXMuYWRiLCB0aGlzLm9wdHMpO1xuICB9XG5cbiAgc2V0QXZkRnJvbUNhcGFiaWxpdGllcyAoY2Fwcykge1xuICAgIGlmICh0aGlzLm9wdHMuYXZkKSB7XG4gICAgICBsb2cuaW5mbygnYXZkIG5hbWUgZGVmaW5lZCwgaWdub3JpbmcgZGV2aWNlIG5hbWUgYW5kIHBsYXRmb3JtIHZlcnNpb24nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjYXBzLmRldmljZU5hbWUpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ2F2ZCBvciBkZXZpY2VOYW1lIHNob3VsZCBiZSBzcGVjaWZpZWQgd2hlbiByZWJvb3Qgb3B0aW9uIGlzIGVuYWJsZXMnKTtcbiAgICAgIH1cbiAgICAgIGlmICghY2Fwcy5wbGF0Zm9ybVZlcnNpb24pIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ2F2ZCBvciBwbGF0Zm9ybVZlcnNpb24gc2hvdWxkIGJlIHNwZWNpZmllZCB3aGVuIHJlYm9vdCBvcHRpb24gaXMgZW5hYmxlZCcpO1xuICAgICAgfVxuICAgICAgbGV0IGF2ZERldmljZSA9IGNhcHMuZGV2aWNlTmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV8uXS9nLCAnLScpO1xuICAgICAgdGhpcy5vcHRzLmF2ZCA9IGAke2F2ZERldmljZX1fXyR7Y2Fwcy5wbGF0Zm9ybVZlcnNpb259YDtcbiAgICB9XG4gIH1cblxuICBnZXQgYXBwT25EZXZpY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmhlbHBlcnMuaXNQYWNrYWdlT3JCdW5kbGUodGhpcy5vcHRzLmFwcCkgfHwgKCF0aGlzLm9wdHMuYXBwICYmXG4gICAgICAgICAgIHRoaXMuaGVscGVycy5pc1BhY2thZ2VPckJ1bmRsZSh0aGlzLm9wdHMuYXBwUGFja2FnZSkpO1xuICB9XG5cbiAgZ2V0IGlzQ2hyb21lU2Vzc2lvbiAoKSB7XG4gICAgcmV0dXJuIGhlbHBlcnMuaXNDaHJvbWVCcm93c2VyKHRoaXMub3B0cy5icm93c2VyTmFtZSk7XG4gIH1cblxuICBhc3luYyBvblNldHRpbmdzVXBkYXRlIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2lnbm9yZVVuaW1wb3J0YW50Vmlld3MnKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldENvbXByZXNzZWRMYXlvdXRIaWVyYXJjaHkodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN0YXJ0QW5kcm9pZFNlc3Npb24gKCkge1xuICAgIGxvZy5pbmZvKGBTdGFydGluZyBBbmRyb2lkIHNlc3Npb25gKTtcbiAgICAvLyBzZXQgdXAgdGhlIGRldmljZSB0byBydW4gb24gKHJlYWwgb3IgZW11bGF0b3IsIGV0YylcbiAgICB0aGlzLmRlZmF1bHRJTUUgPSBhd2FpdCBoZWxwZXJzLmluaXREZXZpY2UodGhpcy5hZGIsIHRoaXMub3B0cyk7XG5cbiAgICAvLyBzZXQgYWN0dWFsIGRldmljZSBuYW1lLCB1ZGlkLCBwbGF0Zm9ybSB2ZXJzaW9uLCBzY3JlZW4gc2l6ZSwgbW9kZWwgYW5kIG1hbnVmYWN0dXJlciBkZXRhaWxzLlxuICAgIHRoaXMuY2Fwcy5kZXZpY2VOYW1lID0gdGhpcy5hZGIuY3VyRGV2aWNlSWQ7XG4gICAgdGhpcy5jYXBzLmRldmljZVVESUQgPSB0aGlzLm9wdHMudWRpZDtcbiAgICB0aGlzLmNhcHMucGxhdGZvcm1WZXJzaW9uID0gYXdhaXQgdGhpcy5hZGIuZ2V0UGxhdGZvcm1WZXJzaW9uKCk7XG4gICAgdGhpcy5jYXBzLmRldmljZVNjcmVlblNpemUgPSBhd2FpdCB0aGlzLmFkYi5nZXRTY3JlZW5TaXplKCk7XG4gICAgdGhpcy5jYXBzLmRldmljZU1vZGVsID0gYXdhaXQgdGhpcy5hZGIuZ2V0TW9kZWwoKTtcbiAgICB0aGlzLmNhcHMuZGV2aWNlTWFudWZhY3R1cmVyID0gYXdhaXQgdGhpcy5hZGIuZ2V0TWFudWZhY3R1cmVyKCk7XG5cbiAgICBpZiAodGhpcy5vcHRzLmRpc2FibGVXaW5kb3dBbmltYXRpb24pIHtcbiAgICAgIGlmIChhd2FpdCB0aGlzLmFkYi5pc0FuaW1hdGlvbk9uKCkpIHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuYWRiLmdldEFwaUxldmVsKCkgPj0gMjgpIHsgLy8gQVBJIGxldmVsIDI4IGlzIEFuZHJvaWQgUFxuICAgICAgICAgIC8vIERvbid0IGZvcmdldCB0byByZXNldCB0aGUgcmVsYXhpbmcgaW4gZGVsZXRlIHNlc3Npb25cbiAgICAgICAgICBsb2cud2FybignUmVsYXhpbmcgaGlkZGVuIGFwaSBwb2xpY3kgdG8gbWFuYWdlIGFuaW1hdGlvbiBzY2FsZScpO1xuICAgICAgICAgIGF3YWl0IHRoaXMuYWRiLnNldEhpZGRlbkFwaVBvbGljeSgnMScsICEhdGhpcy5vcHRzLmlnbm9yZUhpZGRlbkFwaVBvbGljeUVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy5pbmZvKCdEaXNhYmxpbmcgd2luZG93IGFuaW1hdGlvbiBhcyBpdCBpcyByZXF1ZXN0ZWQgYnkgXCJkaXNhYmxlV2luZG93QW5pbWF0aW9uXCIgY2FwYWJpbGl0eScpO1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi5zZXRBbmltYXRpb25TdGF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuX3dhc1dpbmRvd0FuaW1hdGlvbkRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5pbmZvKCdXaW5kb3cgYW5pbWF0aW9uIGlzIGFscmVhZHkgZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdXNlciBzZXRzIGF1dG9MYXVuY2ggdG8gZmFsc2UsIHRoZXkgYXJlIHJlc3BvbnNpYmxlIGZvciBpbml0QVVUKCkgYW5kIHN0YXJ0QVVUKClcbiAgICBpZiAodGhpcy5vcHRzLmF1dG9MYXVuY2gpIHtcbiAgICAgIC8vIHNldCB1cCBhcHAgdW5kZXIgdGVzdFxuICAgICAgYXdhaXQgdGhpcy5pbml0QVVUKCk7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQgVWlBdXRvbWF0b3JcbiAgICB0aGlzLmJvb3RzdHJhcCA9IG5ldyBoZWxwZXJzLmJvb3RzdHJhcCh0aGlzLmFkYiwgdGhpcy5vcHRzLmJvb3RzdHJhcFBvcnQsIHRoaXMub3B0cy53ZWJzb2NrZXQpO1xuICAgIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnN0YXJ0KHRoaXMub3B0cy5hcHBQYWNrYWdlLCB0aGlzLm9wdHMuZGlzYWJsZUFuZHJvaWRXYXRjaGVycywgdGhpcy5vcHRzLmFjY2VwdFNzbENlcnRzKTtcbiAgICAvLyBoYW5kbGluZyB1bmV4cGVjdGVkIHNodXRkb3duXG4gICAgdGhpcy5ib290c3RyYXAub25VbmV4cGVjdGVkU2h1dGRvd24uY2F0Y2goYXN5bmMgKGVycikgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgICAgaWYgKCF0aGlzLmJvb3RzdHJhcC5pZ25vcmVVbmV4cGVjdGVkU2h1dGRvd24pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdGFydFVuZXhwZWN0ZWRTaHV0ZG93bihlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLm9wdHMuc2tpcFVubG9jaykge1xuICAgICAgLy8gTGV0J3MgdHJ5IHRvIHVubG9jayB0aGUgZGV2aWNlXG4gICAgICBhd2FpdCBoZWxwZXJzLnVubG9jayh0aGlzLCB0aGlzLmFkYiwgdGhpcy5jYXBzKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgQ29tcHJlc3NlZExheW91dEhpZXJhcmNoeSBvbiB0aGUgZGV2aWNlIGJhc2VkIG9uIGN1cnJlbnQgc2V0dGluZ3Mgb2JqZWN0XG4gICAgLy8gdGhpcyBoYXMgdG8gaGFwcGVuIF9hZnRlcl8gYm9vdHN0cmFwIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKHRoaXMub3B0cy5pZ25vcmVVbmltcG9ydGFudFZpZXdzKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldHRpbmdzLnVwZGF0ZSh7aWdub3JlVW5pbXBvcnRhbnRWaWV3czogdGhpcy5vcHRzLmlnbm9yZVVuaW1wb3J0YW50Vmlld3N9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Nocm9tZVNlc3Npb24pIHtcbiAgICAgIC8vIHN0YXJ0IGEgY2hyb21lZHJpdmVyIHNlc3Npb24gYW5kIHByb3h5IHRvIGl0XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0Q2hyb21lU2Vzc2lvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5vcHRzLmF1dG9MYXVuY2gpIHtcbiAgICAgICAgLy8gc3RhcnQgYXBwXG4gICAgICAgIGF3YWl0IHRoaXMuc3RhcnRBVVQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbC5oYXNWYWx1ZSh0aGlzLm9wdHMub3JpZW50YXRpb24pKSB7XG4gICAgICBsb2cuZGVidWcoYFNldHRpbmcgaW5pdGlhbCBvcmllbnRhdGlvbiB0byAnJHt0aGlzLm9wdHMub3JpZW50YXRpb259J2ApO1xuICAgICAgYXdhaXQgdGhpcy5zZXRPcmllbnRhdGlvbih0aGlzLm9wdHMub3JpZW50YXRpb24pO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuaW5pdEF1dG9XZWJ2aWV3KCk7XG4gIH1cblxuICBhc3luYyBpbml0QXV0b1dlYnZpZXcgKCkge1xuICAgIGlmICh0aGlzLm9wdHMuYXV0b1dlYnZpZXcpIHtcbiAgICAgIGxldCB2aWV3TmFtZSA9IHRoaXMuZGVmYXVsdFdlYnZpZXdOYW1lKCk7XG4gICAgICBsZXQgdGltZW91dCA9ICh0aGlzLm9wdHMuYXV0b1dlYnZpZXdUaW1lb3V0KSB8fCAyMDAwO1xuXG4gICAgICBsb2cuaW5mbyhgU2V0dGluZyBhdXRvIHdlYnZpZXcgdG8gY29udGV4dCAnJHt2aWV3TmFtZX0nIHdpdGggdGltZW91dCAke3RpbWVvdXR9bXNgKTtcblxuICAgICAgLy8gdHJ5IGV2ZXJ5IDUwMG1zIHVudGlsIHRpbWVvdXQgaXMgb3ZlclxuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCh0aW1lb3V0IC8gNTAwLCA1MDAsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRDb250ZXh0KHZpZXdOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGluaXRBVVQgKCkge1xuICAgIC8vIHBvcHVsYXRlIGFwcFBhY2thZ2UsIGFwcEFjdGl2aXR5LCBhcHBXYWl0UGFja2FnZSwgYXBwV2FpdEFjdGl2aXR5LFxuICAgIC8vIGFuZCB0aGUgZGV2aWNlIGJlaW5nIHVzZWRcbiAgICAvLyBpbiB0aGUgb3B0cyBhbmQgY2FwcyAoc28gaXQgZ2V0cyBiYWNrIHRvIHRoZSB1c2VyIG9uIHNlc3Npb24gY3JlYXRpb24pXG4gICAgbGV0IGxhdW5jaEluZm8gPSBhd2FpdCBoZWxwZXJzLmdldExhdW5jaEluZm8odGhpcy5hZGIsIHRoaXMub3B0cyk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLm9wdHMsIGxhdW5jaEluZm8pO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5jYXBzLCBsYXVuY2hJbmZvKTtcblxuICAgIC8vIFVuaW5zdGFsbCBhbnkgdW5pbnN0YWxsT3RoZXJQYWNrYWdlcyB3aGljaCB3ZXJlIHNwZWNpZmllZCBpbiBjYXBzXG4gICAgaWYgKHRoaXMub3B0cy51bmluc3RhbGxPdGhlclBhY2thZ2VzKSB7XG4gICAgICBoZWxwZXJzLnZhbGlkYXRlRGVzaXJlZENhcHModGhpcy5vcHRzKTtcbiAgICAgIC8vIE9ubHkgU0VUVElOR1NfSEVMUEVSX1BLR19JRCBwYWNrYWdlIGlzIHVzZWQgYnkgVUlBMVxuICAgICAgYXdhaXQgaGVscGVycy51bmluc3RhbGxPdGhlclBhY2thZ2VzKFxuICAgICAgICB0aGlzLmFkYixcbiAgICAgICAgaGVscGVycy5wYXJzZUFycmF5KHRoaXMub3B0cy51bmluc3RhbGxPdGhlclBhY2thZ2VzKSxcbiAgICAgICAgW1NFVFRJTkdTX0hFTFBFUl9QS0dfSURdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEluc3RhbGwgYW55IFwib3RoZXJBcHBzXCIgdGhhdCB3ZXJlIHNwZWNpZmllZCBpbiBjYXBzXG4gICAgaWYgKHRoaXMub3B0cy5vdGhlckFwcHMpIHtcbiAgICAgIGxldCBvdGhlckFwcHM7XG4gICAgICB0cnkge1xuICAgICAgICBvdGhlckFwcHMgPSBoZWxwZXJzLnBhcnNlQXJyYXkodGhpcy5vcHRzLm90aGVyQXBwcyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgcGFyc2UgXCJvdGhlckFwcHNcIiBjYXBhYmlsaXR5OiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICAgIG90aGVyQXBwcyA9IGF3YWl0IEIuYWxsKG90aGVyQXBwcy5tYXAoKGFwcCkgPT4gdGhpcy5oZWxwZXJzLmNvbmZpZ3VyZUFwcChhcHAsIEFQUF9FWFRFTlNJT04pKSk7XG4gICAgICBhd2FpdCBoZWxwZXJzLmluc3RhbGxPdGhlckFwa3Mob3RoZXJBcHBzLCB0aGlzLmFkYiwgdGhpcy5vcHRzKTtcbiAgICB9XG5cbiAgICAvLyBpbnN0YWxsIGFwcFxuICAgIGlmICghdGhpcy5vcHRzLmFwcCkge1xuICAgICAgaWYgKHRoaXMub3B0cy5mdWxsUmVzZXQpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ0Z1bGwgcmVzZXQgcmVxdWlyZXMgYW4gYXBwIGNhcGFiaWxpdHksIHVzZSBmYXN0UmVzZXQgaWYgYXBwIGlzIG5vdCBwcm92aWRlZCcpO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKCdObyBhcHAgY2FwYWJpbGl0eS4gQXNzdW1pbmcgaXQgaXMgYWxyZWFkeSBvbiB0aGUgZGV2aWNlJyk7XG4gICAgICBpZiAodGhpcy5vcHRzLmZhc3RSZXNldCkge1xuICAgICAgICBhd2FpdCBoZWxwZXJzLnJlc2V0QXBwKHRoaXMuYWRiLCB0aGlzLm9wdHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0cy5za2lwVW5pbnN0YWxsKSB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi51bmluc3RhbGxBcGsodGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xuICAgIH1cbiAgICBhd2FpdCBoZWxwZXJzLmluc3RhbGxBcGsodGhpcy5hZGIsIHRoaXMub3B0cyk7XG4gICAgY29uc3QgYXBrU3RyaW5nc0Zvckxhbmd1YWdlID0gYXdhaXQgaGVscGVycy5wdXNoU3RyaW5ncyh0aGlzLm9wdHMubGFuZ3VhZ2UsIHRoaXMuYWRiLCB0aGlzLm9wdHMpO1xuICAgIGlmICh0aGlzLm9wdHMubGFuZ3VhZ2UpIHtcbiAgICAgIHRoaXMuYXBrU3RyaW5nc1t0aGlzLm9wdHMubGFuZ3VhZ2VdID0gYXBrU3RyaW5nc0Zvckxhbmd1YWdlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgbXVzdCBydW4gYWZ0ZXIgaW5zdGFsbGluZyB0aGUgYXBrLCBvdGhlcndpc2UgaXQgd291bGQgY2F1c2UgdGhlXG4gICAgLy8gaW5zdGFsbCB0byBmYWlsLiBBbmQgYmVmb3JlIHJ1bm5pbmcgdGhlIGFwcC5cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy5vcHRzLnNoYXJlZFByZWZlcmVuY2VzKSkge1xuICAgICAgYXdhaXQgdGhpcy5zZXRTaGFyZWRQcmVmZXJlbmNlcyh0aGlzLm9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNoZWNrQXBwUHJlc2VudCAoKSB7XG4gICAgbG9nLmRlYnVnKCdDaGVja2luZyB3aGV0aGVyIGFwcCBpcyBhY3R1YWxseSBwcmVzZW50Jyk7XG4gICAgaWYgKCEoYXdhaXQgZnMuZXhpc3RzKHRoaXMub3B0cy5hcHApKSkge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBmaW5kIGFwcCBhcGsgYXQgJHt0aGlzLm9wdHMuYXBwfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNoZWNrUGFja2FnZVByZXNlbnQgKCkge1xuICAgIGxvZy5kZWJ1ZygnQ2hlY2tpbmcgd2hldGhlciBwYWNrYWdlIGlzIHByZXNlbnQgb24gdGhlIGRldmljZScpO1xuICAgIGlmICghKGF3YWl0IHRoaXMuYWRiLnNoZWxsKFsncG0nLCAnbGlzdCcsICdwYWNrYWdlcycsIHRoaXMub3B0cy5hcHBQYWNrYWdlXSkpKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ291bGQgbm90IGZpbmQgcGFja2FnZSAke3RoaXMub3B0cy5hcHBQYWNrYWdlfSBvbiB0aGUgZGV2aWNlYCk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IENvbXByZXNzZWRMYXlvdXRIaWVyYXJjaHkgb24gdGhlIGRldmljZVxuICBhc3luYyBzZXRDb21wcmVzc2VkTGF5b3V0SGllcmFyY2h5IChjb21wcmVzcykge1xuICAgIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ2NvbXByZXNzZWRMYXlvdXRIaWVyYXJjaHknLCB7Y29tcHJlc3NMYXlvdXQ6IGNvbXByZXNzfSk7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uICgpIHtcbiAgICBsb2cuZGVidWcoJ1NodXR0aW5nIGRvd24gQW5kcm9pZCBkcml2ZXInKTtcbiAgICBhd2FpdCBoZWxwZXJzLnJlbW92ZUFsbFNlc3Npb25XZWJTb2NrZXRIYW5kbGVycyh0aGlzLnNlcnZlciwgdGhpcy5zZXNzaW9uSWQpO1xuICAgIGF3YWl0IHRoaXMubW9iaWxlU3RvcFNjcmVlblN0cmVhbWluZygpO1xuICAgIGF3YWl0IHN1cGVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICBpZiAodGhpcy5ib290c3RyYXApIHtcbiAgICAgIC8vIGNlcnRhaW4gY2xlYW51cCB3ZSBvbmx5IGNhcmUgdG8gZG8gaWYgdGhlIGJvb3RzdHJhcCB3YXMgZXZlciBydW5cbiAgICAgIGF3YWl0IHRoaXMuc3RvcENocm9tZWRyaXZlclByb3hpZXMoKTtcbiAgICAgIGlmICh0aGlzLm9wdHMudW5pY29kZUtleWJvYXJkICYmIHRoaXMub3B0cy5yZXNldEtleWJvYXJkICYmIHRoaXMuZGVmYXVsdElNRSkge1xuICAgICAgICBsb2cuZGVidWcoYFJlc2V0dGluZyBJTUUgdG8gJHt0aGlzLmRlZmF1bHRJTUV9YCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLnNldElNRSh0aGlzLmRlZmF1bHRJTUUpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzQ2hyb21lU2Vzc2lvbiAmJiAhdGhpcy5vcHRzLmRvbnRTdG9wQXBwT25SZXNldCkge1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi5mb3JjZVN0b3AodGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5hZGIuZ29Ub0hvbWUoKTtcbiAgICAgIGlmICh0aGlzLm9wdHMuZnVsbFJlc2V0ICYmICF0aGlzLm9wdHMuc2tpcFVuaW5zdGFsbCAmJiAhdGhpcy5hcHBPbkRldmljZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi51bmluc3RhbGxBcGsodGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5ib290c3RyYXAuc2h1dGRvd24oKTtcbiAgICAgIHRoaXMuYm9vdHN0cmFwID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKFwiQ2FsbGVkIGRlbGV0ZVNlc3Npb24gYnV0IGJvb3RzdHJhcCB3YXNuJ3QgYWN0aXZlXCIpO1xuICAgIH1cbiAgICAvLyBzb21lIGNsZWFudXAgd2Ugd2FudCB0byBkbyByZWdhcmRsZXNzLCBpbiBjYXNlIHdlIGFyZSBzaHV0dGluZyBkb3duXG4gICAgLy8gbWlkLXN0YXJ0dXBcbiAgICBhd2FpdCB0aGlzLmFkYi5zdG9wTG9nY2F0KCk7XG4gICAgaWYgKHRoaXMudXNlVW5sb2NrSGVscGVyQXBwKSB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi5mb3JjZVN0b3AoJ2lvLmFwcGl1bS51bmxvY2snKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3dhc1dpbmRvd0FuaW1hdGlvbkRpc2FibGVkKSB7XG4gICAgICBsb2cuaW5mbygnUmVzdG9yaW5nIHdpbmRvdyBhbmltYXRpb24gc3RhdGUnKTtcbiAgICAgIGF3YWl0IHRoaXMuYWRiLnNldEFuaW1hdGlvblN0YXRlKHRydWUpO1xuXG4gICAgICAvLyBUaGlzIHdhcyBuZWNlc3NhcnkgdG8gY2hhbmdlIGFuaW1hdGlvbiBzY2FsZSBvdmVyIEFuZHJvaWQgUC4gV2UgbXVzdCByZXNldCB0aGUgcG9saWN5IGZvciB0aGUgc2VjdXJpdHkuXG4gICAgICBpZiAoYXdhaXQgdGhpcy5hZGIuZ2V0QXBpTGV2ZWwoKSA+PSAyOCkge1xuICAgICAgICBsb2cuaW5mbygnUmVzdG9yaW5nIGhpZGRlbiBhcGkgcG9saWN5IHRvIHRoZSBkZXZpY2UgZGVmYXVsdCBjb25maWd1cmF0aW9uJyk7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLnNldERlZmF1bHRIaWRkZW5BcGlQb2xpY3koISF0aGlzLm9wdHMuaWdub3JlSGlkZGVuQXBpUG9saWN5RXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdHMucmVib290KSB7XG4gICAgICBsZXQgYXZkTmFtZSA9IHRoaXMub3B0cy5hdmQucmVwbGFjZSgnQCcsICcnKTtcbiAgICAgIGxvZy5kZWJ1ZyhgY2xvc2luZyBlbXVsYXRvciAnJHthdmROYW1lfSdgKTtcbiAgICAgIGF3YWl0IHRoaXMuYWRiLmtpbGxFbXVsYXRvcihhdmROYW1lKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZXRTaGFyZWRQcmVmZXJlbmNlcyAoKSB7XG4gICAgbGV0IHNoYXJlZFByZWZzID0gdGhpcy5vcHRzLnNoYXJlZFByZWZlcmVuY2VzO1xuICAgIGxvZy5pbmZvKCdUcnlpbmcgdG8gc2V0IHNoYXJlZCBwcmVmZXJlbmNlcycpO1xuICAgIGxldCBuYW1lID0gc2hhcmVkUHJlZnMubmFtZTtcbiAgICBpZiAoXy5pc1VuZGVmaW5lZChuYW1lKSkge1xuICAgICAgbG9nLndhcm4oYFNraXBwaW5nIHNldHRpbmcgU2hhcmVkIHByZWZlcmVuY2VzLCBuYW1lIGlzIHVuZGVmaW5lZDogJHtKU09OLnN0cmluZ2lmeShzaGFyZWRQcmVmcyl9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCByZW1vdGVQYXRoID0gYC9kYXRhL2RhdGEvJHt0aGlzLm9wdHMuYXBwUGFja2FnZX0vc2hhcmVkX3ByZWZzYDtcbiAgICBsZXQgcmVtb3RlRmlsZSA9IGAke3JlbW90ZVBhdGh9LyR7bmFtZX0ueG1sYDtcbiAgICBsZXQgbG9jYWxQYXRoID0gYC90bXAvJHtuYW1lfS54bWxgO1xuICAgIGxldCBidWlsZGVyID0gdGhpcy5nZXRQcmVmc0J1aWxkZXIoKTtcbiAgICBidWlsZGVyLmJ1aWxkKHNoYXJlZFByZWZzLnByZWZzKTtcbiAgICBsb2cuaW5mbyhgQ3JlYXRpbmcgdGVtcG9yYXJ5IHNoYXJlZCBwcmVmZXJlbmNlczogJHtsb2NhbFBhdGh9YCk7XG4gICAgYnVpbGRlci50b0ZpbGUobG9jYWxQYXRoKTtcbiAgICBsb2cuaW5mbyhgQ3JlYXRpbmcgc2hhcmVkX3ByZWZzIHJlbW90ZSBmb2xkZXI6ICR7cmVtb3RlUGF0aH1gKTtcbiAgICBhd2FpdCB0aGlzLmFkYi5zaGVsbChbJ21rZGlyJywgJy1wJywgcmVtb3RlUGF0aF0pO1xuICAgIGxvZy5pbmZvKGBQdXNoaW5nIHNoYXJlZF9wcmVmcyB0byAke3JlbW90ZUZpbGV9YCk7XG4gICAgYXdhaXQgdGhpcy5hZGIucHVzaChsb2NhbFBhdGgsIHJlbW90ZUZpbGUpO1xuICAgIHRyeSB7XG4gICAgICBsb2cuaW5mbyhgVHJ5aW5nIHRvIHJlbW92ZSBzaGFyZWQgcHJlZmVyZW5jZXMgdGVtcG9yYXJ5IGZpbGVgKTtcbiAgICAgIGlmIChhd2FpdCBmcy5leGlzdHMobG9jYWxQYXRoKSkge1xuICAgICAgICBhd2FpdCBmcy51bmxpbmsobG9jYWxQYXRoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cud2FybihgRXJyb3IgdHJ5aW5nIHRvIHJlbW92ZSB0ZW1wb3JhcnkgZmlsZSAke2xvY2FsUGF0aH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXRQcmVmc0J1aWxkZXIgKCkge1xuICAgIC8qIEFkZCB0aGlzIG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgU2hhcmVkUHJlZnNCdWlsZGVyIGluc3RlYWQgb2ZcbiAgICAgKiBkaXJlY3RseSBjcmVhdGluZyB0aGUgb2JqZWN0IG9uIHNldFNoYXJlZFByZWZlcmVuY2VzIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgKi9cbiAgICByZXR1cm4gbmV3IFNoYXJlZFByZWZzQnVpbGRlcigpO1xuICB9XG5cbiAgdmFsaWRhdGVEZXNpcmVkQ2FwcyAoY2Fwcykge1xuICAgIGlmICghc3VwZXIudmFsaWRhdGVEZXNpcmVkQ2FwcyhjYXBzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoKCFjYXBzLmJyb3dzZXJOYW1lIHx8ICFoZWxwZXJzLmlzQ2hyb21lQnJvd3NlcihjYXBzLmJyb3dzZXJOYW1lKSkgJiYgIWNhcHMuYXBwICYmICFjYXBzLmFwcFBhY2thZ2UpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KCdUaGUgZGVzaXJlZCBjYXBhYmlsaXRpZXMgbXVzdCBpbmNsdWRlIGVpdGhlciBhbiBhcHAsIGFwcFBhY2thZ2Ugb3IgYnJvd3Nlck5hbWUnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhlbHBlcnMudmFsaWRhdGVEZXNpcmVkQ2FwcyhjYXBzKTtcbiAgfVxuXG4gIHByb3h5QWN0aXZlIChzZXNzaW9uSWQpIHtcbiAgICBzdXBlci5wcm94eUFjdGl2ZShzZXNzaW9uSWQpO1xuXG4gICAgcmV0dXJuIHRoaXMuandwUHJveHlBY3RpdmU7XG4gIH1cblxuICBnZXRQcm94eUF2b2lkTGlzdCAoc2Vzc2lvbklkKSB7XG4gICAgc3VwZXIuZ2V0UHJveHlBdm9pZExpc3Qoc2Vzc2lvbklkKTtcblxuICAgIHJldHVybiB0aGlzLmp3cFByb3h5QXZvaWQ7XG4gIH1cblxuICBjYW5Qcm94eSAoc2Vzc2lvbklkKSB7XG4gICAgc3VwZXIuY2FuUHJveHkoc2Vzc2lvbklkKTtcblxuICAgIC8vIHRoaXMgd2lsbCBjaGFuZ2UgZGVwZW5kaW5nIG9uIENocm9tZURyaXZlciBzdGF0dXNcbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHRoaXMucHJveHlSZXFSZXMpO1xuICB9XG59XG5cbmV4cG9ydCB7IEFuZHJvaWREcml2ZXIgfTtcbmV4cG9ydCBkZWZhdWx0IEFuZHJvaWREcml2ZXI7XG4iXSwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
