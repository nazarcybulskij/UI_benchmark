"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureBinaryLog = configureBinaryLog;
exports.resolveExecutablePath = resolveExecutablePath;
exports.getNpmPackageInfo = getNpmPackageInfo;
exports.authorizeIos = exports.inquirer = exports.nokOptional = exports.okOptional = exports.nok = exports.ok = exports.pkgRoot = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _inquirer2 = _interopRequireDefault(require("inquirer"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _authorizeIos = _interopRequireDefault(require("authorize-ios"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _lodash = require("lodash");

const authorizeIos = _authorizeIos.default;
exports.authorizeIos = authorizeIos;
const pkgRoot = process.env.NO_PRECOMPILE ? _path.default.resolve(__dirname, '..') : _path.default.resolve(__dirname, '..', '..');
exports.pkgRoot = pkgRoot;

const ok = message => {
  return {
    ok: true,
    optional: false,
    message
  };
};

exports.ok = ok;

const nok = message => {
  return {
    ok: false,
    optional: false,
    message
  };
};

exports.nok = nok;

const okOptional = message => {
  return {
    ok: true,
    optional: true,
    message
  };
};

exports.okOptional = okOptional;

const nokOptional = message => {
  return {
    ok: false,
    optional: true,
    message
  };
};

exports.nokOptional = nokOptional;
const inquirer = {
  prompt: _bluebird.default.promisify(function (question, cb) {
    _inquirer2.default.prompt(question, function (resp) {
      cb(null, resp);
    });
  })
};
exports.inquirer = inquirer;

function configureBinaryLog(opts) {
  let actualLog = _logger.default.unwrap().log;

  _logger.default.unwrap().log = function (level, prefix, msg) {
    let l = this.levels[level];
    if (l < this.levels[this.level]) return;
    actualLog(level, prefix, msg);

    if ((0, _lodash.isFunction)(opts.onLogMessage)) {
      opts.onLogMessage(level, prefix, msg);
    }
  };

  _logger.default.level = opts.debug ? 'debug' : 'info';
}

async function resolveExecutablePath(cmd) {
  let executablePath;

  try {
    executablePath = await _appiumSupport.fs.which(cmd);

    if (executablePath && (await _appiumSupport.fs.exists(executablePath))) {
      return executablePath;
    }
  } catch (err) {
    if (/not found/gi.test(err.message)) {
      _logger.default.debug(err);
    } else {
      _logger.default.warn(err);
    }
  }

  _logger.default.debug(`No executable path of '${cmd}'.`);

  if (executablePath) {
    _logger.default.debug(`Does '${executablePath}' exist?`);
  }

  return null;
}

async function getNpmPackageInfo(packageName) {
  const npmPath = await resolveExecutablePath(`npm${_appiumSupport.system.isWindows() ? `.cmd` : ''}`);

  if (!npmPath) {
    return nokOptional(`'npm' binary not found in PATH: ${process.env.PATH}`);
  }

  let pJson = {};

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(npmPath, ['list', '-g', '-l', '-j', packageName]);
    pJson = JSON.parse(stdout);
  } catch (err) {
    _logger.default.debug(err);

    return null;
  }

  if (pJson.dependencies && pJson.dependencies[packageName]) {
    return {
      version: pJson.dependencies[packageName].version,
      path: pJson.path
    };
  }

  return null;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
