"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OptionalMjpegConsumerCommandCheck = exports.OptionalFfmpegCommandCheck = exports.OptionalOpencv4nodejsCommandCheck = exports.NodeVersionCheck = exports.NodeBinaryCheck = void 0;

require("source-map-support/register");

var _utils = require("./utils");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _nodeDetector = _interopRequireDefault(require("./node-detector"));

var _appiumSupport = require("appium-support");

var _os = require("os");

require("colors");

let checks = [];

class NodeBinaryCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let nodePath = await _nodeDetector.default.detect();
    return nodePath ? (0, _utils.ok)(`The Node.js binary was found at: ${nodePath}`) : (0, _utils.nok)('The Node.js binary was NOT found!');
  }

  fix() {
    return `Manually setup ${'Node.js'.bold}.`;
  }

}

exports.NodeBinaryCheck = NodeBinaryCheck;
checks.push(new NodeBinaryCheck());
const REQUIRED_NODE_VERSION = '10.0.0';

class NodeVersionCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let nodePath = await _nodeDetector.default.detect();

    if (!nodePath) {
      return (0, _utils.nok)('Node is not installed, so no version to check!');
    }

    let {
      stdout
    } = await (0, _teen_process.exec)(nodePath, ['--version']);
    let versionString = stdout.replace('v', '').trim();

    try {
      return _appiumSupport.util.compareVersions(REQUIRED_NODE_VERSION, '<=', versionString) ? (0, _utils.ok)(`Node version is ${versionString}`) : (0, _utils.nok)(`Node version should be at least ${REQUIRED_NODE_VERSION}!`);
    } catch {
      return (0, _utils.nok)(`Unable to find node version (version = '${versionString}')`);
    }
  }

  fix() {
    return `Manually upgrade ${'Node.js'.bold}.`;
  }

}

exports.NodeVersionCheck = NodeVersionCheck;
checks.push(new NodeVersionCheck());

class OptionalOpencv4nodejsCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const packageName = 'opencv4nodejs';
    const packageInfo = await (0, _utils.getNpmPackageInfo)(packageName);

    if (packageInfo) {
      return (0, _utils.okOptional)(`${packageName} is installed at: ${packageInfo.path}. Installed version is: ${packageInfo.version}`);
    }

    return (0, _utils.nokOptional)(`${packageName} cannot be found.`);
  }

  async fix() {
    return `Why ${'opencv4nodejs'.bold} is needed and how to install it: https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/image-comparison.md`;
  }

}

exports.OptionalOpencv4nodejsCommandCheck = OptionalOpencv4nodejsCommandCheck;
checks.push(new OptionalOpencv4nodejsCommandCheck());

class OptionalFfmpegCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const ffmpegPath = await (0, _utils.resolveExecutablePath)('ffmpeg');
    return ffmpegPath ? (0, _utils.okOptional)(`ffmpeg is installed at: ${ffmpegPath}. ${(await (0, _teen_process.exec)('ffmpeg', ['-version'])).stdout.split(_os.EOL)[0]}`) : (0, _utils.nokOptional)('ffmpeg cannot be found');
  }

  async fix() {
    return `${'ffmpeg'.bold} is needed to record screen features. Please read https://www.ffmpeg.org/ to install it`;
  }

}

exports.OptionalFfmpegCommandCheck = OptionalFfmpegCommandCheck;
checks.push(new OptionalFfmpegCommandCheck());

class OptionalMjpegConsumerCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const packageName = 'mjpeg-consumer';
    const packageInfo = await (0, _utils.getNpmPackageInfo)(packageName);

    if (packageInfo) {
      return (0, _utils.okOptional)(`${packageName} is installed at: ${packageInfo.path}. Installed version is: ${packageInfo.version}`);
    }

    return (0, _utils.nokOptional)(`${packageName} cannot be found.`);
  }

  async fix() {
    return `${'mjpeg-consumer'.bold} module is required to use MJPEG-over-HTTP features. Please install it with 'npm i -g mjpeg-consumer'.`;
  }

}

exports.OptionalMjpegConsumerCommandCheck = OptionalMjpegConsumerCommandCheck;
checks.push(new OptionalMjpegConsumerCommandCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
