"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cropBase64Image = cropBase64Image;
exports.base64ToImage = base64ToImage;
exports.imageToBase64 = imageToBase64;
exports.cropImage = cropImage;
exports.getImagesMatches = getImagesMatches;
exports.getImagesSimilarity = getImagesSimilarity;
exports.getImageOccurrence = getImageOccurrence;
exports.getJimpImage = getJimpImage;
exports.MIME_BMP = exports.MIME_PNG = exports.MIME_JPEG = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _jimp = _interopRequireDefault(require("jimp"));

var _buffer = require("buffer");

var _pngjs = require("pngjs");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _util = require("./util");

var _logger = _interopRequireDefault(require("./logger"));

var _node = require("./node");

const {
  MIME_JPEG,
  MIME_PNG,
  MIME_BMP
} = _jimp.default;
exports.MIME_BMP = MIME_BMP;
exports.MIME_PNG = MIME_PNG;
exports.MIME_JPEG = MIME_JPEG;
let cv = null;
const BYTES_IN_PIXEL_BLOCK = 4;
const SCANLINE_FILTER_METHOD = 4;
const DEFAULT_MATCH_THRESHOLD = 0.5;
const AVAILABLE_DETECTORS = ['AKAZE', 'AGAST', 'BRISK', 'FAST', 'GFTT', 'KAZE', 'MSER', 'SIFT', 'ORB'];
const AVAILABLE_MATCHING_FUNCTIONS = ['FlannBased', 'BruteForce', 'BruteForceL1', 'BruteForceHamming', 'BruteForceHammingLut', 'BruteForceSL2'];

async function getJimpImage(data) {
  return await new _bluebird.default((resolve, reject) => {
    if (!_lodash.default.isString(data) && !_lodash.default.isBuffer(data)) {
      return reject(new Error('Must initialize jimp object with string or buffer'));
    }

    if (_lodash.default.isString(data)) {
      data = _buffer.Buffer.from(data, 'base64');
    }

    new _jimp.default(data, (err, imgObj) => {
      if (err) {
        return reject(err);
      }

      if (!imgObj) {
        return reject(new Error('Could not create jimp image from that data'));
      }

      imgObj._getBuffer = imgObj.getBuffer.bind(imgObj);
      imgObj.getBuffer = _bluebird.default.promisify(imgObj._getBuffer, {
        context: imgObj
      });
      resolve(imgObj);
    });
  });
}

async function initOpenCV() {
  if (cv) {
    return;
  }

  _logger.default.debug(`Initializing opencv`);

  try {
    cv = await (0, _node.requirePackage)('opencv4nodejs');
  } catch (err) {
    _logger.default.warn(`Unable to load 'opencv4nodejs': ${err.message}`);
  }

  if (!cv) {
    throw new Error(`'opencv4nodejs' module is required to use OpenCV features. ` + `Please install it first ('npm i -g opencv4nodejs') and restart Appium. ` + 'Read https://github.com/justadudewhohacks/opencv4nodejs#how-to-install for more details on this topic.');
  }
}

async function detectAndCompute(img, detector) {
  const keyPoints = await detector.detectAsync(img);
  const descriptor = await detector.computeAsync(img, keyPoints);
  return {
    keyPoints,
    descriptor
  };
}

function calculateMatchedRect(matchedPoints) {
  if (matchedPoints.length < 2) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }

  const pointsSortedByDistance = matchedPoints.map(point => [Math.sqrt(point.x * point.x + point.y * point.y), point]).sort((pair1, pair2) => pair1[0] >= pair2[0]).map(pair => pair[1]);

  const firstPoint = _lodash.default.head(pointsSortedByDistance);

  const lastPoint = _lodash.default.last(pointsSortedByDistance);

  const topLeftPoint = {
    x: firstPoint.x <= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y <= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  const bottomRightPoint = {
    x: firstPoint.x >= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y >= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  return {
    x: topLeftPoint.x,
    y: topLeftPoint.y,
    width: bottomRightPoint.x - topLeftPoint.x,
    height: bottomRightPoint.y - topLeftPoint.y
  };
}

function highlightRegion(mat, region) {
  if (region.width <= 0 || region.height <= 0) {
    return;
  }

  const color = new cv.Vec(0, 0, 255);
  const thickness = 2;
  mat.drawRectangle(new cv.Rect(region.x, region.y, region.width, region.height), color, thickness, cv.LINE_8);
  return mat;
}

async function getImagesMatches(img1Data, img2Data, options = {}) {
  await initOpenCV();
  const {
    detectorName = 'ORB',
    visualize = false,
    goodMatchesFactor,
    matchFunc = 'BruteForce'
  } = options;

  if (!_lodash.default.includes(AVAILABLE_DETECTORS, detectorName)) {
    throw new Error(`'${detectorName}' detector is unknown. ` + `Only ${JSON.stringify(AVAILABLE_DETECTORS)} detectors are supported.`);
  }

  if (!_lodash.default.includes(AVAILABLE_MATCHING_FUNCTIONS, matchFunc)) {
    throw new Error(`'${matchFunc}' matching function is unknown. ` + `Only ${JSON.stringify(AVAILABLE_MATCHING_FUNCTIONS)} matching functions are supported.`);
  }

  const detector = new cv[`${detectorName}Detector`]();
  const [img1, img2] = await _bluebird.default.all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]);
  const [result1, result2] = await _bluebird.default.all([detectAndCompute(img1, detector), detectAndCompute(img2, detector)]);
  let matches = [];

  try {
    matches = await cv[`match${matchFunc}Async`](result1.descriptor, result2.descriptor);
  } catch (e) {
    throw new Error(`Cannot find any matches between the given images. Try another detection algorithm. ` + ` Original error: ${e}`);
  }

  const totalCount = matches.length;

  if ((0, _util.hasValue)(goodMatchesFactor)) {
    if (_lodash.default.isFunction(goodMatchesFactor)) {
      const distances = matches.map(match => match.distance);

      const minDistance = _lodash.default.min(distances);

      const maxDistance = _lodash.default.max(distances);

      matches = matches.filter(match => goodMatchesFactor(match.distance, minDistance, maxDistance));
    } else {
      if (matches.length > goodMatchesFactor) {
        matches = matches.sort((match1, match2) => match1.distance - match2.distance).slice(0, goodMatchesFactor);
      }
    }
  }

  const extractPoint = (keyPoints, indexPropertyName) => match => {
    const {
      pt,
      point
    } = keyPoints[match[indexPropertyName]];
    return pt || point;
  };

  const points1 = matches.map(extractPoint(result1.keyPoints, 'queryIdx'));
  const rect1 = calculateMatchedRect(points1);
  const points2 = matches.map(extractPoint(result2.keyPoints, 'trainIdx'));
  const rect2 = calculateMatchedRect(points2);
  const result = {
    points1,
    rect1,
    points2,
    rect2,
    totalCount,
    count: matches.length
  };

  if (visualize) {
    const visualization = cv.drawMatches(img1, img2, result1.keyPoints, result2.keyPoints, matches);
    highlightRegion(visualization, rect1);
    highlightRegion(visualization, {
      x: img1.cols + rect2.x,
      y: rect2.y,
      width: rect2.width,
      height: rect2.height
    });
    result.visualization = await cv.imencodeAsync('.png', visualization);
  }

  return result;
}

async function getImagesSimilarity(img1Data, img2Data, options = {}) {
  await initOpenCV();
  const {
    visualize = false
  } = options;
  let [template, reference] = await _bluebird.default.all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]);

  if (template.rows !== reference.rows || template.cols !== reference.cols) {
    throw new Error('Both images are expected to have the same size in order to ' + 'calculate the similarity score.');
  }

  [template, reference] = await _bluebird.default.all([template.convertToAsync(cv.CV_8UC3), reference.convertToAsync(cv.CV_8UC3)]);
  const matched = await reference.matchTemplateAsync(template, cv.TM_CCOEFF_NORMED);
  const minMax = await matched.minMaxLocAsync();
  const result = {
    score: minMax.maxVal
  };

  if (visualize) {
    const resultMat = new cv.Mat(template.rows, template.cols * 2, cv.CV_8UC3);
    await _bluebird.default.all([reference.copyToAsync(resultMat.getRegion(new cv.Rect(0, 0, reference.cols, reference.rows))), template.copyToAsync(resultMat.getRegion(new cv.Rect(reference.cols, 0, template.cols, template.rows)))]);
    let mask = reference.absdiff(template);
    mask = await mask.cvtColorAsync(cv.COLOR_BGR2GRAY);
    let contours = [];

    try {
      mask = await mask.thresholdAsync(128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU);
      contours = await mask.findContoursAsync(cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);
    } catch (ign) {}

    for (const contour of contours) {
      const boundingRect = contour.boundingRect();
      highlightRegion(resultMat, boundingRect);
      highlightRegion(resultMat, {
        x: reference.cols + boundingRect.x,
        y: boundingRect.y,
        width: boundingRect.width,
        height: boundingRect.height
      });
    }

    result.visualization = await cv.imencodeAsync('.png', resultMat);
  }

  return result;
}

async function getImageOccurrence(fullImgData, partialImgData, options = {}) {
  await initOpenCV();
  const {
    visualize = false,
    threshold = DEFAULT_MATCH_THRESHOLD
  } = options;
  const [fullImg, partialImg] = await _bluebird.default.all([cv.imdecodeAsync(fullImgData), cv.imdecodeAsync(partialImgData)]);
  const result = {};

  try {
    const matched = await fullImg.matchTemplateAsync(partialImg, cv.TM_CCOEFF_NORMED);
    const minMax = await matched.minMaxLocAsync();
    result.score = minMax.maxVal;

    if (result.score < threshold) {
      throw new Error(`Cannot find any occurrences of the partial image in the full ` + `image above the threshold of ${threshold}. Highest match value ` + `found was ${minMax.maxVal}`);
    }

    result.rect = {
      x: minMax.maxLoc.x,
      y: minMax.maxLoc.y,
      width: partialImg.cols,
      height: partialImg.rows
    };
  } catch (e) {
    throw new Error(`Cannot find any occurrences of the partial image in the full image. ` + `Original error: ${e}`);
  }

  if (visualize) {
    highlightRegion(fullImg, result.rect);
    result.visualization = await cv.imencodeAsync('.png', fullImg);
  }

  return result;
}

async function cropBase64Image(base64Image, rect) {
  const image = await base64ToImage(base64Image);
  cropImage(image, rect);
  return await imageToBase64(image);
}

async function base64ToImage(base64Image) {
  const imageBuffer = _buffer.Buffer.from(base64Image, 'base64');

  return await new _bluebird.default((resolve, reject) => {
    const image = new _pngjs.PNG({
      filterType: SCANLINE_FILTER_METHOD
    });
    image.parse(imageBuffer, (err, image) => {
      if (err) {
        return reject(err);
      }

      resolve(image);
    });
  });
}

async function imageToBase64(image) {
  return await new _bluebird.default((resolve, reject) => {
    const chunks = [];
    image.pack().on('data', chunk => chunks.push(chunk)).on('end', () => {
      resolve(_buffer.Buffer.concat(chunks).toString('base64'));
    }).on('error', err => {
      reject(err);
    });
  });
}

function cropImage(image, rect) {
  const imageRect = {
    width: image.width,
    height: image.height
  };
  const interRect = getRectIntersection(rect, imageRect);

  if (interRect.width < rect.width || interRect.height < rect.height) {
    throw new Error(`Cannot crop ${JSON.stringify(rect)} from ${JSON.stringify(imageRect)} because the intersection between them was not the size of the rect`);
  }

  const firstVerticalPixel = interRect.top;
  const lastVerticalPixel = interRect.top + interRect.height;
  const firstHorizontalPixel = interRect.left;
  const lastHorizontalPixel = interRect.left + interRect.width;
  const croppedArray = [];

  for (let y = firstVerticalPixel; y < lastVerticalPixel; y++) {
    for (let x = firstHorizontalPixel; x < lastHorizontalPixel; x++) {
      const firstByteIdxInPixelBlock = imageRect.width * y + x << 2;

      for (let byteIdx = 0; byteIdx < BYTES_IN_PIXEL_BLOCK; byteIdx++) {
        croppedArray.push(image.data[firstByteIdxInPixelBlock + byteIdx]);
      }
    }
  }

  image.data = _buffer.Buffer.from(croppedArray);
  image.width = interRect.width;
  image.height = interRect.height;
  return image;
}

function getRectIntersection(rect, imageSize) {
  const left = rect.left >= imageSize.width ? imageSize.width : rect.left;
  const top = rect.top >= imageSize.height ? imageSize.height : rect.top;
  const width = imageSize.width >= left + rect.width ? rect.width : imageSize.width - left;
  const height = imageSize.height >= top + rect.height ? rect.height : imageSize.height - top;
  return {
    left,
    top,
    width,
    height
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbWFnZS11dGlsLmpzIl0sIm5hbWVzIjpbIk1JTUVfSlBFRyIsIk1JTUVfUE5HIiwiTUlNRV9CTVAiLCJKaW1wIiwiY3YiLCJCWVRFU19JTl9QSVhFTF9CTE9DSyIsIlNDQU5MSU5FX0ZJTFRFUl9NRVRIT0QiLCJERUZBVUxUX01BVENIX1RIUkVTSE9MRCIsIkFWQUlMQUJMRV9ERVRFQ1RPUlMiLCJBVkFJTEFCTEVfTUFUQ0hJTkdfRlVOQ1RJT05TIiwiZ2V0SmltcEltYWdlIiwiZGF0YSIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwiXyIsImlzU3RyaW5nIiwiaXNCdWZmZXIiLCJFcnJvciIsIkJ1ZmZlciIsImZyb20iLCJlcnIiLCJpbWdPYmoiLCJfZ2V0QnVmZmVyIiwiZ2V0QnVmZmVyIiwiYmluZCIsInByb21pc2lmeSIsImNvbnRleHQiLCJpbml0T3BlbkNWIiwibG9nIiwiZGVidWciLCJ3YXJuIiwibWVzc2FnZSIsImRldGVjdEFuZENvbXB1dGUiLCJpbWciLCJkZXRlY3RvciIsImtleVBvaW50cyIsImRldGVjdEFzeW5jIiwiZGVzY3JpcHRvciIsImNvbXB1dGVBc3luYyIsImNhbGN1bGF0ZU1hdGNoZWRSZWN0IiwibWF0Y2hlZFBvaW50cyIsImxlbmd0aCIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJwb2ludHNTb3J0ZWRCeURpc3RhbmNlIiwibWFwIiwicG9pbnQiLCJNYXRoIiwic3FydCIsInNvcnQiLCJwYWlyMSIsInBhaXIyIiwicGFpciIsImZpcnN0UG9pbnQiLCJoZWFkIiwibGFzdFBvaW50IiwibGFzdCIsInRvcExlZnRQb2ludCIsImJvdHRvbVJpZ2h0UG9pbnQiLCJoaWdobGlnaHRSZWdpb24iLCJtYXQiLCJyZWdpb24iLCJjb2xvciIsIlZlYyIsInRoaWNrbmVzcyIsImRyYXdSZWN0YW5nbGUiLCJSZWN0IiwiTElORV84IiwiZ2V0SW1hZ2VzTWF0Y2hlcyIsImltZzFEYXRhIiwiaW1nMkRhdGEiLCJvcHRpb25zIiwiZGV0ZWN0b3JOYW1lIiwidmlzdWFsaXplIiwiZ29vZE1hdGNoZXNGYWN0b3IiLCJtYXRjaEZ1bmMiLCJpbmNsdWRlcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbWcxIiwiaW1nMiIsImFsbCIsImltZGVjb2RlQXN5bmMiLCJyZXN1bHQxIiwicmVzdWx0MiIsIm1hdGNoZXMiLCJlIiwidG90YWxDb3VudCIsImlzRnVuY3Rpb24iLCJkaXN0YW5jZXMiLCJtYXRjaCIsImRpc3RhbmNlIiwibWluRGlzdGFuY2UiLCJtaW4iLCJtYXhEaXN0YW5jZSIsIm1heCIsImZpbHRlciIsIm1hdGNoMSIsIm1hdGNoMiIsInNsaWNlIiwiZXh0cmFjdFBvaW50IiwiaW5kZXhQcm9wZXJ0eU5hbWUiLCJwdCIsInBvaW50czEiLCJyZWN0MSIsInBvaW50czIiLCJyZWN0MiIsInJlc3VsdCIsImNvdW50IiwidmlzdWFsaXphdGlvbiIsImRyYXdNYXRjaGVzIiwiY29scyIsImltZW5jb2RlQXN5bmMiLCJnZXRJbWFnZXNTaW1pbGFyaXR5IiwidGVtcGxhdGUiLCJyZWZlcmVuY2UiLCJyb3dzIiwiY29udmVydFRvQXN5bmMiLCJDVl84VUMzIiwibWF0Y2hlZCIsIm1hdGNoVGVtcGxhdGVBc3luYyIsIlRNX0NDT0VGRl9OT1JNRUQiLCJtaW5NYXgiLCJtaW5NYXhMb2NBc3luYyIsInNjb3JlIiwibWF4VmFsIiwicmVzdWx0TWF0IiwiTWF0IiwiY29weVRvQXN5bmMiLCJnZXRSZWdpb24iLCJtYXNrIiwiYWJzZGlmZiIsImN2dENvbG9yQXN5bmMiLCJDT0xPUl9CR1IyR1JBWSIsImNvbnRvdXJzIiwidGhyZXNob2xkQXN5bmMiLCJUSFJFU0hfQklOQVJZIiwiVEhSRVNIX09UU1UiLCJmaW5kQ29udG91cnNBc3luYyIsIlJFVFJfRVhURVJOQUwiLCJDSEFJTl9BUFBST1hfU0lNUExFIiwiaWduIiwiY29udG91ciIsImJvdW5kaW5nUmVjdCIsImdldEltYWdlT2NjdXJyZW5jZSIsImZ1bGxJbWdEYXRhIiwicGFydGlhbEltZ0RhdGEiLCJ0aHJlc2hvbGQiLCJmdWxsSW1nIiwicGFydGlhbEltZyIsInJlY3QiLCJtYXhMb2MiLCJjcm9wQmFzZTY0SW1hZ2UiLCJiYXNlNjRJbWFnZSIsImltYWdlIiwiYmFzZTY0VG9JbWFnZSIsImNyb3BJbWFnZSIsImltYWdlVG9CYXNlNjQiLCJpbWFnZUJ1ZmZlciIsIlBORyIsImZpbHRlclR5cGUiLCJwYXJzZSIsImNodW5rcyIsInBhY2siLCJvbiIsImNodW5rIiwicHVzaCIsImNvbmNhdCIsInRvU3RyaW5nIiwiaW1hZ2VSZWN0IiwiaW50ZXJSZWN0IiwiZ2V0UmVjdEludGVyc2VjdGlvbiIsImZpcnN0VmVydGljYWxQaXhlbCIsInRvcCIsImxhc3RWZXJ0aWNhbFBpeGVsIiwiZmlyc3RIb3Jpem9udGFsUGl4ZWwiLCJsZWZ0IiwibGFzdEhvcml6b250YWxQaXhlbCIsImNyb3BwZWRBcnJheSIsImZpcnN0Qnl0ZUlkeEluUGl4ZWxCbG9jayIsImJ5dGVJZHgiLCJpbWFnZVNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNO0FBQUVBLEVBQUFBLFNBQUY7QUFBYUMsRUFBQUEsUUFBYjtBQUF1QkMsRUFBQUE7QUFBdkIsSUFBb0NDLGFBQTFDOzs7O0FBQ0EsSUFBSUMsRUFBRSxHQUFHLElBQVQ7QUF3QkEsTUFBTUMsb0JBQW9CLEdBQUcsQ0FBN0I7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRyxDQUEvQjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLEdBQWhDO0FBRUEsTUFBTUMsbUJBQW1CLEdBQUcsQ0FDMUIsT0FEMEIsRUFFMUIsT0FGMEIsRUFHMUIsT0FIMEIsRUFJMUIsTUFKMEIsRUFLMUIsTUFMMEIsRUFNMUIsTUFOMEIsRUFPMUIsTUFQMEIsRUFRMUIsTUFSMEIsRUFTMUIsS0FUMEIsQ0FBNUI7QUFZQSxNQUFNQyw0QkFBNEIsR0FBRyxDQUNuQyxZQURtQyxFQUVuQyxZQUZtQyxFQUdu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TCxJQUFhSyxTQUFTLENBQUMzSSxLQUF2QixHQUErQjJJLFNBQVMsQ0FBQzNJLEtBQXpDLEdBQWlENEcsSUFBSSxDQUFDMEIsSUFBbkU7QUFDQSxRQUFNSCxHQUFHLEdBQUd2QixJQUFJLENBQUN1QixHQUFMLElBQVlRLFNBQVMsQ0FBQzFJLE1BQXRCLEdBQStCMEksU0FBUyxDQUFDMUksTUFBekMsR0FBa0QyRyxJQUFJLENBQUN1QixHQUFuRTtBQUNBLFFBQU1uSSxLQUFLLEdBQUcySSxTQUFTLENBQUMzSSxLQUFWLElBQW9Cc0ksSUFBSSxHQUFHMUIsSUFBSSxDQUFDNUcsS0FBaEMsR0FBeUM0RyxJQUFJLENBQUM1RyxLQUE5QyxHQUF1RDJJLFNBQVMsQ0FBQzNJLEtBQVYsR0FBa0JzSSxJQUF2RjtBQUNBLFFBQU1ySSxNQUFNLEdBQUcwSSxTQUFTLENBQUMxSSxNQUFWLElBQXFCa0ksR0FBRyxHQUFHdkIsSUFBSSxDQUFDM0csTUFBaEMsR0FBMEMyRyxJQUFJLENBQUMzRyxNQUEvQyxHQUF5RDBJLFNBQVMsQ0FBQzFJLE1BQVYsR0FBbUJrSSxHQUEzRjtBQUNBLFNBQU87QUFBQ0csSUFBQUEsSUFBRDtBQUFPSCxJQUFBQSxHQUFQO0FBQVluSSxJQUFBQSxLQUFaO0FBQW1CQyxJQUFBQTtBQUFuQixHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEppbXAgZnJvbSAnamltcCc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInO1xuaW1wb3J0IHsgUE5HIH0gZnJvbSAncG5nanMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgaGFzVmFsdWUgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyByZXF1aXJlUGFja2FnZSB9IGZyb20gJy4vbm9kZSc7XG5cblxuY29uc3QgeyBNSU1FX0pQRUcsIE1JTUVfUE5HLCBNSU1FX0JNUCB9ID0gSmltcDtcbmxldCBjdiA9IG51bGw7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVnaW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVmdCAtIFRoZSBvZmZzZXQgZnJvbSB0aGUgbGVmdCBzaWRlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdG9wIC0gVGhlIG9mZnNldCBmcm9tIHRoZSB0b3BcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHRcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gKiBAcHJvcGVydHkge251bWJlcn0geCAtIFRoZSB4IGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVjdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHggLSBUaGUgdG9wIGxlZnQgY29vcmRpbmF0ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHkgLSBUaGUgYm90dG9tIHJpZ2h0IGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHRcbiAqL1xuXG5jb25zdCBCWVRFU19JTl9QSVhFTF9CTE9DSyA9IDQ7XG5jb25zdCBTQ0FOTElORV9GSUxURVJfTUVUSE9EID0gNDtcbmNvbnN0IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xEID0gMC41O1xuXG5jb25zdCBBVkFJTEFCTEVfREVURUNUT1JTID0gW1xuICAnQUtBWkUnLFxuICAnQUdBU1QnLFxuICAnQlJJU0snLFxuICAnRkFTVCcsXG4gICdHRlRUJyxcbiAgJ0tBWkUnLFxuICAnTVNFUicsXG4gICdTSUZUJyxcbiAgJ09SQicsXG5dO1xuXG5jb25zdCBBVkFJTEFCTEVfTUFUQ0hJTkdfRlVOQ1RJT05TID0gW1xuICAnRmxhbm5CYXNlZCcsXG4gICdCcnV0ZUZvcmNlJyxcbiAgJ0JydXRlRm9yY2VMMScsXG4gICdCcnV0ZUZvcmNlSGFtbWluZycsXG4gICdCcnV0ZUZvcmNlSGFtbWluZ0x1dCcsXG4gICdCcnV0ZUZvcmNlU0wyJyxcbl07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBnZXQgYSBKaW1wIGltYWdlIG9iamVjdCBmcm9tIGJ1ZmZlciBvciBiYXNlNjQgZGF0YS4gSmltcFxuICogaXMgYSBncmVhdCBsaWJyYXJ5IGhvd2V2ZXIgaXQgZG9lcyBJTyBpbiB0aGUgY29uc3RydWN0b3Igc28gaXQncyBub3RcbiAqIGNvbnZlbmllbnQgZm9yIG91ciBhc3luYy9hd2FpdCBtb2RlbC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcnxzdHJpbmd9IGRhdGEgLSBiaW5hcnkgaW1hZ2UgYnVmZmVyIG9yIGJhc2U2NC1lbmNvZGVkIGltYWdlXG4gKiBzdHJpbmdcbiAqIEByZXR1cm5zIHtKaW1wfSAtIHRoZSBqaW1wIGltYWdlIG9iamVjdFxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRKaW1wSW1hZ2UgKGRhdGEpIHtcbiAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoIV8uaXNTdHJpbmcoZGF0YSkgJiYgIV8uaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdNdXN0IGluaXRpYWxpemUgamltcCBvYmplY3Qgd2l0aCBzdHJpbmcgb3IgYnVmZmVyJykpO1xuICAgIH1cbiAgICAvLyBpZiBkYXRhIGlzIGEgc3RyaW5nLCBhc3N1bWUgaXQgaXMgYSBiYXNlNjQtZW5jb2RlZCBpbWFnZVxuICAgIGlmIChfLmlzU3RyaW5nKGRhdGEpKSB7XG4gICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBuZXcgSmltcChkYXRhLCAoZXJyLCBpbWdPYmopID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpbWdPYmopIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgamltcCBpbWFnZSBmcm9tIHRoYXQgZGF0YScpKTtcbiAgICAgIH1cbiAgICAgIGltZ09iai5fZ2V0QnVmZmVyID0gaW1nT2JqLmdldEJ1ZmZlci5iaW5kKGltZ09iaik7XG4gICAgICBpbWdPYmouZ2V0QnVmZmVyID0gQi5wcm9taXNpZnkoaW1nT2JqLl9nZXRCdWZmZXIsIHtjb250ZXh0OiBpbWdPYmp9KTtcbiAgICAgIHJlc29sdmUoaW1nT2JqKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHRocm93cyB7RXJyb3J9IElmIG9wZW5jdjRub2RlanMgbW9kdWxlIGlzIG5vdCBpbnN0YWxsZWQgb3IgY2Fubm90IGJlIGxvYWRlZFxuICovXG5hc3luYyBmdW5jdGlvbiBpbml0T3BlbkNWICgpIHtcbiAgaWYgKGN2KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBJbml0aWFsaXppbmcgb3BlbmN2YCk7XG4gIHRyeSB7XG4gICAgY3YgPSBhd2FpdCByZXF1aXJlUGFja2FnZSgnb3BlbmN2NG5vZGVqcycpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybihgVW5hYmxlIHRvIGxvYWQgJ29wZW5jdjRub2RlanMnOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG5cbiAgaWYgKCFjdikge1xuICAgIHRocm93IG5ldyBFcnJvcihgJ29wZW5jdjRub2RlanMnIG1vZHVsZSBpcyByZXF1aXJlZCB0byB1c2UgT3BlbkNWIGZlYXR1cmVzLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFBsZWFzZSBpbnN0YWxsIGl0IGZpcnN0ICgnbnBtIGkgLWcgb3BlbmN2NG5vZGVqcycpIGFuZCByZXN0YXJ0IEFwcGl1bS4gYCArXG4gICAgICAgICAgICAgICAgICAgICdSZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9qdXN0YWR1ZGV3aG9oYWNrcy9vcGVuY3Y0bm9kZWpzI2hvdy10by1pbnN0YWxsIGZvciBtb3JlIGRldGFpbHMgb24gdGhpcyB0b3BpYy4nKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1hdGNoQ29tcHV0YXRpb25SZXN1bHRcbiAqIEBwcm9wZXJ0eSB7Y3YuRGVzY3JpcHRvck1hdGNofSBkZXNjaXB0b3IgLSBPcGVuQ1YgbWF0Y2ggZGVzY3JpcHRvclxuICogQHByb3BlcnR5IHtBcnJheTxjdi5LZXlQb2ludD59IGtleVBvaW50cyAtIFRoZSBhcnJheSBvZiBrZXkgcG9pbnRzXG4gKi9cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGFuIE9wZW5DViBtYXRjaCBkZXNjcmlwdG9yIG9mIGFuIGltYWdlLCB3aGljaCBjYW4gYmUgdXNlZFxuICogZm9yIGJydXRlLWZvcmNlIG1hdGNoaW5nLlxuICogUmVhZCBodHRwczovL2RvY3Mub3BlbmN2Lm9yZy8zLjAtYmV0YS9kb2MvcHlfdHV0b3JpYWxzL3B5X2ZlYXR1cmUyZC9weV9tYXRjaGVyL3B5X21hdGNoZXIuaHRtbFxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAcGFyYW0ge2N2Lk1hdH0gaW1nIEltYWdlIGRhdGFcbiAqIEBwYXJhbSB7Y3YuRmVhdHVyZURldGVjdG9yfSBkZXRlY3RvciBPcGVuQ1YgZmVhdHVyZSBkZXRlY3RvciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtNYXRjaENvbXB1dGF0aW9uUmVzdWx0fVxuICovXG5hc3luYyBmdW5jdGlvbiBkZXRlY3RBbmRDb21wdXRlIChpbWcsIGRldGVjdG9yKSB7XG4gIGNvbnN0IGtleVBvaW50cyA9IGF3YWl0IGRldGVjdG9yLmRldGVjdEFzeW5jKGltZyk7XG4gIGNvbnN0IGRlc2NyaXB0b3IgPSBhd2FpdCBkZXRlY3Rvci5jb21wdXRlQXN5bmMoaW1nLCBrZXlQb2ludHMpO1xuICByZXR1cm4ge1xuICAgIGtleVBvaW50cyxcbiAgICBkZXNjcmlwdG9yXG4gIH07XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlZCB0aGUgYm91bmRpbmcgcmVjdCBjb29yZGluYXRlcyBmb3IgdGhlIGFycmF5IG9mIG1hdGNoaW5nIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7QXJyYXk8UG9pbnQ+fSBtYXRjaGVkUG9pbnRzIEFycmF5IG9mIG1hdGNoaW5nIHBvaW50c1xuICogQHJldHVybnMge1JlY3R9IFRoZSBtYXRjaGluZyBib3VuZGluZyByZWN0IG9yIGEgemVybyByZWN0IGlmIG5vIG1hdGNoXG4gKiBjYW4gYmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZU1hdGNoZWRSZWN0IChtYXRjaGVkUG9pbnRzKSB7XG4gIGlmIChtYXRjaGVkUG9pbnRzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gIH1cblxuICBjb25zdCBwb2ludHNTb3J0ZWRCeURpc3RhbmNlID0gbWF0Y2hlZFBvaW50c1xuICAgIC5tYXAocG9pbnQgPT4gW01hdGguc3FydChwb2ludC54ICogcG9pbnQueCArIHBvaW50LnkgKiBwb2ludC55KSwgcG9pbnRdKVxuICAgIC5zb3J0KChwYWlyMSwgcGFpcjIpID0+IHBhaXIxWzBdID49IHBhaXIyWzBdKVxuICAgIC5tYXAocGFpciA9PiBwYWlyWzFdKTtcbiAgY29uc3QgZmlyc3RQb2ludCA9IF8uaGVhZChwb2ludHNTb3J0ZWRCeURpc3RhbmNlKTtcbiAgY29uc3QgbGFzdFBvaW50ID0gXy5sYXN0KHBvaW50c1NvcnRlZEJ5RGlzdGFuY2UpO1xuICBjb25zdCB0b3BMZWZ0UG9pbnQgPSB7XG4gICAgeDogZmlyc3RQb2ludC54IDw9IGxhc3RQb2ludC54ID8gZmlyc3RQb2ludC54IDogbGFzdFBvaW50LngsXG4gICAgeTogZmlyc3RQb2ludC55IDw9IGxhc3RQb2ludC55ID8gZmlyc3RQb2ludC55IDogbGFzdFBvaW50LnksXG4gIH07XG4gIGNvbnN0IGJvdHRvbVJpZ2h0UG9pbnQgPSB7XG4gICAgeDogZmlyc3RQb2ludC54ID49IGxhc3RQb2ludC54ID8gZmlyc3RQb2ludC54IDogbGFzdFBvaW50LngsXG4gICAgeTogZmlyc3RQb2ludC55ID49IGxhc3RQb2ludC55ID8gZmlyc3RQb2ludC55IDogbGFzdFBvaW50LnksXG4gIH07XG4gIHJldHVybiB7XG4gICAgeDogdG9wTGVmdFBvaW50LngsXG4gICAgeTogdG9wTGVmdFBvaW50LnksXG4gICAgd2lkdGg6IGJvdHRvbVJpZ2h0UG9pbnQueCAtIHRvcExlZnRQb2ludC54LFxuICAgIGhlaWdodDogYm90dG9tUmlnaHRQb2ludC55IC0gdG9wTGVmdFBvaW50LnlcbiAgfTtcbn1cblxuLyoqXG4gKiBEcmF3cyBhIHJlY3Rhbm5nbGUgb24gdGhlIGdpdmVuIGltYWdlIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7Y3YuTWF0fSBtYXQgVGhlIHNvdXJjZSBpbWFnZVxuICogQHBhcmFtIHtSZWN0fSByZWdpb24gVGhlIHJlZ2lvbiB0byBoaWdobGlnaHRcbiAqXG4gKiBAcmV0dXJucyB7Y3YuTWF0fSBUaGUgc2FtZSBpbWFnZSB3aXRoIHRoZSByZWN0YW5nZSBvbiBpdFxuICovXG5mdW5jdGlvbiBoaWdobGlnaHRSZWdpb24gKG1hdCwgcmVnaW9uKSB7XG4gIGlmIChyZWdpb24ud2lkdGggPD0gMCB8fCByZWdpb24uaGVpZ2h0IDw9IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBoaWdobGlnaHQgaW4gcmVkXG4gIGNvbnN0IGNvbG9yID0gbmV3IGN2LlZlYygwLCAwLCAyNTUpO1xuICBjb25zdCB0aGlja25lc3MgPSAyO1xuICBtYXQuZHJhd1JlY3RhbmdsZShuZXcgY3YuUmVjdChyZWdpb24ueCwgcmVnaW9uLnksIHJlZ2lvbi53aWR0aCwgcmVnaW9uLmhlaWdodCksIGNvbG9yLCB0aGlja25lc3MsIGN2LkxJTkVfOCk7XG4gIHJldHVybiBtYXQ7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTWF0Y2hpbmdPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRldGVjdG9yTmFtZSBbJ09SQiddIE9uZSBvZiBwb3NzaWJsZSBPcGVuQ1YgZmVhdHVyZSBkZXRlY3RvciBuYW1lc1xuICogZnJvbSBgQVZBSUxBQkxFX0RFVEVDVE9SU2AgYXJyYXkuXG4gKiBTb21lIG9mIHRoZXNlIG1ldGhvZHMgKEZBU1QsIEFHQVNULCBHRlRULCBGQVNULCBTSUZUIGFuZCBNU0VSKSBhcmUgbm90IGF2YWlsYWJsZVxuICogaW4gdGhlIGRlZmF1bHQgT3BlbkNWIGluc3RhbGxhdGlvbiBhbmQgaGF2ZSB0byBiZSBlbmFibGVkIG1hbnVhbGx5IGJlZm9yZVxuICogbGlicmFyeSBjb21waWxhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gbWF0Y2hGdW5jIFsnQnJ1dGVGb3JjZSddIFRoZSBuYW1lIG9mIHRoZSBtYXRjaGluZyBmdW5jdGlvbi5cbiAqIFNob3VsZCBiZSBvbmUgb2YgYEFWQUlMQUJMRV9NQVRDSElOR19GVU5DVElPTlNgIGFycmF5LlxuICogQHByb3BlcnR5IHs/bnVtYmVyfEZ1bmN0aW9ufSBnb29kTWF0Y2hlc0ZhY3RvciBUaGUgbWF4aW11bSBjb3VudCBvZiBcImdvb2RcIiBtYXRjaGVzXG4gKiAoZS4gZy4gd2l0aCBtaW5pbWFsIGRpc3RhbmNlcykgb3IgYSBmdW5jdGlvbiwgd2hpY2ggYWNjZXB0cyAzIGFyZ3VtZW50czogdGhlIGN1cnJlbnQgZGlzdGFuY2UsXG4gKiBtaW5pbWFsIGRpc3RhbmNlLCBtYXhpbXVtIGRpc3RhbmNlIGFuZCByZXR1cm5zIHRydWUgb3IgZmFsc2UgdG8gaW5jbHVkZSBvciBleGNsdWRlIHRoZSBtYXRjaC5cbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHZpc3VhbGl6ZSBbZmFsc2VdIFdoZXRoZXIgdG8gcmV0dXJuIHRoZSByZXN1bHRpbmcgdmlzYWxpemF0aW9uXG4gKiBhcyBhbiBpbWFnZSAodXNlZnVsIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMpXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNYXRjaGluZ1Jlc3VsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvdW50IFRoZSBjb3VudCBvZiBtYXRjaGVkIGVkZ2VzIG9uIGJvdGggaW1hZ2VzLlxuICogVGhlIG1vcmUgbWF0Y2hpbmcgZWRnZXMgdGhlcmUgYXJlIG5vIGJvdGggaW1hZ2VzIHRoZSBtb3JlIHNpbWlsYXIgdGhleSBhcmUuXG4gKiBAcHJvcGVydHkge251bWJlcn0gdG90YWxDb3VudCBUaGUgdG90YWwgY291bnQgb2YgbWF0Y2hlZCBlZGdlcyBvbiBib3RoIGltYWdlcy5cbiAqIEl0IGlzIGVxdWFsIHRvIGBjb3VudGAgaWYgYGdvb2RNYXRjaGVzRmFjdG9yYCBkb2VzIG5vdCBsaW1pdCB0aGUgbWF0Y2hlcyxcbiAqIG90aGVyd2lzZSBpdCBjb250YWlucyB0aGUgdG90YWwgY291bnQgb2YgbWF0Y2hlcyBiZWZvcmUgYGdvb2RNYXRjaGVzRmFjdG9yYCBpc1xuICogYXBwbGllZC5cbiAqIEBwcm9wZXJ0eSB7P0J1ZmZlcn0gdmlzdWFsaXphdGlvbiBUaGUgdmlzdWFsaXphdGlvbiBvZiB0aGUgbWF0Y2hpbmcgcmVzdWx0XG4gKiByZXByZXNlbnRlZCBhcyBQTkcgaW1hZ2UgYnVmZmVyLiBUaGlzIHZpc3VhbGl6YXRpb24gbG9va3MgbGlrZVxuICogaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMzExMjU1MjEvMjk3MDI3MzEtYzc5ZTMxNDItODk3Mi0xMWU3LTk0N2UtZGIxMDlkNDE1NDY5LmpwZ1xuICogQHByb3BlcnR5IHtBcnJheTxQb2ludD59IHBvaW50czEgVGhlIGFycmF5IG9mIG1hdGNoaW5nIHBvaW50cyBvbiB0aGUgZmlyc3QgaW1hZ2VcbiAqIEBwcm9wZXJ0eSB7UmVjdH0gcmVjdDEgVGhlIGJvdW5kaW5nIHJlY3QgZm9yIHRoZSBgbWF0Y2hlZFBvaW50czFgIHNldCBvciBhIHplcm8gcmVjdFxuICogaWYgbm90IGVub3VnaCBtYXRjaGluZyBwb2ludHMgYXJlIGZvdW5kXG4gKiBAcHJvcGVydHkge0FycmF5PFBvaW50Pn0gcG9pbnRzMiBUaGUgYXJyYXkgb2YgbWF0Y2hpbmcgcG9pbnRzIG9uIHRoZSBzZWNvbmQgaW1hZ2VcbiAqIEBwcm9wZXJ0eSB7UmVjdH0gcmVjdDIgVGhlIGJvdW5kaW5nIHJlY3QgZm9yIHRoZSBgbWF0Y2hlZFBvaW50czJgIHNldCBvciBhIHplcm8gcmVjdFxuICogaWYgbm90IGVub3VnaCBtYXRjaGluZyBwb2ludHMgYXJlIGZvdW5kXG4gKi9cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb3VudCBvZiBjb21tb24gZWRnZXMgYmV0d2VlbiB0d28gaW1hZ2VzLlxuICogVGhlIGltYWdlcyBtaWdodCBiZSByb3RhdGVkIG9yIHJlc2l6ZWQgcmVsYXRpdmVseSB0byBlYWNoIG90aGVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBpbWcxRGF0YSBUaGUgZGF0YSBvZiB0aGUgZmlyc3QgaW1hZ2UgcGFja2VkIGludG8gYSBOb2RlSlMgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW1nMkRhdGEgVGhlIGRhdGEgb2YgdGhlIHNlY29uZCBpbWFnZSBwYWNrZWQgaW50byBhIE5vZGVKUyBidWZmZXJcbiAqIEBwYXJhbSB7P01hdGNoaW5nT3B0aW9uc30gb3B0aW9ucyBbe31dIFNldCBvZiBtYXRjaGluZyBvcHRpb25zXG4gKlxuICogQHJldHVybnMge01hdGNoaW5nUmVzdWx0fSBNYWNoaW5nIHJlc3VsdFxuICogQHRocm93cyB7RXJyb3J9IElmIGBkZXRlY3Rvck5hbWVgIHZhbHVlIGlzIHVua25vd24uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEltYWdlc01hdGNoZXMgKGltZzFEYXRhLCBpbWcyRGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gIGF3YWl0IGluaXRPcGVuQ1YoKTtcblxuICBjb25zdCB7ZGV0ZWN0b3JOYW1lID0gJ09SQicsIHZpc3VhbGl6ZSA9IGZhbHNlLFxuICAgICAgICAgZ29vZE1hdGNoZXNGYWN0b3IsIG1hdGNoRnVuYyA9ICdCcnV0ZUZvcmNlJ30gPSBvcHRpb25zO1xuICBpZiAoIV8uaW5jbHVkZXMoQVZBSUxBQkxFX0RFVEVDVE9SUywgZGV0ZWN0b3JOYW1lKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJyR7ZGV0ZWN0b3JOYW1lfScgZGV0ZWN0b3IgaXMgdW5rbm93bi4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBPbmx5ICR7SlNPTi5zdHJpbmdpZnkoQVZBSUxBQkxFX0RFVEVDVE9SUyl9IGRldGVjdG9ycyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIGlmICghXy5pbmNsdWRlcyhBVkFJTEFCTEVfTUFUQ0hJTkdfRlVOQ1RJT05TLCBtYXRjaEZ1bmMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAnJHttYXRjaEZ1bmN9JyBtYXRjaGluZyBmdW5jdGlvbiBpcyB1bmtub3duLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYE9ubHkgJHtKU09OLnN0cmluZ2lmeShBVkFJTEFCTEVfTUFUQ0hJTkdfRlVOQ1RJT05TKX0gbWF0Y2hpbmcgZnVuY3Rpb25zIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cblxuICBjb25zdCBkZXRlY3RvciA9IG5ldyBjdltgJHtkZXRlY3Rvck5hbWV9RGV0ZWN0b3JgXSgpO1xuICBjb25zdCBbaW1nMSwgaW1nMl0gPSBhd2FpdCBCLmFsbChbXG4gICAgY3YuaW1kZWNvZGVBc3luYyhpbWcxRGF0YSksXG4gICAgY3YuaW1kZWNvZGVBc3luYyhpbWcyRGF0YSlcbiAgXSk7XG4gIGNvbnN0IFtyZXN1bHQxLCByZXN1bHQyXSA9IGF3YWl0IEIuYWxsKFtcbiAgICBkZXRlY3RBbmRDb21wdXRlKGltZzEsIGRldGVjdG9yKSxcbiAgICBkZXRlY3RBbmRDb21wdXRlKGltZzIsIGRldGVjdG9yKVxuICBdKTtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcbiAgdHJ5IHtcbiAgICBtYXRjaGVzID0gYXdhaXQgY3ZbYG1hdGNoJHttYXRjaEZ1bmN9QXN5bmNgXShyZXN1bHQxLmRlc2NyaXB0b3IsIHJlc3VsdDIuZGVzY3JpcHRvcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGFueSBtYXRjaGVzIGJldHdlZW4gdGhlIGdpdmVuIGltYWdlcy4gVHJ5IGFub3RoZXIgZGV0ZWN0aW9uIGFsZ29yaXRobS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGAgT3JpZ2luYWwgZXJyb3I6ICR7ZX1gKTtcbiAgfVxuICBjb25zdCB0b3RhbENvdW50ID0gbWF0Y2hlcy5sZW5ndGg7XG4gIGlmIChoYXNWYWx1ZShnb29kTWF0Y2hlc0ZhY3RvcikpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGdvb2RNYXRjaGVzRmFjdG9yKSkge1xuICAgICAgY29uc3QgZGlzdGFuY2VzID0gbWF0Y2hlcy5tYXAobWF0Y2ggPT4gbWF0Y2guZGlzdGFuY2UpO1xuICAgICAgY29uc3QgbWluRGlzdGFuY2UgPSBfLm1pbihkaXN0YW5jZXMpO1xuICAgICAgY29uc3QgbWF4RGlzdGFuY2UgPSBfLm1heChkaXN0YW5jZXMpO1xuICAgICAgbWF0Y2hlcyA9IG1hdGNoZXNcbiAgICAgICAgLmZpbHRlcihtYXRjaCA9PiBnb29kTWF0Y2hlc0ZhY3RvcihtYXRjaC5kaXN0YW5jZSwgbWluRGlzdGFuY2UsIG1heERpc3RhbmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IGdvb2RNYXRjaGVzRmFjdG9yKSB7XG4gICAgICAgIG1hdGNoZXMgPSBtYXRjaGVzXG4gICAgICAgICAgLnNvcnQoKG1hdGNoMSwgbWF0Y2gyKSA9PiBtYXRjaDEuZGlzdGFuY2UgLSBtYXRjaDIuZGlzdGFuY2UpXG4gICAgICAgICAgLnNsaWNlKDAsIGdvb2RNYXRjaGVzRmFjdG9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBleHRyYWN0UG9pbnQgPSAoa2V5UG9pbnRzLCBpbmRleFByb3BlcnR5TmFtZSkgPT4gKG1hdGNoKSA9PiB7XG4gICAgY29uc3Qge3B0LCBwb2ludH0gPSBrZXlQb2ludHNbbWF0Y2hbaW5kZXhQcm9wZXJ0eU5hbWVdXTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanVzdGFkdWRld2hvaGFja3Mvb3BlbmN2NG5vZGVqcy9pc3N1ZXMvNTg0XG4gICAgcmV0dXJuIChwdCB8fCBwb2ludCk7XG4gIH07XG4gIGNvbnN0IHBvaW50czEgPSBtYXRjaGVzLm1hcChleHRyYWN0UG9pbnQocmVzdWx0MS5rZXlQb2ludHMsICdxdWVyeUlkeCcpKTtcbiAgY29uc3QgcmVjdDEgPSBjYWxjdWxhdGVNYXRjaGVkUmVjdChwb2ludHMxKTtcbiAgY29uc3QgcG9pbnRzMiA9IG1hdGNoZXMubWFwKGV4dHJhY3RQb2ludChyZXN1bHQyLmtleVBvaW50cywgJ3RyYWluSWR4JykpO1xuICBjb25zdCByZWN0MiA9IGNhbGN1bGF0ZU1hdGNoZWRSZWN0KHBvaW50czIpO1xuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBwb2ludHMxLFxuICAgIHJlY3QxLFxuICAgIHBvaW50czIsXG4gICAgcmVjdDIsXG4gICAgdG90YWxDb3VudCxcbiAgICBjb3VudDogbWF0Y2hlcy5sZW5ndGgsXG4gIH07XG4gIGlmICh2aXN1YWxpemUpIHtcbiAgICBjb25zdCB2aXN1YWxpemF0aW9uID0gY3YuZHJhd01hdGNoZXMoaW1nMSwgaW1nMiwgcmVzdWx0MS5rZXlQb2ludHMsIHJlc3VsdDIua2V5UG9pbnRzLCBtYXRjaGVzKTtcbiAgICBoaWdobGlnaHRSZWdpb24odmlzdWFsaXphdGlvbiwgcmVjdDEpO1xuICAgIGhpZ2hsaWdodFJlZ2lvbih2aXN1YWxpemF0aW9uLCB7XG4gICAgICB4OiBpbWcxLmNvbHMgKyByZWN0Mi54LFxuICAgICAgeTogcmVjdDIueSxcbiAgICAgIHdpZHRoOiByZWN0Mi53aWR0aCxcbiAgICAgIGhlaWdodDogcmVjdDIuaGVpZ2h0XG4gICAgfSk7XG4gICAgcmVzdWx0LnZpc3VhbGl6YXRpb24gPSBhd2FpdCBjdi5pbWVuY29kZUFzeW5jKCcucG5nJywgdmlzdWFsaXphdGlvbik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaW1pbGFyaXR5T3B0aW9uc1xuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gdmlzdWFsaXplIFtmYWxzZV0gV2hldGhlciB0byByZXR1cm4gdGhlIHJlc3VsdGluZyB2aXNhbGl6YXRpb25cbiAqIGFzIGFuIGltYWdlICh1c2VmdWwgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcylcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNpbWlsYXJpdHlSZXN1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzY29yZSBUaGUgc2ltaWxhcml0eSBzY29yZSBhcyBhIGZsb2F0IG51bWJlciBpbiByYW5nZSBbMC4wLCAxLjBdLlxuICogMS4wIGlzIHRoZSBoaWdoZXN0IHNjb3JlIChtZWFucyBib3RoIGltYWdlcyBhcmUgdG90YWxseSBlcXVhbCkuXG4gKiBAcHJvcGVydHkgez9CdWZmZXJ9IHZpc3VhbGl6YXRpb24gVGhlIHZpc3VhbGl6YXRpb24gb2YgdGhlIG1hdGNoaW5nIHJlc3VsdFxuICogcmVwcmVzZW50ZWQgYXMgUE5HIGltYWdlIGJ1ZmZlci4gVGhpcyBpbWFnZSBpbmNsdWRlcyBib3RoIGlucHV0IHBpY3R1cmVzIHdoZXJlXG4gKiBkaWZmZXJlbmNlIHJlZ2lvbnMgYXJlIGhpZ2hsaWdodGVkIHdpdGggcmVjdGFuZ2xlcy5cbiAqL1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNpbWlsYXJpdHkgc2NvcmUgYmV0d2VlbiB0d28gaW1hZ2VzLlxuICogSXQgaXMgZXhwZWN0ZWQsIHRoYXQgYm90aCBpbWFnZXMgaGF2ZSB0aGUgc2FtZSByZXNvbHV0aW9uLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBpbWcxRGF0YSBUaGUgZGF0YSBvZiB0aGUgZmlyc3QgaW1hZ2UgcGFja2VkIGludG8gYSBOb2RlSlMgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW1nMkRhdGEgVGhlIGRhdGEgb2YgdGhlIHNlY29uZCBpbWFnZSBwYWNrZWQgaW50byBhIE5vZGVKUyBidWZmZXJcbiAqIEBwYXJhbSB7P1NpbWlsYXJpdHlPcHRpb25zfSBvcHRpb25zIFt7fV0gU2V0IG9mIHNpbWlsYXJpdHkgY2FsY3VsYXRpb24gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtTaW1pbGFyaXR5UmVzdWx0fSBUaGUgY2FsY3VsYXRpb24gcmVzdWx0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGdpdmVuIGltYWdlcyBoYXZlIGRpZmZlcmVudCByZXNvbHV0aW9uLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRJbWFnZXNTaW1pbGFyaXR5IChpbWcxRGF0YSwgaW1nMkRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICBhd2FpdCBpbml0T3BlbkNWKCk7XG5cbiAgY29uc3Qge3Zpc3VhbGl6ZSA9IGZhbHNlfSA9IG9wdGlvbnM7XG4gIGxldCBbdGVtcGxhdGUsIHJlZmVyZW5jZV0gPSBhd2FpdCBCLmFsbChbXG4gICAgY3YuaW1kZWNvZGVBc3luYyhpbWcxRGF0YSksXG4gICAgY3YuaW1kZWNvZGVBc3luYyhpbWcyRGF0YSlcbiAgXSk7XG4gIGlmICh0ZW1wbGF0ZS5yb3dzICE9PSByZWZlcmVuY2Uucm93cyB8fCB0ZW1wbGF0ZS5jb2xzICE9PSByZWZlcmVuY2UuY29scykge1xuICAgIHRocm93IG5ldyBFcnJvcignQm90aCBpbWFnZXMgYXJlIGV4cGVjdGVkIHRvIGhhdmUgdGhlIHNhbWUgc2l6ZSBpbiBvcmRlciB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2NhbGN1bGF0ZSB0aGUgc2ltaWxhcml0eSBzY29yZS4nKTtcbiAgfVxuICBbdGVtcGxhdGUsIHJlZmVyZW5jZV0gPSBhd2FpdCBCLmFsbChbXG4gICAgdGVtcGxhdGUuY29udmVydFRvQXN5bmMoY3YuQ1ZfOFVDMyksXG4gICAgcmVmZXJlbmNlLmNvbnZlcnRUb0FzeW5jKGN2LkNWXzhVQzMpXG4gIF0pO1xuXG4gIGNvbnN0IG1hdGNoZWQgPSBhd2FpdCByZWZlcmVuY2UubWF0Y2hUZW1wbGF0ZUFzeW5jKHRlbXBsYXRlLCBjdi5UTV9DQ09FRkZfTk9STUVEKTtcbiAgY29uc3QgbWluTWF4ID0gYXdhaXQgbWF0Y2hlZC5taW5NYXhMb2NBc3luYygpO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc2NvcmU6IG1pbk1heC5tYXhWYWxcbiAgfTtcbiAgaWYgKHZpc3VhbGl6ZSkge1xuICAgIGNvbnN0IHJlc3VsdE1hdCA9IG5ldyBjdi5NYXQodGVtcGxhdGUucm93cywgdGVtcGxhdGUuY29scyAqIDIsIGN2LkNWXzhVQzMpO1xuICAgIGF3YWl0IEIuYWxsKFtcbiAgICAgIHJlZmVyZW5jZS5jb3B5VG9Bc3luYyhcbiAgICAgICAgcmVzdWx0TWF0LmdldFJlZ2lvbihuZXcgY3YuUmVjdCgwLCAwLCByZWZlcmVuY2UuY29scywgcmVmZXJlbmNlLnJvd3MpKSksXG4gICAgICB0ZW1wbGF0ZS5jb3B5VG9Bc3luYyhcbiAgICAgICAgcmVzdWx0TWF0LmdldFJlZ2lvbihuZXcgY3YuUmVjdChyZWZlcmVuY2UuY29scywgMCwgdGVtcGxhdGUuY29scywgdGVtcGxhdGUucm93cykpKVxuICAgIF0pO1xuICAgIGxldCBtYXNrID0gcmVmZXJlbmNlLmFic2RpZmYodGVtcGxhdGUpO1xuICAgIG1hc2sgPSBhd2FpdCBtYXNrLmN2dENvbG9yQXN5bmMoY3YuQ09MT1JfQkdSMkdSQVkpO1xuICAgIGxldCBjb250b3VycyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBtYXNrID0gYXdhaXQgbWFzay50aHJlc2hvbGRBc3luYygxMjgsIDI1NSwgY3YuVEhSRVNIX0JJTkFSWSB8IGN2LlRIUkVTSF9PVFNVKTtcbiAgICAgIGNvbnRvdXJzID0gYXdhaXQgbWFzay5maW5kQ29udG91cnNBc3luYyhjdi5SRVRSX0VYVEVSTkFMLCBjdi5DSEFJTl9BUFBST1hfU0lNUExFKTtcbiAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgIC8vIE5vIGNvbnRvdXJzIGNhbiBiZSBmb3VuZCwgd2hpY2ggbWVhbnMsIG1vc3QgbGlrZWx5LCB0aGF0IGltYWdlcyBhcmUgZXF1YWxcbiAgICB9XG4gICAgZm9yIChjb25zdCBjb250b3VyIG9mIGNvbnRvdXJzKSB7XG4gICAgICBjb25zdCBib3VuZGluZ1JlY3QgPSBjb250b3VyLmJvdW5kaW5nUmVjdCgpO1xuICAgICAgaGlnaGxpZ2h0UmVnaW9uKHJlc3VsdE1hdCwgYm91bmRpbmdSZWN0KTtcbiAgICAgIGhpZ2hsaWdodFJlZ2lvbihyZXN1bHRNYXQsIHtcbiAgICAgICAgeDogcmVmZXJlbmNlLmNvbHMgKyBib3VuZGluZ1JlY3QueCxcbiAgICAgICAgeTogYm91bmRpbmdSZWN0LnksXG4gICAgICAgIHdpZHRoOiBib3VuZGluZ1JlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodDogYm91bmRpbmdSZWN0LmhlaWdodFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJlc3VsdC52aXN1YWxpemF0aW9uID0gYXdhaXQgY3YuaW1lbmNvZGVBc3luYygnLnBuZycsIHJlc3VsdE1hdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPY2N1cnJlbmNlT3B0aW9uc1xuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gdmlzdWFsaXplIFtmYWxzZV0gV2hldGhlciB0byByZXR1cm4gdGhlIHJlc3VsdGluZyB2aXNhbGl6YXRpb25cbiAqIGFzIGFuIGltYWdlICh1c2VmdWwgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcylcbiAqIEBwcm9wZXJ0eSB7P2Zsb2F0fSB0aHJlc2hvbGQgWzAuNV0gQXQgd2hhdCBub3JtYWxpemVkIHRocmVzaG9sZCB0byByZWplY3RcbiAqIGEgbWF0Y2hcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9jY3VycmVuY2VSZXN1bHRcbiAqIEBwcm9wZXJ0eSB7UmVjdH0gcmVjdCBUaGUgcmVnaW9uIG9mIHRoZSBwYXJ0aWFsIGltYWdlIG9jY3VyZW5jZVxuICogb24gdGhlIGZ1bGwgaW1hZ2VcbiAqIEBwcm9wZXJ0eSB7P0J1ZmZlcn0gdmlzdWFsaXphdGlvbiBUaGUgdmlzdWFsaXphdGlvbiBvZiB0aGUgbWF0Y2hpbmcgcmVzdWx0XG4gKiByZXByZXNlbnRlZCBhcyBQTkcgaW1hZ2UgYnVmZmVyLiBPbiB0aGlzIGltYWdlIHRoZSBtYXRjaGluZ1xuICogcmVnaW9uIGlzIGhpZ2hsaWdodGVkIHdpdGggYSByZWN0YW5nbGUuXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2NvcmUgVGhlIHNpbWlsYXJpdHkgc2NvcmUgYXMgYSBmbG9hdCBudW1iZXIgaW4gcmFuZ2UgWzAuMCwgMS4wXS5cbiAqIDEuMCBpcyB0aGUgaGlnaGVzdCBzY29yZSAobWVhbnMgYm90aCBpbWFnZXMgYXJlIHRvdGFsbHkgZXF1YWwpLlxuICovXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgb2NjdXJlbmNlIHBvc2l0aW9uIG9mIGEgcGFydGlhbCBpbWFnZSBpbiB0aGUgZnVsbFxuICogaW1hZ2UuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGZ1bGxJbWdEYXRhIFRoZSBkYXRhIG9mIHRoZSBmdWxsIGltYWdlIHBhY2tlZCBpbnRvIGEgTm9kZUpTIGJ1ZmZlclxuICogQHBhcmFtIHtCdWZmZXJ9IHBhcnRpYWxJbWdEYXRhIFRoZSBkYXRhIG9mIHRoZSBwYXJ0aWFsIGltYWdlIHBhY2tlZCBpbnRvIGEgTm9kZUpTIGJ1ZmZlclxuICogQHBhcmFtIHs/T2NjdXJyZW5jZU9wdGlvbnN9IG9wdGlvbnMgW3t9XSBTZXQgb2Ygb2NjdXJyZW5jZSBjYWxjdWxhdGlvbiBvcHRpb25zXG4gKlxuICogQHJldHVybnMge09jY3VycmVuY2VSZXN1bHR9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gb2NjdXJlbmNlcyBvZiB0aGUgcGFydGlhbCBpbWFnZSBjYW4gYmUgZm91bmQgaW4gdGhlIGZ1bGwgaW1hZ2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VPY2N1cnJlbmNlIChmdWxsSW1nRGF0YSwgcGFydGlhbEltZ0RhdGEsIG9wdGlvbnMgPSB7fSkge1xuICBhd2FpdCBpbml0T3BlbkNWKCk7XG5cbiAgY29uc3Qge3Zpc3VhbGl6ZSA9IGZhbHNlLCB0aHJlc2hvbGQgPSBERUZBVUxUX01BVENIX1RIUkVTSE9MRH0gPSBvcHRpb25zO1xuICBjb25zdCBbZnVsbEltZywgcGFydGlhbEltZ10gPSBhd2FpdCBCLmFsbChbXG4gICAgY3YuaW1kZWNvZGVBc3luYyhmdWxsSW1nRGF0YSksXG4gICAgY3YuaW1kZWNvZGVBc3luYyhwYXJ0aWFsSW1nRGF0YSlcbiAgXSk7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICB0cnkge1xuICAgIGNvbnN0IG1hdGNoZWQgPSBhd2FpdCBmdWxsSW1nLm1hdGNoVGVtcGxhdGVBc3luYyhwYXJ0aWFsSW1nLCBjdi5UTV9DQ09FRkZfTk9STUVEKTtcbiAgICBjb25zdCBtaW5NYXggPSBhd2FpdCBtYXRjaGVkLm1pbk1heExvY0FzeW5jKCk7XG4gICAgcmVzdWx0LnNjb3JlID0gbWluTWF4Lm1heFZhbDtcbiAgICBpZiAocmVzdWx0LnNjb3JlIDwgdGhyZXNob2xkKSB7XG4gICAgICAvLyBCZWxvdyBlcnJvciBtZXNzYWdlLCBgQ2Fubm90IGZpbmQgYW55IG9jY3VycmVuY2VzYCBpcyByZWZlcmVuY2VkIGluIGZpbmQgYnkgaW1hZ2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgYW55IG9jY3VycmVuY2VzIG9mIHRoZSBwYXJ0aWFsIGltYWdlIGluIHRoZSBmdWxsIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBpbWFnZSBhYm92ZSB0aGUgdGhyZXNob2xkIG9mICR7dGhyZXNob2xkfS4gSGlnaGVzdCBtYXRjaCB2YWx1ZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgZm91bmQgd2FzICR7bWluTWF4Lm1heFZhbH1gKTtcbiAgICB9XG4gICAgcmVzdWx0LnJlY3QgPSB7XG4gICAgICB4OiBtaW5NYXgubWF4TG9jLngsXG4gICAgICB5OiBtaW5NYXgubWF4TG9jLnksXG4gICAgICB3aWR0aDogcGFydGlhbEltZy5jb2xzLFxuICAgICAgaGVpZ2h0OiBwYXJ0aWFsSW1nLnJvd3NcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gQmVsb3cgZXJyb3IgbWVzc2FnZSwgYENhbm5vdCBmaW5kIGFueSBvY2N1cnJlbmNlc2AgaXMgcmVmZXJlbmNlZCBpbiBmaW5kIGJ5IGltYWdlXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBhbnkgb2NjdXJyZW5jZXMgb2YgdGhlIHBhcnRpYWwgaW1hZ2UgaW4gdGhlIGZ1bGwgaW1hZ2UuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZX1gKTtcbiAgfVxuICBpZiAodmlzdWFsaXplKSB7XG4gICAgaGlnaGxpZ2h0UmVnaW9uKGZ1bGxJbWcsIHJlc3VsdC5yZWN0KTtcbiAgICByZXN1bHQudmlzdWFsaXphdGlvbiA9IGF3YWl0IGN2LmltZW5jb2RlQXN5bmMoJy5wbmcnLCBmdWxsSW1nKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyb3AgdGhlIGltYWdlIGJ5IGdpdmVuIHJlY3RhbmdsZSAodXNlIGJhc2U2NCBzdHJpbmcgYXMgaW5wdXQgYW5kIG91dHB1dClcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0SW1hZ2UgVGhlIHN0cmluZyB3aXRoIGJhc2U2NCBlbmNvZGVkIGltYWdlXG4gKiBAcGFyYW0ge1JlZ2lvbn0gcmVjdCBUaGUgc2VsZWN0ZWQgcmVnaW9uIG9mIGltYWdlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGJhc2U2NCBlbmNvZGVkIHN0cmluZyBvZiBjcm9wcGVkIGltYWdlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyb3BCYXNlNjRJbWFnZSAoYmFzZTY0SW1hZ2UsIHJlY3QpIHtcbiAgY29uc3QgaW1hZ2UgPSBhd2FpdCBiYXNlNjRUb0ltYWdlKGJhc2U2NEltYWdlKTtcbiAgY3JvcEltYWdlKGltYWdlLCByZWN0KTtcbiAgcmV0dXJuIGF3YWl0IGltYWdlVG9CYXNlNjQoaW1hZ2UpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBuZ2pzIGltYWdlIGZyb20gZ2l2ZW4gYmFzZTY0IGltYWdlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NEltYWdlIFRoZSBzdHJpbmcgd2l0aCBiYXNlNjQgZW5jb2RlZCBpbWFnZVxuICogQHJldHVybiB7UE5HfSBUaGUgaW1hZ2Ugb2JqZWN0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGJhc2U2NFRvSW1hZ2UgKGJhc2U2NEltYWdlKSB7XG4gIGNvbnN0IGltYWdlQnVmZmVyID0gQnVmZmVyLmZyb20oYmFzZTY0SW1hZ2UsICdiYXNlNjQnKTtcbiAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBQTkcoe2ZpbHRlclR5cGU6IFNDQU5MSU5FX0ZJTFRFUl9NRVRIT0R9KTtcbiAgICBpbWFnZS5wYXJzZShpbWFnZUJ1ZmZlciwgKGVyciwgaW1hZ2UpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGJhc2U2NCBzdHJpbmcgZm9yIGdpdmVuIGltYWdlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7UE5HfSBpbWFnZSBUaGUgaW1hZ2Ugb2JqZWN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgd2l0aCBiYXNlNjQgZW5jb2RlZCBpbWFnZVxuICovXG5hc3luYyBmdW5jdGlvbiBpbWFnZVRvQmFzZTY0IChpbWFnZSkge1xuICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGltYWdlLnBhY2soKVxuICAgIC5vbignZGF0YScsIChjaHVuaykgPT4gY2h1bmtzLnB1c2goY2h1bmspKS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KGNodW5rcykudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCAoZXJyKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzXG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JvcCB0aGUgaW1hZ2UgYnkgZ2l2ZW4gcmVjdGFuZ2xlXG4gKlxuICogQHBhcmFtIHtQTkd9IGltYWdlIFRoZSBpbWFnZSB0byBtdXRhdGUgYnkgY3JvcHBpbmdcbiAqIEBwYXJhbSB7UmVnaW9ufSByZWN0IFRoZSBzZWxlY3RlZCByZWdpb24gb2YgaW1hZ2VcbiAqL1xuZnVuY3Rpb24gY3JvcEltYWdlIChpbWFnZSwgcmVjdCkge1xuICBjb25zdCBpbWFnZVJlY3QgPSB7d2lkdGg6IGltYWdlLndpZHRoLCBoZWlnaHQ6IGltYWdlLmhlaWdodH07XG4gIGNvbnN0IGludGVyUmVjdCA9IGdldFJlY3RJbnRlcnNlY3Rpb24ocmVjdCwgaW1hZ2VSZWN0KTtcbiAgaWYgKGludGVyUmVjdC53aWR0aCA8IHJlY3Qud2lkdGggfHwgaW50ZXJSZWN0LmhlaWdodCA8IHJlY3QuaGVpZ2h0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JvcCAke0pTT04uc3RyaW5naWZ5KHJlY3QpfSBmcm9tICR7SlNPTi5zdHJpbmdpZnkoaW1hZ2VSZWN0KX0gYmVjYXVzZSB0aGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gdGhlbSB3YXMgbm90IHRoZSBzaXplIG9mIHRoZSByZWN0YCk7XG4gIH1cblxuICBjb25zdCBmaXJzdFZlcnRpY2FsUGl4ZWwgPSBpbnRlclJlY3QudG9wO1xuICBjb25zdCBsYXN0VmVydGljYWxQaXhlbCA9IGludGVyUmVjdC50b3AgKyBpbnRlclJlY3QuaGVpZ2h0O1xuXG4gIGNvbnN0IGZpcnN0SG9yaXpvbnRhbFBpeGVsID0gaW50ZXJSZWN0LmxlZnQ7XG4gIGNvbnN0IGxhc3RIb3Jpem9udGFsUGl4ZWwgPSBpbnRlclJlY3QubGVmdCArIGludGVyUmVjdC53aWR0aDtcblxuICBjb25zdCBjcm9wcGVkQXJyYXkgPSBbXTtcbiAgZm9yIChsZXQgeSA9IGZpcnN0VmVydGljYWxQaXhlbDsgeSA8IGxhc3RWZXJ0aWNhbFBpeGVsOyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gZmlyc3RIb3Jpem9udGFsUGl4ZWw7IHggPCBsYXN0SG9yaXpvbnRhbFBpeGVsOyB4KyspIHtcbiAgICAgIGNvbnN0IGZpcnN0Qnl0ZUlkeEluUGl4ZWxCbG9jayA9IChpbWFnZVJlY3Qud2lkdGggKiB5ICsgeCkgPDwgMjtcbiAgICAgIGZvciAobGV0IGJ5dGVJZHggPSAwOyBieXRlSWR4IDwgQllURVNfSU5fUElYRUxfQkxPQ0s7IGJ5dGVJZHgrKykge1xuICAgICAgICBjcm9wcGVkQXJyYXkucHVzaChpbWFnZS5kYXRhW2ZpcnN0Qnl0ZUlkeEluUGl4ZWxCbG9jayArIGJ5dGVJZHhdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbWFnZS5kYXRhID0gQnVmZmVyLmZyb20oY3JvcHBlZEFycmF5KTtcbiAgaW1hZ2Uud2lkdGggPSBpbnRlclJlY3Qud2lkdGg7XG4gIGltYWdlLmhlaWdodCA9IGludGVyUmVjdC5oZWlnaHQ7XG4gIHJldHVybiBpbWFnZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVjdEludGVyc2VjdGlvbiAocmVjdCwgaW1hZ2VTaXplKSB7XG4gIGNvbnN0IGxlZnQgPSByZWN0LmxlZnQgPj0gaW1hZ2VTaXplLndpZHRoID8gaW1hZ2VTaXplLndpZHRoIDogcmVjdC5sZWZ0O1xuICBjb25zdCB0b3AgPSByZWN0LnRvcCA+PSBpbWFnZVNpemUuaGVpZ2h0ID8gaW1hZ2VTaXplLmhlaWdodCA6IHJlY3QudG9wO1xuICBjb25zdCB3aWR0aCA9IGltYWdlU2l6ZS53aWR0aCA+PSAobGVmdCArIHJlY3Qud2lkdGgpID8gcmVjdC53aWR0aCA6IChpbWFnZVNpemUud2lkdGggLSBsZWZ0KTtcbiAgY29uc3QgaGVpZ2h0ID0gaW1hZ2VTaXplLmhlaWdodCA+PSAodG9wICsgcmVjdC5oZWlnaHQpID8gcmVjdC5oZWlnaHQgOiAoaW1hZ2VTaXplLmhlaWdodCAtIHRvcCk7XG4gIHJldHVybiB7bGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0fTtcbn1cblxuZXhwb3J0IHtcbiAgY3JvcEJhc2U2NEltYWdlLCBiYXNlNjRUb0ltYWdlLCBpbWFnZVRvQmFzZTY0LCBjcm9wSW1hZ2UsIGdldEltYWdlc01hdGNoZXMsXG4gIGdldEltYWdlc1NpbWlsYXJpdHksIGdldEltYWdlT2NjdXJyZW5jZSwgZ2V0SmltcEltYWdlLCBNSU1FX0pQRUcsIE1JTUVfUE5HLFxuICBNSU1FX0JNUCxcbn07XG4iXSwiZmlsZSI6ImxpYi9pbWFnZS11dGlsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
