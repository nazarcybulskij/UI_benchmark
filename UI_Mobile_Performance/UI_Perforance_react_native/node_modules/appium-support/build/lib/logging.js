"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patchLogger = patchLogger;
exports.getLogger = getLogger;
exports.default = exports.log = void 0;

require("source-map-support/register");

var _npmlog = _interopRequireDefault(require("npmlog"));

var _lodash = _interopRequireDefault(require("lodash"));

var _util = require("./util");

var _moment = _interopRequireDefault(require("moment"));

const NPM_LEVELS = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];
const MAX_LOG_RECORDS_COUNT = 3000;
const PREFIX_TIMESTAMP_FORMAT = 'HH-mm-ss:SSS';
let mockLog = {};

for (let level of NPM_LEVELS) {
  mockLog[level] = () => {};
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, {
      fg: 'blue',
      bg: 'black'
    }, 'dbug');
  }
}

function _getLogger() {
  const testingMode = parseInt(process.env._TESTING, 10) === 1;
  const forceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  const usingGlobalLog = !!global._global_npmlog;
  let logger;

  if (testingMode && !forceLogMode) {
    logger = mockLog;
  } else {
    logger = global._global_npmlog || _npmlog.default;
    logger.maxRecordSize = MAX_LOG_RECORDS_COUNT;
  }

  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getActualPrefix(prefix, logTimestamp = false) {
  let actualPrefix = _lodash.default.isFunction(prefix) ? prefix() : prefix;

  if (logTimestamp) {
    actualPrefix = `[${(0, _moment.default)().format(PREFIX_TIMESTAMP_FORMAT)}] ${actualPrefix}`;
  }

  return actualPrefix;
}

function getLogger(prefix = null) {
  let [logger, usingGlobalLog] = _getLogger();

  let wrappedLogger = {
    unwrap: () => logger
  };
  Object.defineProperty(wrappedLogger, 'level', {
    get: () => {
      return logger.level;
    },
    set: newValue => {
      logger.level = newValue;
    },
    enumerable: true,
    configurable: true
  });
  const logTimestamp = parseInt(process.env._LOG_TIMESTAMP, 10) === 1;

  for (const level of NPM_LEVELS) {
    wrappedLogger[level] = function (...args) {
      const actualPrefix = getActualPrefix(prefix, logTimestamp);

      for (const arg of args) {
        const out = _lodash.default.isError(arg) && arg.stack ? arg.stack : `${arg}`;

        for (const line of out.split('\n')) {
          logger[level](actualPrefix, (0, _util.unleakString)(line));
        }
      }
    };
  }

  wrappedLogger.errorAndThrow = function (err) {
    this.error(err);
    throw _lodash.default.isError(err) ? err : new Error((0, _util.unleakString)(err));
  };

  if (!usingGlobalLog) {
    wrappedLogger.level = 'verbose';
  }

  wrappedLogger.levels = NPM_LEVELS;
  return wrappedLogger;
}

const log = getLogger();
exports.log = log;
var _default = log;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
