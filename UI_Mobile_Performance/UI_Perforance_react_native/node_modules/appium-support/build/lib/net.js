"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadFile = uploadFile;

require("source-map-support/register");

var _fs = require("fs");

var _fs2 = _interopRequireDefault(require("./fs"));

var _url = _interopRequireDefault(require("url"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _util = require("./util");

var _logger = _interopRequireDefault(require("./logger"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _jsftp = _interopRequireDefault(require("jsftp"));

var _timing = _interopRequireDefault(require("./timing"));

async function uploadFileToHttp(remoteUrl, uploadOptions = {}) {
  _logger.default.debug(`${remoteUrl.protocol} upload options: ${JSON.stringify(uploadOptions)}`);

  const response = await (0, _requestPromise.default)(uploadOptions);
  const responseDebugMsg = `Response code: ${response.statusCode}. ` + `Response body: ${JSON.stringify(response.body)}`;

  _logger.default.debug(responseDebugMsg);

  if (response.statusCode >= 400) {
    throw new Error(`Cannot upload the recorded media to '${remoteUrl.href}'. ${responseDebugMsg}`);
  }
}

async function uploadFileToFtp(localFileStream, remoteUrl, uploadOptions = {}) {
  _logger.default.debug(`${remoteUrl.protocol} upload options: ${JSON.stringify(uploadOptions)}`);

  return await new _bluebird.default((resolve, reject) => {
    new _jsftp.default(uploadOptions).put(localFileStream, remoteUrl.pathname, err => {
      if (err) {
        return reject(err);
      }

      resolve();
    });
  });
}

async function uploadFile(localPath, remotePath, uploadOptions = {}) {
  if (!(await _fs2.default.exists(localPath))) {
    throw new Error(`'${localPath}' does not exists or is not accessible`);
  }

  const remoteUrl = _url.default.parse(remotePath);

  const {
    size
  } = await _fs2.default.stat(localPath);

  _logger.default.info(`Uploading '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size to '${remotePath}'...`);

  const timer = new _timing.default().start();

  if (['http:', 'https:'].includes(remoteUrl.protocol)) {
    await uploadFileToHttp(remoteUrl, uploadOptions);
  } else if (remoteUrl.protocol === 'ftp:') {
    await uploadFileToFtp((0, _fs.createReadStream)(localPath), remoteUrl, uploadOptions);
  } else {
    throw new Error(`Cannot upload the file at '${localPath}' to '${remotePath}'. ` + `Unsupported remote protocol '${remoteUrl.protocol}'. ` + `Only http/https and ftp protocols are supported.`);
  }

  _logger.default.info(`Uploaded '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size in ${timer.getDuration().asSeconds.toFixed(3)}s`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9uZXQuanMiXSwibmFtZXMiOlsidXBsb2FkRmlsZVRvSHR0cCIsInJlbW90ZVVybCIsInVwbG9hZE9wdGlvbnMiLCJsb2ciLCJkZWJ1ZyIsInByb3RvY29sIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlIiwicmVzcG9uc2VEZWJ1Z01zZyIsInN0YXR1c0NvZGUiLCJib2R5IiwiRXJyb3IiLCJocmVmIiwidXBsb2FkRmlsZVRvRnRwIiwibG9jYWxGaWxlU3RyZWFtIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJGdHAiLCJwdXQiLCJwYXRobmFtZSIsImVyciIsInVwbG9hZEZpbGUiLCJsb2NhbFBhdGgiLCJyZW1vdGVQYXRoIiwiZnMiLCJleGlzdHMiLCJ1cmwiLCJwYXJzZSIsInNpemUiLCJzdGF0IiwiaW5mbyIsInRpbWVyIiwiVGltZXIiLCJzdGFydCIsImluY2x1ZGVzIiwiZ2V0RHVyYXRpb24iLCJhc1NlY29uZHMiLCJ0b0ZpeGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLGVBQWVBLGdCQUFmLENBQWlDQyxTQUFqQyxFQUE0Q0MsYUFBYSxHQUFHLEVBQTVELEVBQWdFO0FBQzlEQyxrQkFBSUMsS0FBSixDQUFXLEdBQUVILFNBQVMsQ0FBQ0ksUUFBUyxvQkFBbUJDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxhQUFmLENBQThCLEVBQWpGOztBQUNBLFFBQU1NLFFBQVEsR0FBRyxNQUFNLDZCQUFRTixhQUFSLENBQXZCO0FBQ0EsUUFBTU8sZ0JBQWdCLEdBQUksa0JBQWlCRCxRQUFRLENBQUNFLFVBQVcsSUFBdEMsR0FDQyxrQkFBaUJKLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxRQUFRLENBQUNHLElBQXhCLENBQThCLEVBRHpFOztBQUVBUixrQkFBSUMsS0FBSixDQUFVSyxnQkFBVjs7QUFDQSxNQUFJRCxRQUFRLENBQUNFLFVBQVQsSUFBdUIsR0FBM0IsRUFBZ0M7QUFDOUIsVUFBTSxJQUFJRSxLQUFKLENBQVcsd0NBQXVDWCxTQUFTLENBQUNZLElBQUssTUFBS0osZ0JBQWlCLEVBQXZGLENBQU47QUFDRDtBQUNGOztBQUVELGVBQWVLLGVBQWYsQ0FBZ0NDLGVBQWhDLEVBQWlEZCxTQUFqRCxFQUE0REMsYUFBYSxHQUFHLEVBQTVFLEVBQWdGO0FBQzlFQyxrQkFBSUMsS0FBSixDQUFXLEdBQUVILFNBQVMsQ0FBQ0ksUUFBUyxvQkFBbUJDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxhQUFmLENBQThCLEVBQWpGOztBQUNBLFNBQU8sTUFBTSxJQUFJYyxpQkFBSixDQUFNLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUN0QyxRQUFJQyxjQUFKLENBQVFqQixhQUFSLEVBQXVCa0IsR0FBdkIsQ0FBMkJMLGVBQTNCLEVBQTRDZCxTQUFTLENBQUNvQixRQUF0RCxFQUFpRUMsR0FBRCxJQUFTO0FBQ3ZFLFVBQUlBLEdBQUosRUFBUztBQUNQLGVBQU9KLE1BQU0sQ0FBQ0ksR0FBRCxDQUFiO0FBQ0Q7O0FBQ0RMLE1BQUFBLE9BQU87QUFDUixLQUxEO0FBTUQsR0FQWSxDQUFiO0FBUUQ7O0FBWUQsZUFBZU0sVUFBZixDQUEyQkMsU0FBM0IsRUFBc0NDLFVBQXRDLEVBQWtEdkIsYUFBYSxHQUFHLEVBQWxFLEVBQXNFO0FBQ3BFLE1BQUksRUFBQyxNQUFNd0IsYUFBR0MsTUFBSCxDQUFVSCxTQUFWLENBQVAsQ0FBSixFQUFpQztBQUMvQixVQUFNLElBQUlaLEtBQUosQ0FBWSxJQUFHWSxTQUFVLHdDQUF6QixDQUFOO0FBQ0Q7O0FBQ0QsUUFBTXZCLFNBQVMsR0FBRzJCLGFBQUlDLEtBQUosQ0FBVUosVUFBVixDQUFsQjs7QUFDQSxRQUFNO0FBQUNLLElBQUFBO0FBQUQsTUFBUyxNQUFNSixhQUFHSyxJQUFILENBQVFQLFNBQVIsQ0FBckI7O0FBQ0FyQixrQkFBSTZCLElBQUosQ0FBVSxjQUFhUixTQUFVLFFBQU8sZ0NBQXFCTSxJQUFyQixDQUEyQixhQUFZTCxVQUFXLE1BQTFGOztBQUNBLFFBQU1RLEtBQUssR0FBRyxJQUFJQyxlQUFKLEdBQVlDLEtBQVosRUFBZDs7QUFDQSxNQUFJLENBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0JDLFFBQXBCLENBQTZCbkMsU0FBUyxDQUFDSSxRQUF2QyxDQUFKLEVBQXNEO0FBQ3BELFVBQU1MLGdCQUFnQixDQUFDQyxTQUFELEVBQVlDLGFBQVosQ0FBdEI7QUFDRCxHQUZELE1BRU8sSUFBSUQsU0FBUyxDQUFDSSxRQUFWLEtBQXVCLE1BQTNCLEVBQW1DO0FBQ3hDLFVBQU1TLGVBQWUsQ0FBQywwQkFBaUJVLFNBQWpCLENBQUQsRUFBOEJ2QixTQUE5QixFQUF5Q0MsYUFBekMsQ0FBckI7QUFDRCxHQUZNLE1BRUE7QUFDTCxVQUFNLElBQUlVLEtBQUosQ0FBVyw4QkFBNkJZLFNBQVUsU0FBUUMsVUFBVyxLQUEzRCxHQUNDLGdDQUErQnhCLFNBQVMsQ0FBQ0ksUUFBUyxLQURuRCxHQUVDLGtEQUZYLENBQU47QUFHRDs7QUFDREYsa0JBQUk2QixJQUFKLENBQVUsYUFBWVIsU0FBVSxRQUFPLGdDQUFxQk0sSUFBckIsQ0FBMkIsWUFBV0csS0FBSyxDQUFDSSxXQUFOLEdBQW9CQyxTQUFwQixDQUE4QkMsT0FBOUIsQ0FBc0MsQ0FBdEMsQ0FBeUMsR0FBdEg7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlYWRTdHJlYW0gfSBmcm9tICdmcyc7XG5pbXBvcnQgZnMgZnJvbSAnLi9mcyc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB0b1JlYWRhYmxlU2l6ZVN0cmluZyB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgRnRwIGZyb20gJ2pzZnRwJztcbmltcG9ydCBUaW1lciBmcm9tICcuL3RpbWluZyc7XG5cblxuYXN5bmMgZnVuY3Rpb24gdXBsb2FkRmlsZVRvSHR0cCAocmVtb3RlVXJsLCB1cGxvYWRPcHRpb25zID0ge30pIHtcbiAgbG9nLmRlYnVnKGAke3JlbW90ZVVybC5wcm90b2NvbH0gdXBsb2FkIG9wdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkodXBsb2FkT3B0aW9ucyl9YCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdCh1cGxvYWRPcHRpb25zKTtcbiAgY29uc3QgcmVzcG9uc2VEZWJ1Z01zZyA9IGBSZXNwb25zZSBjb2RlOiAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGBSZXNwb25zZSBib2R5OiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmJvZHkpfWA7XG4gIGxvZy5kZWJ1ZyhyZXNwb25zZURlYnVnTXNnKTtcbiAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXBsb2FkIHRoZSByZWNvcmRlZCBtZWRpYSB0byAnJHtyZW1vdGVVcmwuaHJlZn0nLiAke3Jlc3BvbnNlRGVidWdNc2d9YCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBsb2FkRmlsZVRvRnRwIChsb2NhbEZpbGVTdHJlYW0sIHJlbW90ZVVybCwgdXBsb2FkT3B0aW9ucyA9IHt9KSB7XG4gIGxvZy5kZWJ1ZyhgJHtyZW1vdGVVcmwucHJvdG9jb2x9IHVwbG9hZCBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KHVwbG9hZE9wdGlvbnMpfWApO1xuICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIG5ldyBGdHAodXBsb2FkT3B0aW9ucykucHV0KGxvY2FsRmlsZVN0cmVhbSwgcmVtb3RlVXJsLnBhdGhuYW1lLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogVXBsb2FkcyB0aGUgZ2l2ZW4gZmlsZSB0byBhIHJlbW90ZSBsb2NhdGlvbi4gSFRUUChTKSBhbmQgRlRQXG4gKiBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoIC0gVGhlIHBhdGggdG8gYSBmaWxlIG9uIHRoZSBsb2NhbCBzdG9yYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcmVtb3RlIFVSTCB0byB1cGxvYWQgdGhlIGZpbGUgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gdXBsb2FkT3B0aW9ucyAtIFRoZSBvcHRpb25zIHNldCwgd2hpY2ggZGVwZW5kcyBvbiB0aGUgcHJvdG9jb2wgc2V0IGZvciByZW1vdGVQYXRoLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVxdWVzdC1wcm9taXNlIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9qc2Z0cCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRGaWxlIChsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHVwbG9hZE9wdGlvbnMgPSB7fSkge1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhsb2NhbFBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yIChgJyR7bG9jYWxQYXRofScgZG9lcyBub3QgZXhpc3RzIG9yIGlzIG5vdCBhY2Nlc3NpYmxlYCk7XG4gIH1cbiAgY29uc3QgcmVtb3RlVXJsID0gdXJsLnBhcnNlKHJlbW90ZVBhdGgpO1xuICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KGxvY2FsUGF0aCk7XG4gIGxvZy5pbmZvKGBVcGxvYWRpbmcgJyR7bG9jYWxQYXRofScgb2YgJHt0b1JlYWRhYmxlU2l6ZVN0cmluZyhzaXplKX0gc2l6ZSB0byAnJHtyZW1vdGVQYXRofScuLi5gKTtcbiAgY29uc3QgdGltZXIgPSBuZXcgVGltZXIoKS5zdGFydCgpO1xuICBpZiAoWydodHRwOicsICdodHRwczonXS5pbmNsdWRlcyhyZW1vdGVVcmwucHJvdG9jb2wpKSB7XG4gICAgYXdhaXQgdXBsb2FkRmlsZVRvSHR0cChyZW1vdGVVcmwsIHVwbG9hZE9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHJlbW90ZVVybC5wcm90b2NvbCA9PT0gJ2Z0cDonKSB7XG4gICAgYXdhaXQgdXBsb2FkRmlsZVRvRnRwKGNyZWF0ZVJlYWRTdHJlYW0obG9jYWxQYXRoKSwgcmVtb3RlVXJsLCB1cGxvYWRPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1cGxvYWQgdGhlIGZpbGUgYXQgJyR7bG9jYWxQYXRofScgdG8gJyR7cmVtb3RlUGF0aH0nLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFVuc3VwcG9ydGVkIHJlbW90ZSBwcm90b2NvbCAnJHtyZW1vdGVVcmwucHJvdG9jb2x9Jy4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBPbmx5IGh0dHAvaHR0cHMgYW5kIGZ0cCBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgfVxuICBsb2cuaW5mbyhgVXBsb2FkZWQgJyR7bG9jYWxQYXRofScgb2YgJHt0b1JlYWRhYmxlU2l6ZVN0cmluZyhzaXplKX0gc2l6ZSBpbiAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzLnRvRml4ZWQoMyl9c2ApO1xufVxuXG5leHBvcnQgeyB1cGxvYWRGaWxlIH07XG4iXSwiZmlsZSI6ImxpYi9uZXQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
