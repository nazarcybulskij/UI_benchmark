"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _fs2 = _interopRequireDefault(require("fs"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers.js");

var _shellQuote = require("shell-quote");

const DEFAULT_PRIVATE_KEY = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.pk8');

const DEFAULT_CERTIFICATE = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.x509.pem');

const DEFAULT_CERT_DIGEST = 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc';
const BUNDLETOOL_TUTORIAL = 'https://developer.android.com/studio/command-line/bundletool';
const APKSIGNER_VERIFY_FAIL = 'DOES NOT VERIFY';
let apkSigningMethods = {};

apkSigningMethods.executeApksigner = async function executeApksigner(args = []) {
  const apkSignerJar = await (0, _helpers.getApksignerForOs)(this);
  const fullCmd = [(0, _helpers.getJavaForOs)(), '-Xmx1024M', '-Xss1m', '-jar', apkSignerJar, ...args];

  _logger.default.debug(`Starting apksigner: ${(0, _shellQuote.quote)(fullCmd)}`);

  const {
    stdout,
    stderr
  } = await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1));

  for (let [name, stream] of [['stdout', stdout], ['stderr', stderr]]) {
    if (!_lodash.default.trim(stream)) {
      continue;
    }

    if (name === 'stdout') {
      stream = stream.split('\n').filter(line => !line.includes('WARNING:')).join('\n');
    }

    _logger.default.debug(`apksigner ${name}: ${stream}`);
  }

  return stdout;
};

apkSigningMethods.signWithDefaultCert = async function signWithDefaultCert(apk) {
  _logger.default.debug(`Signing '${apk}' with default cert`);

  if (!(await _appiumSupport.fs.exists(apk))) {
    throw new Error(`${apk} file doesn't exist.`);
  }

  try {
    const args = ['sign', '--key', DEFAULT_PRIVATE_KEY, '--cert', DEFAULT_CERTIFICATE, apk];
    await this.executeApksigner(args);
  } catch (err) {
    _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to sign.jar. ` + `Original error: ${err.stderr || err.message}`);

    const signPath = _path.default.resolve(this.helperJarPath, 'sign.jar');

    const fullCmd = [(0, _helpers.getJavaForOs)(), '-jar', signPath, apk, '--override'];

    _logger.default.debug(`Starting sign.jar: ${(0, _shellQuote.quote)(fullCmd)}`);

    try {
      await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1));
    } catch (e) {
      throw new Error(`Could not sign with default certificate. ` + `Original error ${e.stderr || e.message}`);
    }
  }
};

apkSigningMethods.signWithCustomCert = async function signWithCustomCert(apk) {
  _logger.default.debug(`Signing '${apk}' with custom cert`);

  if (!(await _appiumSupport.fs.exists(this.keystorePath))) {
    throw new Error(`Keystore: ${this.keystorePath} doesn't exist.`);
  }

  if (!(await _appiumSupport.fs.exists(apk))) {
    throw new Error(`'${apk}' doesn't exist.`);
  }

  try {
    await this.executeApksigner(['sign', '--ks', this.keystorePath, '--ks-key-alias', this.keyAlias, '--ks-pass', `pass:${this.keystorePassword}`, '--key-pass', `pass:${this.keyPassword}`, apk]);
  } catch (err) {
    _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to jarsigner. ` + `Original error: ${err.stderr || err.message}`);

    try {
      if (await (0, _helpers.unsignApk)(apk)) {
        _logger.default.debug(`'${apk}' has been successfully unsigned`);
      } else {
        _logger.default.debug(`'${apk}' does not need to be unsigned`);
      }

      const jarsigner = _path.default.resolve((0, _helpers.getJavaHome)(), 'bin', `jarsigner${_appiumSupport.system.isWindows() ? '.exe' : ''}`);

      const fullCmd = [jarsigner, '-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias];

      _logger.default.debug(`Starting jarsigner: ${(0, _shellQuote.quote)(fullCmd)}`);

      await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1));
    } catch (e) {
      throw new Error(`Could not sign with custom certificate. ` + `Original error: ${e.stderr || e.message}`);
    }
  }
};

apkSigningMethods.sign = async function sign(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    let message = 'Signing of .apks-files is not supported. ';

    if (this.useKeystore) {
      message += 'Consider manual application bundle signing with the custom keystore ' + `like it is described at ${BUNDLETOOL_TUTORIAL}`;
    } else {
      message += `Consider manual application bundle signing with the key at '${DEFAULT_PRIVATE_KEY}' ` + `and the certificate at '${DEFAULT_CERTIFICATE}'. Read ${BUNDLETOOL_TUTORIAL} for more details.`;
    }

    _logger.default.warn(message);

    return;
  }

  let apksignerFound = true;

  try {
    await (0, _helpers.getApksignerForOs)(this);
  } catch (err) {
    apksignerFound = false;
  }

  if (apksignerFound) {
    await this.zipAlignApk(appPath);
  }

  if (this.useKeystore) {
    await this.signWithCustomCert(appPath);
  } else {
    await this.signWithDefaultCert(appPath);
  }

  if (!apksignerFound) {
    await this.zipAlignApk(appPath);
  }
};

apkSigningMethods.zipAlignApk = async function zipAlignApk(apk) {
  await this.initZipAlign();

  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-c', '4', apk]);

    _logger.default.debug(`${apk}' is already zip-aligned. Doing nothing`);

    return false;
  } catch (e) {
    _logger.default.debug(`'${apk}' is not zip-aligned. Aligning`);
  }

  try {
    await _appiumSupport.fs.access(apk, _fs2.default.W_OK);
  } catch (e) {
    throw new Error(`The file at '${apk}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(apk)}' ` + `for the Appium process, so it can zip-align the file`);
  }

  const alignedApk = await _appiumSupport.tempDir.path({
    prefix: 'appium',
    suffix: '.tmp'
  });
  await (0, _appiumSupport.mkdirp)(_path.default.dirname(alignedApk));

  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]);
    await _appiumSupport.fs.mv(alignedApk, apk, {
      mkdirp: true
    });
    return true;
  } catch (e) {
    if (await _appiumSupport.fs.exists(alignedApk)) {
      await _appiumSupport.fs.unlink(alignedApk);
    }

    throw new Error(`zipAlignApk failed. Original error: ${e.stderr || e.message}`);
  }
};

apkSigningMethods.checkApkCert = async function checkApkCert(appPath, pkg, opts = {}) {
  _logger.default.debug(`Checking app cert for ${appPath}`);

  if (!(await _appiumSupport.fs.exists(appPath))) {
    _logger.default.debug(`'${appPath}' does not exist`);

    return false;
  }

  if (this.useKeystore) {
    return await this.checkCustomApkCert(appPath, pkg);
  }

  if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
    appPath = await this.extractBaseApk(appPath);
  }

  const {
    requireDefaultCert = true
  } = opts;

  try {
    await (0, _helpers.getApksignerForOs)(this);
    const output = await this.executeApksigner(['verify', '--print-certs', appPath]);

    if (_lodash.default.includes(output, DEFAULT_CERT_DIGEST)) {
      _logger.default.debug(`'${appPath}' is signed with the default certificate`);
    } else {
      _logger.default.debug(`'${appPath}' is signed with a non-default certificate`);
    }

    return !requireDefaultCert || _lodash.default.includes(output, DEFAULT_CERT_DIGEST);
  } catch (err) {
    if (_lodash.default.includes(err.stderr, APKSIGNER_VERIFY_FAIL)) {
      _logger.default.debug(`'${appPath}' is not signed`);

      return false;
    }

    _logger.default.warn(`Cannot use apksigner tool for signature verification. ` + `Original error: ${err.message}`);
  }

  _logger.default.debug(`Defaulting to verify.jar`);

  try {
    await (0, _teen_process.exec)((0, _helpers.getJavaForOs)(), ['-jar', _path.default.resolve(this.helperJarPath, 'verify.jar'), appPath]);

    _logger.default.debug(`'${appPath}' is signed with the default certificate`);

    return true;
  } catch (err) {
    if (!requireDefaultCert && _lodash.default.includes(_lodash.default.toLower(err.stderr), 'invalid cert')) {
      _logger.default.debug(`'${appPath}' is signed with a non-default certificate`);

      return true;
    }

    _logger.default.debug(`'${appPath}' is not signed with the default certificate`);

    _logger.default.debug(err.stderr ? err.stderr : err.message);

    return false;
  }
};

apkSigningMethods.checkCustomApkCert = async function checkCustomApkCert(appPath, pkg) {
  _logger.default.debug(`Checking custom app cert for ${appPath}`);

  if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
    appPath = await this.extractBaseApk(appPath);
  }

  let h = 'a-fA-F0-9';
  let md5Str = [`.*MD5.*((?:[${h}]{2}:){15}[${h}]{2})`];
  let md5 = new RegExp(md5Str, 'mi');

  let keytool = _path.default.resolve((0, _helpers.getJavaHome)(), 'bin', `keytool${_appiumSupport.system.isWindows() ? '.exe' : ''}`);

  let keystoreHash = await this.getKeystoreMd5(keytool, md5);
  return await this.checkApkKeystoreMatch(keytool, md5, keystoreHash, pkg, appPath);
};

apkSigningMethods.getKeystoreMd5 = async function getKeystoreMd5(keytool, md5re) {
  _logger.default.debug('Printing keystore md5.');

  try {
    let {
      stdout
    } = await (0, _teen_process.exec)(keytool, ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword]);
    let keystoreHash = md5re.exec(stdout);
    keystoreHash = keystoreHash ? keystoreHash[1] : null;

    _logger.default.debug(`Keystore MD5: ${keystoreHash}`);

    return keystoreHash;
  } catch (e) {
    throw new Error(`getKeystoreMd5 failed. Original error: ${e.message}`);
  }
};

apkSigningMethods.checkApkKeystoreMatch = async function checkApkKeystoreMatch(keytool, md5re, keystoreHash, pkg, apk) {
  let entryHash = null;
  let rsa = /^META-INF\/.*\.[rR][sS][aA]$/;
  let foundKeystoreMatch = false;
  await _appiumSupport.zip.readEntries(apk, async ({
    entry,
    extractEntryTo
  }) => {
    entry = entry.fileName;

    if (!rsa.test(entry)) {
      return;
    }

    _logger.default.debug(`Entry: ${entry}`);

    let entryPath = _path.default.join(this.tmpDir, pkg, 'cert');

    _logger.default.debug(`entryPath: ${entryPath}`);

    let entryFile = _path.default.join(entryPath, entry);

    _logger.default.debug(`entryFile: ${entryFile}`);

    await _appiumSupport.fs.rimraf(entryPath);
    await extractEntryTo(entryPath);

    _logger.default.debug('extracted!');

    _logger.default.debug('Printing apk md5.');

    let {
      stdout
    } = await (0, _teen_process.exec)(keytool, ['-v', '-printcert', '-file', entryFile]);
    entryHash = md5re.exec(stdout);
    entryHash = entryHash ? entryHash[1] : null;

    _logger.default.debug(`entryHash MD5: ${entryHash}`);

    _logger.default.debug(`keystore MD5: ${keystoreHash}`);

    let matchesKeystore = entryHash && entryHash === keystoreHash;

    _logger.default.debug(`Matches keystore? ${matchesKeystore}`);

    if (matchesKeystore) {
      foundKeystoreMatch = true;
      return false;
    }
  });
  return foundKeystoreMatch;
};

var _default = apkSigningMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
