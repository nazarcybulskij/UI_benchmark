"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REMOTE_CACHE_ROOT = void 0;

require("source-map-support/register");

var _helpers = require("../helpers.js");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _semver = _interopRequireDefault(require("semver"));

var _os = _interopRequireDefault(require("os"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _adbkitApkreader = _interopRequireDefault(require("adbkit-apkreader"));

let apkUtilsMethods = {};
const ACTIVITIES_TROUBLESHOOTING_LINK = 'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md';
apkUtilsMethods.APP_INSTALL_STATE = {
  UNKNOWN: 'unknown',
  NOT_INSTALLED: 'notInstalled',
  NEWER_VERSION_INSTALLED: 'newerVersionInstalled',
  SAME_VERSION_INSTALLED: 'sameVersionInstalled',
  OLDER_VERSION_INSTALLED: 'olderVersionInstalled'
};
const REMOTE_CACHE_ROOT = '/data/local/tmp/appium_cache';
exports.REMOTE_CACHE_ROOT = REMOTE_CACHE_ROOT;

apkUtilsMethods.isAppInstalled = async function isAppInstalled(pkg) {
  _logger.default.debug(`Getting install status for ${pkg}`);

  const installedPattern = new RegExp(`^\\s*Package\\s+\\[${_lodash.default.escapeRegExp(pkg)}\\][^:]+:$`, 'm');

  try {
    const stdout = await this.shell(['dumpsys', 'package', pkg]);
    const isInstalled = installedPattern.test(stdout);

    _logger.default.debug(`'${pkg}' is${!isInstalled ? ' not' : ''} installed`);

    return isInstalled;
  } catch (e) {
    throw new Error(`Error finding if '${pkg}' is installed. Original error: ${e.message}`);
  }
};

apkUtilsMethods.startUri = async function startUri(uri, pkg) {
  if (!uri || !pkg) {
    throw new Error('URI and package arguments are required');
  }

  const args = ['am', 'start', '-W', '-a', 'android.intent.action.VIEW', '-d', uri.replace(/&/g, '\\&'), pkg];

  try {
    const res = await this.shell(args);

    if (res.toLowerCase().includes('unable to resolve intent')) {
      throw new Error(res);
    }
  } catch (e) {
    throw new Error(`Error attempting to start URI. Original error: ${e}`);
  }
};

apkUtilsMethods.startApp = async function startApp(startAppOptions = {}) {
  if (!startAppOptions.pkg || !(startAppOptions.activity || startAppOptions.action)) {
    throw new Error('pkg, and activity or intent action, are required to start an application');
  }

  startAppOptions = _lodash.default.clone(startAppOptions);

  if (startAppOptions.activity) {
    startAppOptions.activity = startAppOptions.activity.replace('$', '\\$');
  }

  _lodash.default.defaults(startAppOptions, {
    waitPkg: startAppOptions.pkg,
    waitForLaunch: true,
    waitActivity: false,
    retry: true,
    stopApp: true
  });

  startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
  const apiLevel = await this.getApiLevel();
  const cmd = (0, _helpers.buildStartCmd)(startAppOptions, apiLevel);
  const intentName = `${startAppOptions.action}${startAppOptions.optionalIntentArguments ? ' ' + startAppOptions.optionalIntentArguments : ''}`;

  try {
    const shellOpts = {};

    if (_lodash.default.isInteger(startAppOptions.waitDuration) && startAppOptions.waitDuration >= 0) {
      shellOpts.timeout = startAppOptions.waitDuration;
    }

    const stdout = await this.shell(cmd, shellOpts);

    if (stdout.includes('Error: Activity class') && stdout.includes('does not exist')) {
      if (startAppOptions.retry && !startAppOptions.activity.startsWith('.')) {
        _logger.default.debug(`We tried to start an activity that doesn't exist, ` + `retrying with '.${startAppOptions.activity}' activity name`);

        startAppOptions.activity = `.${startAppOptions.activity}`;
        startAppOptions.retry = false;
        return await this.startApp(startAppOptions);
      }

      throw new Error(`Activity name '${startAppOptions.activity}' used to start the app doesn't ` + `exist or cannot be launched! Make sure it exists and is a launchable activity`);
    } else if (stdout.includes('Error: Intent does not match any activities') || stdout.includes('Error: Activity not started, unable to resolve Intent')) {
      throw new Error(`Activity for intent '${intentName}' used to start the app doesn't ` + `exist or cannot be launched! Make sure it exists and is a launchable activity`);
    } else if (stdout.includes('java.lang.SecurityException')) {
      throw new Error(`The permission to start '${startAppOptions.activity}' activity has been denied.` + `Make sure the activity/package names are correct.`);
    }

    if (startAppOptions.waitActivity) {
      await this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration);
    }

    return stdout;
  } catch (e) {
    const appDescriptor = startAppOptions.pkg || intentName;
    throw new Error(`Cannot start the '${appDescriptor}' application. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting. ` + `Original error: ${e.message}`);
  }
};

apkUtilsMethods.dumpWindows = async function dumpWindows() {
  const apiLevel = await this.getApiLevel();
  const dumpsysArg = apiLevel >= 29 ? 'displays' : 'windows';
  const cmd = ['dumpsys', 'window', dumpsysArg];
  return await this.shell(cmd);
};

apkUtilsMethods.getFocusedPackageAndActivity = async function getFocusedPackageAndActivity() {
  _logger.default.debug('Getting focused package and activity');

  const nullFocusedAppRe = new RegExp(/^\s*mFocusedApp=null/, 'm');
  const focusedAppRe = new RegExp('^\\s*mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}', 'm');
  const nullCurrentFocusRe = new RegExp(/^\s*mCurrentFocus=null/, 'm');
  const currentFocusAppRe = new RegExp('^\\s*mCurrentFocus.+\\{.+\\s([^\\s\\/]+)\\/([^\\s]+)\\b', 'm');

  try {
    const stdout = await this.dumpWindows();

    for (const pattern of [focusedAppRe, currentFocusAppRe]) {
      const match = pattern.exec(stdout);

      if (match) {
        return {
          appPackage: match[1].trim(),
          appActivity: match[2].trim()
        };
      }
    }

    for (const pattern of [nullFocusedAppRe, nullCurrentFocusRe]) {
      if (pattern.exec(stdout)) {
        return {
          appPackage: null,
          appActivity: null
        };
      }
    }

    throw new Error('Could not parse activity from dumpsys');
  } catch (e) {
    throw new Error(`Could not get focusPackageAndActivity. Original error: ${e.message}`);
  }
};

apkUtilsMethods.waitForActivityOrNot = async function waitForActivityOrNot(pkg, activity, waitForStop, waitMs = 20000) {
  if (!pkg || !activity) {
    throw new Error('Package and activity required.');
  }

  _logger.default.debug(`Waiting up to ${waitMs}ms for activity matching pkg: '${pkg}' and ` + `activity: '${activity}' to${waitForStop ? ' not' : ''} be focused`);

  const splitNames = names => names.split(',').map(name => name.trim());

  const allPackages = splitNames(pkg);
  const allActivities = splitNames(activity);
  let possibleActivityNames = [];

  for (let oneActivity of allActivities) {
    if (oneActivity.startsWith('.')) {
      for (let currentPkg of allPackages) {
        possibleActivityNames.push(`${currentPkg}${oneActivity}`.replace(/\.+/g, '.'));
      }
    } else {
      possibleActivityNames.push(oneActivity);
      possibleActivityNames.push(`${pkg}.${oneActivity}`);
    }
  }

  _logger.default.debug(`Possible activities, to be checked: ${possibleActivityNames.map(name => `'${name}'`).join(', ')}`);

  let possibleActivityPatterns = possibleActivityNames.map(possibleActivityName => new RegExp(`^${possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?').replace(/\$/g, '\\$')}$`));
  let retries = parseInt(waitMs / 750, 10) || 1;
  retries = isNaN(retries) ? 30 : retries;
  await (0, _asyncbox.retryInterval)(retries, 750, async () => {
    let {
      appPackage,
      appActivity
    } = await this.getFocusedPackageAndActivity();

    if (appActivity && appPackage) {
      let fullyQualifiedActivity = appActivity.startsWith('.') ? `${appPackage}${appActivity}` : appActivity;

      _logger.default.debug(`Found package: '${appPackage}' and fully qualified activity name : '${fullyQualifiedActivity}'`);

      let foundAct = _lodash.default.includes(allPackages, appPackage) && _lodash.default.findIndex(possibleActivityPatterns, possiblePattern => possiblePattern.test(fullyQualifiedActivity)) !== -1;

      if (!waitForStop && foundAct || waitForStop && !foundAct) {
        return;
      }
    }

    _logger.default.debug('Incorrect package and activity. Retrying.');

    throw new Error(`${possibleActivityNames.map(name => `'${name}'`).join(' or ')} never ${waitForStop ? 'stopped' : 'started'}. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting`);
  });
};

apkUtilsMethods.waitForActivity = async function waitForActivity(pkg, act, waitMs = 20000) {
  await this.waitForActivityOrNot(pkg, act, false, waitMs);
};

apkUtilsMethods.waitForNotActivity = async function waitForNotActivity(pkg, act, waitMs = 20000) {
  await this.waitForActivityOrNot(pkg, act, true, waitMs);
};

apkUtilsMethods.uninstallApk = async function uninstallApk(pkg, options = {}) {
  _logger.default.debug(`Uninstalling ${pkg}`);

  if (!(await this.isAppInstalled(pkg))) {
    _logger.default.info(`${pkg} was not uninstalled, because it was not present on the device`);

    return false;
  }

  const cmd = ['uninstall'];

  if (options.keepData) {
    cmd.push('-k');
  }

  cmd.push(pkg);
  let stdout;

  try {
    await this.forceStop(pkg);
    stdout = (await this.adbExec(cmd, {
      timeout: options.timeout
    })).trim();
  } catch (e) {
    throw new Error(`Unable to uninstall APK. Original error: ${e.message}`);
  }

  _logger.default.debug(`'adb ${cmd.join(' ')}' command output: ${stdout}`);

  if (stdout.includes('Success')) {
    _logger.default.info(`${pkg} was successfully uninstalled`);

    return true;
  }

  _logger.default.info(`${pkg} was not uninstalled`);

  return false;
};

apkUtilsMethods.installFromDevicePath = async function installFromDevicePath(apkPathOnDevice, opts = {}) {
  let stdout = await this.shell(['pm', 'install', '-r', apkPathOnDevice], opts);

  if (stdout.indexOf('Failure') !== -1) {
    throw new Error(`Remote install failed: ${stdout}`);
  }
};

apkUtilsMethods.cacheApk = async function cacheApk(apkPath, options = {}) {
  const appHash = await _appiumSupport.fs.hash(apkPath);

  const remotePath = _path.default.posix.join(REMOTE_CACHE_ROOT, `${appHash}.apk`);

  const remoteCachedFiles = [];

  try {
    const errorMarker = '_ERROR_';
    let lsOutput = null;

    if (this._areExtendedLsOptionsSupported === true || !_lodash.default.isBoolean(this._areExtendedLsOptionsSupported)) {
      lsOutput = await this.shell([`ls -t -1 ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);
    }

    if (!_lodash.default.isString(lsOutput) || lsOutput.includes(errorMarker) && !lsOutput.includes(REMOTE_CACHE_ROOT)) {
      if (!_lodash.default.isBoolean(this._areExtendedLsOptionsSupported)) {
        _logger.default.debug('The current Android API does not support extended ls options. ' + 'Defaulting to no-options call');
      }

      lsOutput = await this.shell([`ls ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);
      this._areExtendedLsOptionsSupported = false;
    } else {
      this._areExtendedLsOptionsSupported = true;
    }

    if (lsOutput.includes(errorMarker)) {
      throw new Error(lsOutput.substring(0, lsOutput.indexOf(errorMarker)));
    }

    remoteCachedFiles.push(...lsOutput.split('\n').map(x => x.trim()).filter(Boolean));
  } catch (e) {
    _logger.default.debug(`Got an error '${e.message.trim()}' while getting the list of files in the cache. ` + `Assuming the cache does not exist yet`);

    await this.shell(['mkdir', '-p', REMOTE_CACHE_ROOT]);
  }

  _logger.default.debug(`The count of applications in the cache: ${remoteCachedFiles.length}`);

  const toHash = remotePath => _path.default.posix.parse(remotePath).name;

  if (remoteCachedFiles.some(x => toHash(x) === appHash)) {
    _logger.default.info(`The application at '${apkPath}' is already cached to '${remotePath}'`);

    this.shell(['touch', '-am', remotePath]).catch(() => {});
  } else {
    _logger.default.info(`Caching the application at '${apkPath}' to '${remotePath}'`);

    const timer = new _appiumSupport.timing.Timer().start();
    await this.push(apkPath, remotePath, {
      timeout: options.timeout
    });
    const {
      size
    } = await _appiumSupport.fs.stat(apkPath);

    _logger.default.info(`The upload of '${_path.default.basename(apkPath)}' (${_appiumSupport.util.toReadableSizeString(size)}) ` + `took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
  }

  if (!this.remoteAppsCache) {
    this.remoteAppsCache = new _lruCache.default({
      max: this.remoteAppsCacheLimit
    });
  }

  _lodash.default.difference(this.remoteAppsCache.keys(), remoteCachedFiles.map(toHash)).forEach(hash => this.remoteAppsCache.del(hash));

  this.remoteAppsCache.set(appHash, remotePath);
  const entriesToCleanup = remoteCachedFiles.map(x => _path.default.posix.join(REMOTE_CACHE_ROOT, x)).filter(x => !this.remoteAppsCache.has(toHash(x))).slice(this.remoteAppsCacheLimit - this.remoteAppsCache.keys().length);

  if (!_lodash.default.isEmpty(entriesToCleanup)) {
    try {
      await this.shell(['rm', '-f', ...entriesToCleanup]);

      _logger.default.debug(`Deleted ${entriesToCleanup.length} expired application cache entries`);
    } catch (e) {
      _logger.default.warn(`Cannot delete ${entriesToCleanup.length} expired application cache entries. ` + `Original error: ${e.message}`);
    }
  }

  return remotePath;
};

apkUtilsMethods.install = async function install(appPath, options = {}) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    return await this.installApks(appPath, options);
  }

  options = _lodash.default.cloneDeep(options);

  _lodash.default.defaults(options, {
    replace: true,
    timeout: this.adbExecTimeout === _helpers.DEFAULT_ADB_EXEC_TIMEOUT ? _helpers.APK_INSTALL_TIMEOUT : this.adbExecTimeout,
    timeoutCapName: 'androidInstallTimeout'
  });

  const installArgs = (0, _helpers.buildInstallArgs)((await this.getApiLevel()), options);
  const installOpts = {
    timeout: options.timeout,
    timeoutCapName: options.timeoutCapName
  };
  const installCmd = ['install', ...installArgs, appPath];

  let performAppInstall = async () => await this.adbExec(installCmd, installOpts);

  let shouldCacheApp = this.remoteAppsCacheLimit > 0;

  if (shouldCacheApp) {
    shouldCacheApp = !(await this.isStreamedInstallSupported());

    if (!shouldCacheApp) {
      _logger.default.info(`The application at '${appPath}' will not be cached, because the device under test has ` + `confirmed the support of streamed installs`);
    }
  }

  if (shouldCacheApp) {
    const clearCache = async () => {
      _logger.default.info(`Clearing the cache at '${REMOTE_CACHE_ROOT}'`);

      await this.shell(['rm', '-rf', `${REMOTE_CACHE_ROOT}/*`]);
    };

    const cacheApp = async () => await this.cacheApk(appPath, {
      timeout: options.timeout
    });

    try {
      const cachedAppPath = await cacheApp();

      performAppInstall = async () => {
        const pmInstallCmdByRemotePath = remotePath => ['pm', 'install', ...installArgs, remotePath];

        const output = await this.shell(pmInstallCmdByRemotePath(cachedAppPath), installOpts);

        if (/\bINSTALL_FAILED_INSUFFICIENT_STORAGE\b/.test(output)) {
          _logger.default.warn(`There was a failure while installing '${appPath}' ` + `because of the insufficient device storage space`);

          await clearCache();

          _logger.default.info(`Consider decreasing the maximum amount of cached apps ` + `(currently ${this.remoteAppsCacheLimit}) to avoid such issues in the future`);

          const newCachedAppPath = await cacheApp();
          return await this.shell(pmInstallCmdByRemotePath(newCachedAppPath), installOpts);
        }

        return output;
      };
    } catch (e) {
      _logger.default.debug(e);

      _logger.default.warn(`There was a failure while caching '${appPath}': ${e.message}`);

      _logger.default.warn('Falling back to the default installation procedure');

      await clearCache();
    }
  }

  try {
    const timer = new _appiumSupport.timing.Timer().start();
    const output = await performAppInstall();

    _logger.default.info(`The installation of '${_path.default.basename(appPath)}' took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

    const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

    _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

    if (/\[INSTALL[A-Z_]+FAILED[A-Z_]+\]/.test(output)) {
      if (this.isTestPackageOnlyError(output)) {
        const msg = `Set 'allowTestPackages' capability to true in order to allow test packages installation.`;

        _logger.default.warn(msg);

        throw new Error(`${output}\n${msg}`);
      }

      throw new Error(output);
    }
  } catch (err) {
    if (!err.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {
      throw err;
    }

    _logger.default.debug(`Application '${appPath}' already installed. Continuing.`);
  }
};

apkUtilsMethods.getApplicationInstallState = async function getApplicationInstallState(appPath, pkg = null) {
  let apkInfo = null;

  if (!pkg) {
    apkInfo = await this.getApkInfo(appPath);
    pkg = apkInfo.name;
  }

  if (!pkg) {
    _logger.default.warn(`Cannot read the package name of '${appPath}'`);

    return this.APP_INSTALL_STATE.UNKNOWN;
  }

  if (!(await this.isAppInstalled(pkg))) {
    _logger.default.debug(`App '${appPath}' is not installed`);

    return this.APP_INSTALL_STATE.NOT_INSTALLED;
  }

  const {
    versionCode: pkgVersionCode,
    versionName: pkgVersionNameStr
  } = await this.getPackageInfo(pkg);

  const pkgVersionName = _semver.default.valid(_semver.default.coerce(pkgVersionNameStr));

  if (!apkInfo) {
    apkInfo = await this.getApkInfo(appPath);
  }

  const {
    versionCode: apkVersionCode,
    versionName: apkVersionNameStr
  } = apkInfo;

  const apkVersionName = _semver.default.valid(_semver.default.coerce(apkVersionNameStr));

  if (!_lodash.default.isInteger(apkVersionCode) || !_lodash.default.isInteger(pkgVersionCode)) {
    _logger.default.warn(`Cannot read version codes of '${appPath}' and/or '${pkg}'`);

    if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
      _logger.default.warn(`Cannot read version names of '${appPath}' and/or '${pkg}'`);

      return this.APP_INSTALL_STATE.UNKNOWN;
    }
  }

  if (_lodash.default.isInteger(apkVersionCode) && _lodash.default.isInteger(pkgVersionCode)) {
    if (pkgVersionCode > apkVersionCode) {
      _logger.default.debug(`The version code of the installed '${pkg}' is greater than the application version code (${pkgVersionCode} > ${apkVersionCode})`);

      return this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED;
    }

    if (pkgVersionCode === apkVersionCode) {
      if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
        _logger.default.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);

        return _semver.default.satisfies(pkgVersionName, `>${apkVersionName}`) ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
      }

      if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
        _logger.default.debug(`The version name of the installed '${pkg}' is equal to application version name (${pkgVersionCode} === ${apkVersionCode})`);

        return this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
      }
    }
  } else if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
    _logger.default.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);

    return _semver.default.satisfies(pkgVersionName, `>${apkVersionName}`) ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
  }

  _logger.default.debug(`The installed '${pkg}' package is older than '${appPath}' (${pkgVersionCode} < ${apkVersionCode} or '${pkgVersionName}' < '${apkVersionName}')'`);

  return this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED;
};

apkUtilsMethods.installOrUpgrade = async function installOrUpgrade(appPath, pkg = null, options = {}) {
  if (!pkg) {
    const apkInfo = await this.getApkInfo(appPath);
    pkg = apkInfo.name;
  }

  const {
    enforceCurrentBuild
  } = options;
  const appState = await this.getApplicationInstallState(appPath, pkg);
  let wasUninstalled = false;

  const uninstallPackage = async () => {
    if (!(await this.uninstallApk(pkg))) {
      throw new Error(`'${pkg}' package cannot be uninstalled`);
    }

    wasUninstalled = true;
  };

  switch (appState) {
    case this.APP_INSTALL_STATE.NOT_INSTALLED:
      _logger.default.debug(`Installing '${appPath}'`);

      await this.install(appPath, Object.assign({}, options, {
        replace: false
      }));
      return {
        appState,
        wasUninstalled
      };

    case this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED:
      if (enforceCurrentBuild) {
        _logger.default.info(`Downgrading '${pkg}' as requested`);

        await uninstallPackage();
        break;
      }

      _logger.default.debug(`There is no need to downgrade '${pkg}'`);

      return {
        appState,
        wasUninstalled
      };

    case this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED:
      if (enforceCurrentBuild) {
        break;
      }

      _logger.default.debug(`There is no need to install/upgrade '${appPath}'`);

      return {
        appState,
        wasUninstalled
      };

    case this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED:
      _logger.default.debug(`Executing upgrade of '${appPath}'`);

      break;

    default:
      _logger.default.debug(`The current install state of '${appPath}' is unknown. Installing anyway`);

      break;
  }

  try {
    await this.install(appPath, Object.assign({}, options, {
      replace: true
    }));
  } catch (err) {
    _logger.default.warn(`Cannot install/upgrade '${pkg}' because of '${err.message}'. Trying full reinstall`);

    await uninstallPackage();
    await this.install(appPath, Object.assign({}, options, {
      replace: false
    }));
  }

  return {
    appState,
    wasUninstalled
  };
};

apkUtilsMethods.extractStringsFromApk = async function extractStringsFromApk(appPath, language, out) {
  _logger.default.debug(`Extracting strings from for language: ${language || 'default'}`);

  const originalAppPath = appPath;

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractLanguageApk(appPath, language);
  }

  let apkStrings = {};
  let configMarker;

  try {
    await this.initAapt();
    configMarker = await (0, _helpers.formatConfigMarker)(async () => {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt, ['d', 'configurations', appPath]);
      return stdout.split(_os.default.EOL);
    }, language, '(default)');
    const {
      stdout
    } = await (0, _teen_process.exec)(this.binaries.aapt, ['d', '--values', 'resources', appPath]);
    apkStrings = (0, _helpers.parseAaptStrings)(stdout, configMarker);
  } catch (e) {
    _logger.default.debug('Cannot extract resources using aapt. Trying aapt2. ' + `Original error: ${e.stderr || e.message}`);

    await this.initAapt2();
    configMarker = await (0, _helpers.formatConfigMarker)(async () => {
      const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
      const {
        stdout
      } = await (0, _teen_process.exec)(apkanalyzerPath, ['resources', 'configs', '--type', 'string', appPath], {
        shell: true,
        cwd: _path.default.dirname(apkanalyzerPath)
      });
      return stdout.split(_os.default.EOL);
    }, language, '');

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt2, ['dump', appPath]);
      apkStrings = (0, _helpers.parseAapt2Strings)(stdout, configMarker);
    } catch (e) {
      throw new Error(`Cannot extract resources from '${originalAppPath}'. ` + `Original error: ${e.message}`);
    }
  }

  if (_lodash.default.isEmpty(apkStrings)) {
    _logger.default.warn(`No strings have been found in '${originalAppPath}' resources ` + `for '${configMarker || 'default'}' configuration`);
  } else {
    _logger.default.info(`Successfully extracted ${_lodash.default.keys(apkStrings).length} strings from ` + `'${originalAppPath}' resources for '${configMarker || 'default'}' configuration`);
  }

  const localPath = _path.default.resolve(out, 'strings.json');

  await (0, _appiumSupport.mkdirp)(out);
  await _appiumSupport.fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8');
  return {
    apkStrings,
    localPath
  };
};

apkUtilsMethods.getDeviceLanguage = async function getDeviceLanguage() {
  let language;

  if ((await this.getApiLevel()) < 23) {
    language = await this.getDeviceSysLanguage();

    if (!language) {
      language = await this.getDeviceProductLanguage();
    }
  } else {
    language = (await this.getDeviceLocale()).split('-')[0];
  }

  return language;
};

apkUtilsMethods.getDeviceCountry = async function getDeviceCountry() {
  let country = await this.getDeviceSysCountry();

  if (!country) {
    country = await this.getDeviceProductCountry();
  }

  return country;
};

apkUtilsMethods.getDeviceLocale = async function getDeviceLocale() {
  let locale = await this.getDeviceSysLocale();

  if (!locale) {
    locale = await this.getDeviceProductLocale();
  }

  return locale;
};

apkUtilsMethods.setDeviceLocale = async function setDeviceLocale(locale) {
  const validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);

  if (!validateLocale.test(locale)) {
    _logger.default.warn(`setDeviceLocale requires the following format: en-US or ja-JP`);

    return;
  }

  let split_locale = locale.split('-');
  await this.setDeviceLanguageCountry(split_locale[0], split_locale[1]);
};

apkUtilsMethods.ensureCurrentLocale = async function ensureCurrentLocale(language, country, script = null) {
  const hasLanguage = _lodash.default.isString(language);

  const hasCountry = _lodash.default.isString(country);

  if (!hasLanguage && !hasCountry) {
    _logger.default.warn('ensureCurrentLocale requires language or country');

    return false;
  }

  language = (language || '').toLowerCase();
  country = (country || '').toLowerCase();
  const apiLevel = await this.getApiLevel();
  return await (0, _asyncbox.retryInterval)(5, 1000, async () => {
    try {
      if (apiLevel < 23) {
        let curLanguage, curCountry;

        if (hasLanguage) {
          curLanguage = (await this.getDeviceLanguage()).toLowerCase();

          if (!hasCountry && language === curLanguage) {
            return true;
          }
        }

        if (hasCountry) {
          curCountry = (await this.getDeviceCountry()).toLowerCase();

          if (!hasLanguage && country === curCountry) {
            return true;
          }
        }

        if (language === curLanguage && country === curCountry) {
          return true;
        }
      } else {
        const curLocale = (await this.getDeviceLocale()).toLowerCase();
        const localeCode = script ? `${language}-${script.toLowerCase()}-${country}` : `${language}-${country}`;

        if (localeCode === curLocale) {
          _logger.default.debug(`Requested locale is equal to current locale: '${curLocale}'`);

          return true;
        }
      }

      return false;
    } catch (err) {
      _logger.default.error(`Unable to check device localization: ${err.message}`);

      _logger.default.debug('Restarting ADB and retrying...');

      await this.restartAdb();
      throw err;
    }
  });
};

apkUtilsMethods.setDeviceLanguageCountry = async function setDeviceLanguageCountry(language, country, script = null) {
  let hasLanguage = language && _lodash.default.isString(language);

  let hasCountry = country && _lodash.default.isString(country);

  if (!hasLanguage || !hasCountry) {
    _logger.default.warn(`setDeviceLanguageCountry requires language and country at least`);

    _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

    return;
  }

  let apiLevel = await this.getApiLevel();
  language = (language || '').toLowerCase();
  country = (country || '').toUpperCase();

  if (apiLevel < 23) {
    let curLanguage = (await this.getDeviceLanguage()).toLowerCase();
    let curCountry = (await this.getDeviceCountry()).toUpperCase();

    if (language !== curLanguage || country !== curCountry) {
      await this.setDeviceSysLocaleViaSettingApp(language, country);
    }
  } else {
    let curLocale = await this.getDeviceLocale();
    const localeCode = script ? `${language}-${script}-${country}` : `${language}-${country}`;

    _logger.default.debug(`Current locale: '${curLocale}'; requested locale: '${localeCode}'`);

    if (localeCode.toLowerCase() !== curLocale.toLowerCase()) {
      await this.setDeviceSysLocaleViaSettingApp(language, country, script);
    }
  }
};

apkUtilsMethods.getApkInfo = async function getApkInfo(appPath) {
  if (!(await _appiumSupport.fs.exists(appPath))) {
    throw new Error(`The file at path ${appPath} does not exist or is not accessible`);
  }

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  try {
    const apkReader = await _adbkitApkreader.default.open(appPath);
    const manifest = await apkReader.readManifest();
    const {
      pkg,
      versionName,
      versionCode
    } = (0, _helpers.parseManifest)(manifest);
    return {
      name: pkg,
      versionCode,
      versionName
    };
  } catch (e) {
    _logger.default.warn(`Error '${e.message}' while getting badging info`);
  }

  return {};
};

apkUtilsMethods.getPackageInfo = async function getPackageInfo(pkg) {
  _logger.default.debug(`Getting package info for '${pkg}'`);

  let result = {
    name: pkg
  };

  try {
    const stdout = await this.shell(['dumpsys', 'package', pkg]);
    const versionNameMatch = new RegExp(/versionName=([\d+.]+)/).exec(stdout);

    if (versionNameMatch) {
      result.versionName = versionNameMatch[1];
    }

    const versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

    if (versionCodeMatch) {
      result.versionCode = parseInt(versionCodeMatch[1], 10);
    }

    return result;
  } catch (err) {
    _logger.default.warn(`Error '${err.message}' while dumping package info`);
  }

  return result;
};

apkUtilsMethods.pullApk = async function pullApk(pkg, tmpDir) {
  const pkgPath = (await this.adbExec(['shell', 'pm', 'path', pkg])).replace('package:', '');

  const tmpApp = _path.default.resolve(tmpDir, `${pkg}.apk`);

  await this.pull(pkgPath, tmpApp);

  _logger.default.debug(`Pulled app for package '${pkg}' to '${tmpApp}'`);

  return tmpApp;
};

var _default = apkUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGstdXRpbHMuanMiXSwibmFtZXMiOlsiYXBrVXRpbHNNZXRob2RzIiwiQUNUSVZJVElFU19UUk9VQkxFU0hPT1RJTkdfTElOSyIsIkFQUF9JTlNUQUxMX1NUQVRFIiwiVU5LTk9XTiIsIk5PVF9JTlNUQUxMRUQiLCJORVdFUl9WRVJTSU9OX0lOU1RBTExFRCIsIlNBTUVfVkVSU0lPTl9JTlNUQUxMRUQiLCJPTERFUl9WRVJTSU9OX0lOU1RBTExFRCIsIlJFTU9URV9DQUNIRV9ST09UIiwiaXNBcHBJbnN0YWxsZWQiLCJwa2ciLCJsb2ciLCJkZWJ1ZyIsImluc3RhbGxlZFBhdHRlcm4iLCJSZWdFeHAiLCJfIiwiZXNjYXBlUmVnRXhwIiwic3Rkb3V0Iiwic2hlbGwiLCJpc0luc3RhbGxlZCIsInRlc3QiLCJlIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhcnRVcmkiLCJ1cmkiLCJhcmdzIiwicmVwbGFjZSIsInJlcyIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJzdGFydEFwcCIsInN0YXJ0QXBwT3B0aW9ucyIsImFjdGl2aXR5IiwiYWN0aW9uIiwiY2xvbmUiLCJkZWZhdWx0cyIsIndhaXRQa2ciLCJ3YWl0Rm9yTGF1bmNoIiwid2FpdEFjdGl2aXR5IiwicmV0cnkiLCJzdG9wQXBwIiwiYXBpTGV2ZWwiLCJnZXRBcGlMZXZlbCIsImNtZCIsImludGVudE5hbWUiLCJvcHRpb25hbEludGVudEFyZ3VtZW50cyIsInNoZWxsT3B0cyIsImlzSW50ZWdlciIsIndhaXREdXJhdGlvbiIsInRpbWVvdXQiLCJzdGFydHNXaXRoIiwid2FpdEZvckFjdGl2aXR5IiwiYXBwRGVzY3JpcHRvciIsImR1bXBXaW5kb3dzIiwiZHVtcHN5c0FyZyIsImdldEZvY3VzZWRQYWNrYWdlQW5kQWN0aXZpdHkiLCJudWxsRm9jdXNlZEFwcFJlIiwiZm9jdXNlZEFwcFJlIiwibnVsbEN1cnJlbnRGb2N1c1JlIiwiY3VycmVudEZvY3VzQXBwUmUiLCJwYXR0ZXJuIiwibWF0Y2giLCJleGVjIiwiYXBwUGFja2FnZSIsInRyaW0iLCJhcHBBY3Rpdml0eSIsIndhaXRGb3JBY3Rpdml0eU9yTm90Iiwid2FpdEZvclN0b3AiLCJ3YWl0TXMiLCJzcGxpdE5hbWVzIiwibmFtZXMiLCJzcGxpdCIsIm1hcCIsIm5hbWUiLCJhbGxQYWNrYWdlcyIsImFsbEFjdGl2aXRpZXMiLCJwb3NzaWJsZUFjdGl2aXR5TmFtZXMiLCJvbmVBY3Rpdml0eSIsImN1cnJlbnRQa2ciLCJwdXNoIiwiam9pbiIsInBvc3NpYmxlQWN0aXZpdHlQYXR0ZXJucyIsInBvc3NpYmxlQWN0aXZpdHlOYW1lIiwicmV0cmllcyIsInBhcnNlSW50IiwiaXNOYU4iLCJmdWxseVF1YWxpZmllZEFjdGl2aXR5IiwiZm91bmRBY3QiLCJmaW5kSW5kZXgiLCJwb3NzaWJsZVBhdHRlcm4iLCJhY3QiLCJ3YWl0Rm9yTm90QWN0aXZpdHkiLCJ1bmluc3RhbGxBcGsiLCJvcHRpb25zIiwiaW5mbyIsImtlZXBEYXRhIiwiZm9yY2VTdG9wIiwiYWRiRXhlYyIsImluc3RhbGxGcm9tRGV2aWNlUGF0aCIsImFwa1BhdGhPbkRldmljZSIsIm9wdHMiLCJpbmRleE9mIiwiY2FjaGVBcGsiLCJhcGtQYXRoIiwiYXBwSGFzaCIsImZzIiwiaGFzaCIsInJlbW90ZVBhdGgiLCJwYXRoIiwicG9zaXgiLCJyZW1vdGVDYWNoZWRGaWxlcyIsImVycm9yTWFya2VyIiwibHNPdXRwdXQiLCJfYXJlRXh0ZW5kZWRMc09wdGlvbnNTdXBwb3J0ZWQiLCJpc0Jvb2xlYW4iLCJpc1N0cmluZyIsInN1YnN0cmluZyIsIngiLCJmaWx0ZXIiLCJCb29sZWFuIiwibGVuZ3RoIiwidG9IYXNoIiwicGFyc2UiLCJzb21lIiwiY2F0Y2giLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwic3RhcnQiLCJzaXplIiwic3RhdCIsImJhc2VuYW1lIiwidXRpbCIsInRvUmVhZGFibGVTaXplU3RyaW5nIiwiZ2V0RHVyYXRpb24iLCJhc01pbGxpU2Vjb25kcyIsInRvRml4ZWQiLCJyZW1vdGVBcHBzQ2FjaGUiLCJMUlUiLCJtYXgiLCJyZW1vdGVBcHBzQ2FjaGVMaW1pdCIsImRpZmZlcmVuY2UiLCJrZXlzIiwiZm9yRWFjaCIsImRlbCIsInNldCIsImVudHJpZXNUb0NsZWFudXAiLCJoYXMiLCJzbGljZSIsImlzRW1wdHkiLCJ3YXJuIiwiaW5zdGFsbCIsImFwcFBhdGgiLCJlbmRzV2l0aCIsIkFQS1NfRVhURU5TSU9OIiwiaW5zdGFsbEFwa3MiLCJjbG9uZURlZXAiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsIkFQS19JTlNUQUxMX1RJTUVPVVQiLCJ0aW1lb3V0Q2FwTmFtZSIsImluc3RhbGxBcmdzIiwiaW5zdGFsbE9wdHMiLCJpbnN0YWxsQ21kIiwicGVyZm9ybUFwcEluc3RhbGwiLCJzaG91bGRDYWNoZUFwcCIsImlzU3RyZWFtZWRJbnN0YWxsU3VwcG9ydGVkIiwiY2xlYXJDYWNoZSIsImNhY2hlQXBwIiwiY2FjaGVkQXBwUGF0aCIsInBtSW5zdGFsbENtZEJ5UmVtb3RlUGF0aCIsIm91dHB1dCIsIm5ld0NhY2hlZEFwcFBhdGgiLCJ0cnVuY2F0ZWRPdXRwdXQiLCJzdWJzdHIiLCJpc1Rlc3RQYWNrYWdlT25seUVycm9yIiwibXNnIiwiZXJyIiwiZ2V0QXBwbGljYXRpb25JbnN0YWxsU3RhdGUiLCJhcGtJbmZvIiwiZ2V0QXBrSW5mbyIsInZlcnNpb25Db2RlIiwicGtnVmVyc2lvbkNvZGUiLCJ2ZXJzaW9uTmFtZSIsInBrZ1ZlcnNpb25OYW1lU3RyIiwiZ2V0UGFja2FnZUluZm8iLCJwa2dWZXJzaW9uTmFtZSIsInNlbXZlciIsInZhbGlkIiwiY29lcmNlIiwiYXBrVmVyc2lvbkNvZGUiLCJhcGtWZXJzaW9uTmFtZVN0ciIsImFwa1ZlcnNpb25OYW1lIiwic2F0aXNmaWVzIiwiaW5zdGFsbE9yVXBncmFkZSIsImVuZm9yY2VDdXJyZW50QnVpbGQiLCJhcHBTdGF0ZSIsIndhc1VuaW5zdGFsbGVkIiwidW5pbnN0YWxsUGFja2FnZSIsIk9iamVjdCIsImFzc2lnbiIsImV4dHJhY3RTdHJpbmdzRnJvbUFwayIsImxhbmd1YWdlIiwib3V0Iiwib3JpZ2luYWxBcHBQYXRoIiwiZXh0cmFjdExhbmd1YWdlQXBrIiwiYXBrU3RyaW5ncyIsImNvbmZpZ01hcmtlciIsImluaXRBYXB0IiwiYmluYXJpZXMiLCJhYXB0Iiwib3MiLCJFT0wiLCJzdGRlcnIiLCJpbml0QWFwdDIiLCJhcGthbmFseXplclBhdGgiLCJjd2QiLCJkaXJuYW1lIiwiYWFwdDIiLCJsb2NhbFBhdGgiLCJyZXNvbHZlIiwid3JpdGVGaWxlIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldERldmljZUxhbmd1YWdlIiwiZ2V0RGV2aWNlU3lzTGFuZ3VhZ2UiLCJnZXREZXZpY2VQcm9kdWN0TGFuZ3VhZ2UiLCJnZXREZXZpY2VMb2NhbGUiLCJnZXREZXZpY2VDb3VudHJ5IiwiY291bnRyeSIsImdldERldmljZVN5c0NvdW50cnkiLCJnZXREZXZpY2VQcm9kdWN0Q291bnRyeSIsImxvY2FsZSIsImdldERldmljZVN5c0xvY2FsZSIsImdldERldmljZVByb2R1Y3RMb2NhbGUiLCJzZXREZXZpY2VMb2NhbGUiLCJ2YWxpZGF0ZUxvY2FsZSIsInNwbGl0X2xvY2FsZSIsInNldERldmljZUxhbmd1YWdlQ291bnRyeSIsImVuc3VyZUN1cnJlbnRMb2NhbGUiLCJzY3JpcHQiLCJoYXNMYW5ndWFnZSIsImhhc0NvdW50cnkiLCJjdXJMYW5ndWFnZSIsImN1ckNvdW50cnkiLCJjdXJMb2NhbGUiLCJsb2NhbGVDb2RlIiwiZXJyb3IiLCJyZXN0YXJ0QWRiIiwidG9VcHBlckNhc2UiLCJzZXREZXZpY2VTeXNMb2NhbGVWaWFTZXR0aW5nQXBwIiwiZXhpc3RzIiwiZXh0cmFjdEJhc2VBcGsiLCJhcGtSZWFkZXIiLCJBcGtSZWFkZXIiLCJvcGVuIiwibWFuaWZlc3QiLCJyZWFkTWFuaWZlc3QiLCJyZXN1bHQiLCJ2ZXJzaW9uTmFtZU1hdGNoIiwidmVyc2lvbkNvZGVNYXRjaCIsInB1bGxBcGsi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RCxRQUFNQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUt0SyxPQUFMLENBQWEsQ0FBQyxPQUFELEVBQVUsSUFBVixFQUFnQixNQUFoQixFQUF3QnhGLEdBQXhCLENBQWIsQ0FBUCxFQUFtRGlCLE9BQW5ELENBQTJELFVBQTNELEVBQXVFLEVBQXZFLENBQWhCOztBQUNBLFFBQU04TyxNQUFNLEdBQUc1SixjQUFLZ0gsT0FBTCxDQUFhMEMsTUFBYixFQUFzQixHQUFFN1AsR0FBSSxNQUE1QixDQUFmOztBQUNBLFFBQU0sS0FBS2dRLElBQUwsQ0FBVUYsT0FBVixFQUFtQkMsTUFBbkIsQ0FBTjs7QUFDQTlQLGtCQUFJQyxLQUFKLENBQVcsMkJBQTBCRixHQUFJLFNBQVErUCxNQUFPLEdBQXhEOztBQUNBLFNBQU9BLE1BQVA7QUFDRCxDQU5EOztlQVNlelEsZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGJ1aWxkU3RhcnRDbWQsIEFQS1NfRVhURU5TSU9OLCBidWlsZEluc3RhbGxBcmdzLFxuICBBUEtfSU5TVEFMTF9USU1FT1VULCBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsIGdldEFwa2FuYWx5emVyRm9yT3MsXG4gIHBhcnNlTWFuaWZlc3QsIHBhcnNlQWFwdFN0cmluZ3MsIHBhcnNlQWFwdDJTdHJpbmdzLCBmb3JtYXRDb25maWdNYXJrZXIgfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGZzLCB1dGlsLCBta2RpcnAsIHRpbWluZyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQgQXBrUmVhZGVyIGZyb20gJ2FkYmtpdC1hcGtyZWFkZXInO1xuXG5cbmxldCBhcGtVdGlsc01ldGhvZHMgPSB7fTtcblxuY29uc3QgQUNUSVZJVElFU19UUk9VQkxFU0hPT1RJTkdfTElOSyA9XG4gICdodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9ibG9iL21hc3Rlci9kb2NzL2VuL3dyaXRpbmctcnVubmluZy1hcHBpdW0vYW5kcm9pZC9hY3Rpdml0eS1zdGFydHVwLm1kJztcbmFwa1V0aWxzTWV0aG9kcy5BUFBfSU5TVEFMTF9TVEFURSA9IHtcbiAgVU5LTk9XTjogJ3Vua25vd24nLFxuICBOT1RfSU5TVEFMTEVEOiAnbm90SW5zdGFsbGVkJyxcbiAgTkVXRVJfVkVSU0lPTl9JTlNUQUxMRUQ6ICduZXdlclZlcnNpb25JbnN0YWxsZWQnLFxuICBTQU1FX1ZFUlNJT05fSU5TVEFMTEVEOiAnc2FtZVZlcnNpb25JbnN0YWxsZWQnLFxuICBPTERFUl9WRVJTSU9OX0lOU1RBTExFRDogJ29sZGVyVmVyc2lvbkluc3RhbGxlZCcsXG59O1xuY29uc3QgUkVNT1RFX0NBQ0hFX1JPT1QgPSAnL2RhdGEvbG9jYWwvdG1wL2FwcGl1bV9jYWNoZSc7XG5cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBwYXJ0aWN1bGFyIHBhY2thZ2UgaXMgcHJlc2VudCBvbiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFja2FnZSBpcyBpbnN0YWxsZWQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGRldGVjdGluZyBhcHBsaWNhdGlvbiBzdGF0ZVxuICovXG5hcGtVdGlsc01ldGhvZHMuaXNBcHBJbnN0YWxsZWQgPSBhc3luYyBmdW5jdGlvbiBpc0FwcEluc3RhbGxlZCAocGtnKSB7XG4gIGxvZy5kZWJ1ZyhgR2V0dGluZyBpbnN0YWxsIHN0YXR1cyBmb3IgJHtwa2d9YCk7XG4gIGNvbnN0IGluc3RhbGxlZFBhdHRlcm4gPSBuZXcgUmVnRXhwKGBeXFxcXHMqUGFja2FnZVxcXFxzK1xcXFxbJHtfLmVzY2FwZVJlZ0V4cChwa2cpfVxcXFxdW146XSs6JGAsICdtJyk7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChbJ2R1bXBzeXMnLCAncGFja2FnZScsIHBrZ10pO1xuICAgIGNvbnN0IGlzSW5zdGFsbGVkID0gaW5zdGFsbGVkUGF0dGVybi50ZXN0KHN0ZG91dCk7XG4gICAgbG9nLmRlYnVnKGAnJHtwa2d9JyBpcyR7IWlzSW5zdGFsbGVkID8gJyBub3QnIDogJyd9IGluc3RhbGxlZGApO1xuICAgIHJldHVybiBpc0luc3RhbGxlZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZmluZGluZyBpZiAnJHtwa2d9JyBpcyBpbnN0YWxsZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGFydCB0aGUgcGFydGljdWxhciBVUkkgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgLSBUaGUgbmFtZSBvZiBVUkkgdG8gc3RhcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gc3RhcnQgdGhlIFVSSSB3aXRoLlxuICovXG5hcGtVdGlsc01ldGhvZHMuc3RhcnRVcmkgPSBhc3luYyBmdW5jdGlvbiBzdGFydFVyaSAodXJpLCBwa2cpIHtcbiAgaWYgKCF1cmkgfHwgIXBrZykge1xuICAgIHRocm93IG5ldyBFcnJvcignVVJJIGFuZCBwYWNrYWdlIGFyZ3VtZW50cyBhcmUgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGNvbnN0IGFyZ3MgPSBbXG4gICAgJ2FtJywgJ3N0YXJ0JyxcbiAgICAnLVcnLFxuICAgICctYScsICdhbmRyb2lkLmludGVudC5hY3Rpb24uVklFVycsXG4gICAgJy1kJywgdXJpLnJlcGxhY2UoLyYvZywgJ1xcXFwmJyksXG4gICAgcGtnLFxuICBdO1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuc2hlbGwoYXJncyk7XG4gICAgaWYgKHJlcy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd1bmFibGUgdG8gcmVzb2x2ZSBpbnRlbnQnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBhdHRlbXB0aW5nIHRvIHN0YXJ0IFVSSS4gT3JpZ2luYWwgZXJyb3I6ICR7ZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGFydEFwcE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uIHBhY2thZ2VcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYWN0aXZpdHkgLSBUaGUgbmFtZSBvZiB0aGUgbWFpbiBhcHBsaWNhdGlvbiBhY3Rpdml0eS5cbiAqIFRoaXMgb3IgYWN0aW9uIGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gbGF1bmNoIGFuIGFwcC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYWN0aW9uIC0gVGhlIG5hbWUgb2YgdGhlIGludGVudCBhY3Rpb24gdGhhdCB3aWxsIGxhdW5jaCB0aGUgcmVxdWlyZWQgYXBwLlxuICogVGhpcyBvciBhY3Rpdml0eSBpcyByZXF1aXJlZCBpbiBvcmRlciB0byBiZSBhYmxlIHRvIGxhdW5jaCBhbiBhcHAuXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSByZXRyeSBbdHJ1ZV0gLSBJZiB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWBcbiAqIGFuZCB0aGUgYWN0aXZpdHkgbmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoICcuJyB0aGVuIHRoZSBtZXRob2RcbiAqIHdpbGwgdHJ5IHRvIGFkZCB0aGUgbWlzc2luZyBkb3QgYW5kIHN0YXJ0IHRoZSBhY3Rpdml0eSBvbmNlIG1vcmVcbiAqIGlmIHRoZSBmaXJzdCBzdGFydHVwIHRyeSBmYWlscy5cbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHN0b3BBcHAgW3RydWVdIC0gU2V0IGl0IHRvIGB0cnVlYCBpbiBvcmRlciB0byBmb3JjZWZ1bGx5XG4gKiBzdG9wIHRoZSBhY3Rpdml0eSBpZiBpdCBpcyBhbHJlYWR5IHJ1bm5pbmcuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHdhaXRQa2cgLSBUaGUgbmFtZSBvZiB0aGUgcGFja2FnZSB0byB3YWl0IHRvIG9uXG4gKiBzdGFydHVwICh0aGlzIG9ubHkgbWFrZXMgc2Vuc2UgaWYgdGhpcyBuYW1lIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBvbmUsIHdoaWNoIGlzIHNldCBhcyBgcGtnYClcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gd2FpdEFjdGl2aXR5IC0gVGhlIG5hbWUgb2YgdGhlIGFjdGl2aXR5IHRvIHdhaXQgdG8gb25cbiAqIHN0YXJ0dXAgKHRoaXMgb25seSBtYWtlcyBzZW5zZSBpZiB0aGlzIG5hbWUgaXMgZGlmZmVyZW50IGZyb20gdGhlIG9uZSwgd2hpY2ggaXMgc2V0IGFzIGBhY3Rpdml0eWApXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHdhaXREdXJhdGlvbiAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWwgdGhlXG4gKiBgd2FpdEFjdGl2aXR5YCBpcyBmb2N1c2VkXG4gKiBAcHJvcGVydHkgez9zdHJpbmd8bnVtYmVyfSB1c2VyIC0gVGhlIG51bWJlciBvZiB0aGUgdXNlciBwcm9maWxlIHRvIHN0YXJ0XG4gKiB0aGUgZ2l2ZW4gYWN0aXZpdHkgd2l0aC4gVGhlIGRlZmF1bHQgT1MgdXNlciBwcm9maWxlICh1c3VhbGx5IHplcm8pIGlzIHVzZWRcbiAqIHdoZW4gdGhpcyBwcm9wZXJ0eSBpcyB1bnNldFxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gd2FpdEZvckxhdW5jaCBbdHJ1ZV0gLSBpZiBgZmFsc2VgIHRoZW4gYWRiIHdvbid0IHdhaXRcbiAqIGZvciB0aGUgc3RhcnRlZCBhY3Rpdml0eSB0byByZXR1cm4gdGhlIGNvbnRyb2xcbiAqL1xuXG4vKipcbiAqIFN0YXJ0IHRoZSBwYXJ0aWN1bGFyIHBhY2thZ2UvYWN0aXZpdHkgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhcnRBcHBPcHRpb25zfSBzdGFydEFwcE9wdGlvbnMgW3t9XSAtIFN0YXJ0dXAgb3B0aW9ucyBtYXBwaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgb3V0cHV0IG9mIHRoZSBjb3JyZXNwb25kaW5nIGFkYiBjb21tYW5kLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIGFuIGVycm9yIHdoaWxlIGV4ZWN1dGluZyB0aGUgYWN0aXZpdHlcbiAqL1xuYXBrVXRpbHNNZXRob2RzLnN0YXJ0QXBwID0gYXN5bmMgZnVuY3Rpb24gc3RhcnRBcHAgKHN0YXJ0QXBwT3B0aW9ucyA9IHt9KSB7XG4gIGlmICghc3RhcnRBcHBPcHRpb25zLnBrZyB8fCAhKHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSB8fCBzdGFydEFwcE9wdGlvbnMuYWN0aW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncGtnLCBhbmQgYWN0aXZpdHkgb3IgaW50ZW50IGFjdGlvbiwgYXJlIHJlcXVpcmVkIHRvIHN0YXJ0IGFuIGFwcGxpY2F0aW9uJyk7XG4gIH1cblxuICBzdGFydEFwcE9wdGlvbnMgPSBfLmNsb25lKHN0YXJ0QXBwT3B0aW9ucyk7XG4gIGlmIChzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHkpIHtcbiAgICBzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHkgPSBzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHkucmVwbGFjZSgnJCcsICdcXFxcJCcpO1xuICB9XG4gIC8vIGluaXRpYWxpemluZyBkZWZhdWx0c1xuICBfLmRlZmF1bHRzKHN0YXJ0QXBwT3B0aW9ucywge1xuICAgIHdhaXRQa2c6IHN0YXJ0QXBwT3B0aW9ucy5wa2csXG4gICAgd2FpdEZvckxhdW5jaDogdHJ1ZSxcbiAgICB3YWl0QWN0aXZpdHk6IGZhbHNlLFxuICAgIHJldHJ5OiB0cnVlLFxuICAgIHN0b3BBcHA6IHRydWVcbiAgfSk7XG4gIC8vIHByZXZlbnRpbmcgbnVsbCB3YWl0cGtnXG4gIHN0YXJ0QXBwT3B0aW9ucy53YWl0UGtnID0gc3RhcnRBcHBPcHRpb25zLndhaXRQa2cgfHwgc3RhcnRBcHBPcHRpb25zLnBrZztcblxuICBjb25zdCBhcGlMZXZlbCA9IGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKTtcbiAgY29uc3QgY21kID0gYnVpbGRTdGFydENtZChzdGFydEFwcE9wdGlvbnMsIGFwaUxldmVsKTtcbiAgY29uc3QgaW50ZW50TmFtZSA9IGAke3N0YXJ0QXBwT3B0aW9ucy5hY3Rpb259JHtzdGFydEFwcE9wdGlvbnMub3B0aW9uYWxJbnRlbnRBcmd1bWVudHMgPyAnICcgKyBzdGFydEFwcE9wdGlvbnMub3B0aW9uYWxJbnRlbnRBcmd1bWVudHMgOiAnJ31gO1xuICB0cnkge1xuICAgIGNvbnN0IHNoZWxsT3B0cyA9IHt9O1xuICAgIGlmIChfLmlzSW50ZWdlcihzdGFydEFwcE9wdGlvbnMud2FpdER1cmF0aW9uKSAmJiBzdGFydEFwcE9wdGlvbnMud2FpdER1cmF0aW9uID49IDApIHtcbiAgICAgIHNoZWxsT3B0cy50aW1lb3V0ID0gc3RhcnRBcHBPcHRpb25zLndhaXREdXJhdGlvbjtcbiAgICB9XG4gICAgY29uc3Qgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChjbWQsIHNoZWxsT3B0cyk7XG4gICAgaWYgKHN0ZG91dC5pbmNsdWRlcygnRXJyb3I6IEFjdGl2aXR5IGNsYXNzJykgJiYgc3Rkb3V0LmluY2x1ZGVzKCdkb2VzIG5vdCBleGlzdCcpKSB7XG4gICAgICBpZiAoc3RhcnRBcHBPcHRpb25zLnJldHJ5ICYmICFzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHkuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgV2UgdHJpZWQgdG8gc3RhcnQgYW4gYWN0aXZpdHkgdGhhdCBkb2Vzbid0IGV4aXN0LCBgICtcbiAgICAgICAgICAgICAgICAgIGByZXRyeWluZyB3aXRoICcuJHtzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHl9JyBhY3Rpdml0eSBuYW1lYCk7XG4gICAgICAgIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSA9IGAuJHtzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHl9YDtcbiAgICAgICAgc3RhcnRBcHBPcHRpb25zLnJldHJ5ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN0YXJ0QXBwKHN0YXJ0QXBwT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFjdGl2aXR5IG5hbWUgJyR7c3RhcnRBcHBPcHRpb25zLmFjdGl2aXR5fScgdXNlZCB0byBzdGFydCB0aGUgYXBwIGRvZXNuJ3QgYCArXG4gICAgICAgICAgICAgICAgICAgICAgYGV4aXN0IG9yIGNhbm5vdCBiZSBsYXVuY2hlZCEgTWFrZSBzdXJlIGl0IGV4aXN0cyBhbmQgaXMgYSBsYXVuY2hhYmxlIGFjdGl2aXR5YCk7XG4gICAgfSBlbHNlIGlmIChzdGRvdXQuaW5jbHVkZXMoJ0Vycm9yOiBJbnRlbnQgZG9lcyBub3QgbWF0Y2ggYW55IGFjdGl2aXRpZXMnKSB8fCBzdGRvdXQuaW5jbHVkZXMoJ0Vycm9yOiBBY3Rpdml0eSBub3Qgc3RhcnRlZCwgdW5hYmxlIHRvIHJlc29sdmUgSW50ZW50JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQWN0aXZpdHkgZm9yIGludGVudCAnJHtpbnRlbnROYW1lfScgdXNlZCB0byBzdGFydCB0aGUgYXBwIGRvZXNuJ3QgYCArXG4gICAgICAgICAgICAgICAgICAgICAgYGV4aXN0IG9yIGNhbm5vdCBiZSBsYXVuY2hlZCEgTWFrZSBzdXJlIGl0IGV4aXN0cyBhbmQgaXMgYSBsYXVuY2hhYmxlIGFjdGl2aXR5YCk7XG4gICAgfSBlbHNlIGlmIChzdGRvdXQuaW5jbHVkZXMoJ2phdmEubGFuZy5TZWN1cml0eUV4Y2VwdGlvbicpKSB7XG4gICAgICAvLyBpZiB0aGUgYXBwIGlzIGRpc2FibGVkIG9uIGEgcmVhbCBkZXZpY2UgaXQgd2lsbCB0aHJvdyBhIHNlY3VyaXR5IGV4Y2VwdGlvblxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcGVybWlzc2lvbiB0byBzdGFydCAnJHtzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHl9JyBhY3Rpdml0eSBoYXMgYmVlbiBkZW5pZWQuYCArXG4gICAgICAgICAgICAgICAgICAgICAgYE1ha2Ugc3VyZSB0aGUgYWN0aXZpdHkvcGFja2FnZSBuYW1lcyBhcmUgY29ycmVjdC5gKTtcbiAgICB9XG4gICAgaWYgKHN0YXJ0QXBwT3B0aW9ucy53YWl0QWN0aXZpdHkpIHtcbiAgICAgIGF3YWl0IHRoaXMud2FpdEZvckFjdGl2aXR5KHN0YXJ0QXBwT3B0aW9ucy53YWl0UGtnLCBzdGFydEFwcE9wdGlvbnMud2FpdEFjdGl2aXR5LCBzdGFydEFwcE9wdGlvbnMud2FpdER1cmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZG91dDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IGFwcERlc2NyaXB0b3IgPSBzdGFydEFwcE9wdGlvbnMucGtnIHx8IGludGVudE5hbWU7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc3RhcnQgdGhlICcke2FwcERlc2NyaXB0b3J9JyBhcHBsaWNhdGlvbi4gYCArXG4gICAgICBgVmlzaXQgJHtBQ1RJVklUSUVTX1RST1VCTEVTSE9PVElOR19MSU5LfSBmb3IgdHJvdWJsZXNob290aW5nLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0byBjYWxsIGBhZGIgZHVtcHN5cyB3aW5kb3cgd2luZG93cy9kaXNwbGF5c2BcbiAqL1xuYXBrVXRpbHNNZXRob2RzLmR1bXBXaW5kb3dzID0gYXN5bmMgZnVuY3Rpb24gZHVtcFdpbmRvd3MgKCkge1xuICBjb25zdCBhcGlMZXZlbCA9IGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKTtcblxuICAvLyBXaXRoIHZlcnNpb24gMjksIEFuZHJvaWQgY2hhbmdlZCB0aGUgZHVtcHN5cyBzeW50YXhcbiAgY29uc3QgZHVtcHN5c0FyZyA9IGFwaUxldmVsID49IDI5ID8gJ2Rpc3BsYXlzJyA6ICd3aW5kb3dzJztcbiAgY29uc3QgY21kID0gWydkdW1wc3lzJywgJ3dpbmRvdycsIGR1bXBzeXNBcmddO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLnNoZWxsKGNtZCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBhY2thZ2VBY3Rpdml0eUluZm9cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYXBwUGFja2FnZSAtIFRoZSBuYW1lIG9mIGFwcGxpY2F0aW9uIHBhY2thZ2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSAnY29tLmFjbWUuYXBwJy5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYXBwQWN0aXZpdHkgLSBUaGUgbmFtZSBvZiBtYWluIGFwcGxpY2F0aW9uIGFjdGl2aXR5LlxuICovXG5cbi8qKlxuICogR2V0IHRoZSBuYW1lIG9mIGN1cnJlbnRseSBmb2N1c2VkIHBhY2thZ2UgYW5kIGFjdGl2aXR5LlxuICpcbiAqIEByZXR1cm4ge1BhY2thZ2VBY3Rpdml0eUluZm99IFRoZSBtYXBwaW5nLCB3aGVyZSBwcm9wZXJ0eSBuYW1lcyBhcmUgJ2FwcFBhY2thZ2UnIGFuZCAnYXBwQWN0aXZpdHknLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIGFuIGVycm9yIHdoaWxlIHBhcnNpbmcgdGhlIGRhdGEuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gZ2V0Rm9jdXNlZFBhY2thZ2VBbmRBY3Rpdml0eSAoKSB7XG4gIGxvZy5kZWJ1ZygnR2V0dGluZyBmb2N1c2VkIHBhY2thZ2UgYW5kIGFjdGl2aXR5Jyk7XG4gIGNvbnN0IG51bGxGb2N1c2VkQXBwUmUgPSBuZXcgUmVnRXhwKC9eXFxzKm1Gb2N1c2VkQXBwPW51bGwvLCAnbScpO1xuICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3haOHZGNy8xXG4gIGNvbnN0IGZvY3VzZWRBcHBSZSA9IG5ldyBSZWdFeHAoJ15cXFxccyptRm9jdXNlZEFwcC4rUmVjb3JkXFxcXHsuKlxcXFxzKFteXFxcXHNcXFxcL1xcXFx9XSspJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFwvKFteXFxcXHNcXFxcL1xcXFx9XFxcXCxdKylcXFxcLD8oXFxcXHNbXlxcXFxzXFxcXC9cXFxcfV0rKSpcXFxcfScsICdtJyk7XG4gIGNvbnN0IG51bGxDdXJyZW50Rm9jdXNSZSA9IG5ldyBSZWdFeHAoL15cXHMqbUN1cnJlbnRGb2N1cz1udWxsLywgJ20nKTtcbiAgY29uc3QgY3VycmVudEZvY3VzQXBwUmUgPSBuZXcgUmVnRXhwKCdeXFxcXHMqbUN1cnJlbnRGb2N1cy4rXFxcXHsuK1xcXFxzKFteXFxcXHNcXFxcL10rKVxcXFwvKFteXFxcXHNdKylcXFxcYicsICdtJyk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzdGRvdXQgPSBhd2FpdCB0aGlzLmR1bXBXaW5kb3dzKCk7XG4gICAgLy8gVGhlIG9yZGVyIG1hdHRlcnMgaGVyZVxuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBbZm9jdXNlZEFwcFJlLCBjdXJyZW50Rm9jdXNBcHBSZV0pIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKHN0ZG91dCk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBQYWNrYWdlOiBtYXRjaFsxXS50cmltKCksXG4gICAgICAgICAgYXBwQWN0aXZpdHk6IG1hdGNoWzJdLnRyaW0oKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBbbnVsbEZvY3VzZWRBcHBSZSwgbnVsbEN1cnJlbnRGb2N1c1JlXSkge1xuICAgICAgaWYgKHBhdHRlcm4uZXhlYyhzdGRvdXQpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYXBwUGFja2FnZTogbnVsbCxcbiAgICAgICAgICBhcHBBY3Rpdml0eTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHBhcnNlIGFjdGl2aXR5IGZyb20gZHVtcHN5cycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZ2V0IGZvY3VzUGFja2FnZUFuZEFjdGl2aXR5LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FpdCBmb3IgdGhlIGdpdmVuIGFjdGl2aXR5IHRvIGJlIGZvY3VzZWQvbm9uLWZvY3VzZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIHdhaXQgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGFjdGl2aXR5IC0gVGhlIG5hbWUgb2YgdGhlIGFjdGl2aXR5LCBiZWxvbmdpbmcgdG8gdGhhdCBwYWNrYWdlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHdhaXRGb3JTdG9wIC0gV2hldGhlciB0byB3YWl0IHVudGlsIHRoZSBhY3Rpdml0eSBpcyBmb2N1c2VkICh0cnVlKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGlzIG5vdCBmb2N1c2VkIChmYWxzZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdE1zIFsyMDAwMF0gLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHRpbWVvdXQgb2NjdXJzLlxuICogQHRocm93cyB7ZXJyb3J9IElmIHRpbWVvdXQgaGFwcGVucy5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLndhaXRGb3JBY3Rpdml0eU9yTm90ID0gYXN5bmMgZnVuY3Rpb24gd2FpdEZvckFjdGl2aXR5T3JOb3QgKHBrZywgYWN0aXZpdHksIHdhaXRGb3JTdG9wLCB3YWl0TXMgPSAyMDAwMCkge1xuICBpZiAoIXBrZyB8fCAhYWN0aXZpdHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhY2thZ2UgYW5kIGFjdGl2aXR5IHJlcXVpcmVkLicpO1xuICB9XG4gIGxvZy5kZWJ1ZyhgV2FpdGluZyB1cCB0byAke3dhaXRNc31tcyBmb3IgYWN0aXZpdHkgbWF0Y2hpbmcgcGtnOiAnJHtwa2d9JyBhbmQgYCArXG4gICAgICAgICAgICBgYWN0aXZpdHk6ICcke2FjdGl2aXR5fScgdG8ke3dhaXRGb3JTdG9wID8gJyBub3QnIDogJyd9IGJlIGZvY3VzZWRgKTtcblxuICBjb25zdCBzcGxpdE5hbWVzID0gKG5hbWVzKSA9PiBuYW1lcy5zcGxpdCgnLCcpLm1hcCgobmFtZSkgPT4gbmFtZS50cmltKCkpO1xuXG4gIGNvbnN0IGFsbFBhY2thZ2VzID0gc3BsaXROYW1lcyhwa2cpO1xuICBjb25zdCBhbGxBY3Rpdml0aWVzID0gc3BsaXROYW1lcyhhY3Rpdml0eSk7XG5cbiAgbGV0IHBvc3NpYmxlQWN0aXZpdHlOYW1lcyA9IFtdO1xuICBmb3IgKGxldCBvbmVBY3Rpdml0eSBvZiBhbGxBY3Rpdml0aWVzKSB7XG4gICAgaWYgKG9uZUFjdGl2aXR5LnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgLy8gYWRkIHRoZSBwYWNrYWdlIG5hbWUgaWYgYWN0aXZpdHkgaXMgbm90IGZ1bGwgcXVhbGlmaWVkXG4gICAgICBmb3IgKGxldCBjdXJyZW50UGtnIG9mIGFsbFBhY2thZ2VzKSB7XG4gICAgICAgIHBvc3NpYmxlQWN0aXZpdHlOYW1lcy5wdXNoKGAke2N1cnJlbnRQa2d9JHtvbmVBY3Rpdml0eX1gLnJlcGxhY2UoL1xcLisvZywgJy4nKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFjY2VwdCBmdWxseSBxdWFsaWZpZWQgYWN0aXZpdHkgbmFtZS5cbiAgICAgIHBvc3NpYmxlQWN0aXZpdHlOYW1lcy5wdXNoKG9uZUFjdGl2aXR5KTtcbiAgICAgIHBvc3NpYmxlQWN0aXZpdHlOYW1lcy5wdXNoKGAke3BrZ30uJHtvbmVBY3Rpdml0eX1gKTtcbiAgICB9XG4gIH1cbiAgbG9nLmRlYnVnKGBQb3NzaWJsZSBhY3Rpdml0aWVzLCB0byBiZSBjaGVja2VkOiAke3Bvc3NpYmxlQWN0aXZpdHlOYW1lcy5tYXAoKG5hbWUpID0+IGAnJHtuYW1lfSdgKS5qb2luKCcsICcpfWApO1xuXG4gIGxldCBwb3NzaWJsZUFjdGl2aXR5UGF0dGVybnMgPSBwb3NzaWJsZUFjdGl2aXR5TmFtZXMubWFwKChwb3NzaWJsZUFjdGl2aXR5TmFtZSkgPT5cbiAgICBuZXcgUmVnRXhwKGBeJHtwb3NzaWJsZUFjdGl2aXR5TmFtZS5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJykucmVwbGFjZSgvXFwqL2csICcuKj8nKS5yZXBsYWNlKC9cXCQvZywgJ1xcXFwkJyl9JGApXG4gICk7XG5cbiAgLy8gZmlndXJlIG91dCB0aGUgbnVtYmVyIG9mIHJldHJpZXMuIFRyeSBvbmNlIGlmIHdhaXRNcyBpcyBsZXNzIHRoYXQgNzUwXG4gIC8vIDMwIHRpbWVzIGlmIHBhcnNpbmcgaXMgbm90IHBvc3NpYmxlXG4gIGxldCByZXRyaWVzID0gcGFyc2VJbnQod2FpdE1zIC8gNzUwLCAxMCkgfHwgMTtcbiAgcmV0cmllcyA9IGlzTmFOKHJldHJpZXMpID8gMzAgOiByZXRyaWVzO1xuICBhd2FpdCByZXRyeUludGVydmFsKHJldHJpZXMsIDc1MCwgYXN5bmMgKCkgPT4ge1xuICAgIGxldCB7YXBwUGFja2FnZSwgYXBwQWN0aXZpdHl9ID0gYXdhaXQgdGhpcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gICAgaWYgKGFwcEFjdGl2aXR5ICYmIGFwcFBhY2thZ2UpIHtcbiAgICAgIGxldCBmdWxseVF1YWxpZmllZEFjdGl2aXR5ID0gYXBwQWN0aXZpdHkuc3RhcnRzV2l0aCgnLicpID8gYCR7YXBwUGFja2FnZX0ke2FwcEFjdGl2aXR5fWAgOiBhcHBBY3Rpdml0eTtcbiAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgcGFja2FnZTogJyR7YXBwUGFja2FnZX0nIGFuZCBmdWxseSBxdWFsaWZpZWQgYWN0aXZpdHkgbmFtZSA6ICcke2Z1bGx5UXVhbGlmaWVkQWN0aXZpdHl9J2ApO1xuICAgICAgbGV0IGZvdW5kQWN0ID0gKF8uaW5jbHVkZXMoYWxsUGFja2FnZXMsIGFwcFBhY2thZ2UpICYmXG4gICAgICAgICAgICAgICAgICAgICAgXy5maW5kSW5kZXgocG9zc2libGVBY3Rpdml0eVBhdHRlcm5zLCAocG9zc2libGVQYXR0ZXJuKSA9PiBwb3NzaWJsZVBhdHRlcm4udGVzdChmdWxseVF1YWxpZmllZEFjdGl2aXR5KSkgIT09IC0xKTtcbiAgICAgIGlmICgoIXdhaXRGb3JTdG9wICYmIGZvdW5kQWN0KSB8fCAod2FpdEZvclN0b3AgJiYgIWZvdW5kQWN0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGxvZy5kZWJ1ZygnSW5jb3JyZWN0IHBhY2thZ2UgYW5kIGFjdGl2aXR5LiBSZXRyeWluZy4nKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cG9zc2libGVBY3Rpdml0eU5hbWVzLm1hcCgobmFtZSkgPT4gYCcke25hbWV9J2ApLmpvaW4oJyBvciAnKX0gbmV2ZXIgJHt3YWl0Rm9yU3RvcCA/ICdzdG9wcGVkJyA6ICdzdGFydGVkJ30uIGAgK1xuICAgICAgYFZpc2l0ICR7QUNUSVZJVElFU19UUk9VQkxFU0hPT1RJTkdfTElOS30gZm9yIHRyb3VibGVzaG9vdGluZ2ApO1xuICB9KTtcbn07XG5cbi8qKlxuICogV2FpdCBmb3IgdGhlIGdpdmVuIGFjdGl2aXR5IHRvIGJlIGZvY3VzZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWN0aXZpdHkgLSBUaGUgbmFtZSBvZiB0aGUgYWN0aXZpdHksIGJlbG9uZ2luZyB0byB0aGF0IHBhY2thZ2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB3YWl0IGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0TXMgWzIwMDAwXSAtIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgdGltZW91dCBvY2N1cnMuXG4gKiBAdGhyb3dzIHtlcnJvcn0gSWYgdGltZW91dCBoYXBwZW5zLlxuICovXG5hcGtVdGlsc01ldGhvZHMud2FpdEZvckFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gd2FpdEZvckFjdGl2aXR5IChwa2csIGFjdCwgd2FpdE1zID0gMjAwMDApIHtcbiAgYXdhaXQgdGhpcy53YWl0Rm9yQWN0aXZpdHlPck5vdChwa2csIGFjdCwgZmFsc2UsIHdhaXRNcyk7XG59O1xuXG4vKipcbiAqIFdhaXQgZm9yIHRoZSBnaXZlbiBhY3Rpdml0eSB0byBiZSBub24tZm9jdXNlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWN0aXZpdHkgLSBUaGUgbmFtZSBvZiB0aGUgYWN0aXZpdHksIGJlbG9uZ2luZyB0byB0aGF0IHBhY2thZ2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB3YWl0IGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0TXMgWzIwMDAwXSAtIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgdGltZW91dCBvY2N1cnMuXG4gKiBAdGhyb3dzIHtlcnJvcn0gSWYgdGltZW91dCBoYXBwZW5zLlxuICovXG5hcGtVdGlsc01ldGhvZHMud2FpdEZvck5vdEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gd2FpdEZvck5vdEFjdGl2aXR5IChwa2csIGFjdCwgd2FpdE1zID0gMjAwMDApIHtcbiAgYXdhaXQgdGhpcy53YWl0Rm9yQWN0aXZpdHlPck5vdChwa2csIGFjdCwgdHJ1ZSwgd2FpdE1zKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVW5pbnN0YWxsT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgW2FkYkV4ZWNUaW1lb3V0XSAtIFRoZSBjb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCB1bnRpbCB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAgaXMgdW5pbnN0YWxsZWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGtlZXBEYXRhIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSBpbiBvcmRlciB0byBrZWVwIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb24gZGF0YSBhbmQgY2FjaGUgZm9sZGVycyBhZnRlciB1bmluc3RhbGwuXG4gKi9cblxuLyoqXG4gKiBVbmluc3RhbGwgdGhlIGdpdmVuIHBhY2thZ2UgZnJvbSB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIGJlIHVuaW5zdGFsbGVkLlxuICogQHBhcmFtIHs/VW5pbnN0YWxsT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBzZXQgb2YgdW5pbnN0YWxsIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYWNrYWdlIHdhcyBmb3VuZCBvbiB0aGUgZGV2aWNlIGFuZFxuICogICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bGx5IHVuaW5zdGFsbGVkLlxuICovXG5hcGtVdGlsc01ldGhvZHMudW5pbnN0YWxsQXBrID0gYXN5bmMgZnVuY3Rpb24gdW5pbnN0YWxsQXBrIChwa2csIG9wdGlvbnMgPSB7fSkge1xuICBsb2cuZGVidWcoYFVuaW5zdGFsbGluZyAke3BrZ31gKTtcbiAgaWYgKCFhd2FpdCB0aGlzLmlzQXBwSW5zdGFsbGVkKHBrZykpIHtcbiAgICBsb2cuaW5mbyhgJHtwa2d9IHdhcyBub3QgdW5pbnN0YWxsZWQsIGJlY2F1c2UgaXQgd2FzIG5vdCBwcmVzZW50IG9uIHRoZSBkZXZpY2VgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjbWQgPSBbJ3VuaW5zdGFsbCddO1xuICBpZiAob3B0aW9ucy5rZWVwRGF0YSkge1xuICAgIGNtZC5wdXNoKCctaycpO1xuICB9XG4gIGNtZC5wdXNoKHBrZyk7XG5cbiAgbGV0IHN0ZG91dDtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmZvcmNlU3RvcChwa2cpO1xuICAgIHN0ZG91dCA9IChhd2FpdCB0aGlzLmFkYkV4ZWMoY21kLCB7dGltZW91dDogb3B0aW9ucy50aW1lb3V0fSkpLnRyaW0oKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHVuaW5zdGFsbCBBUEsuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxuICBsb2cuZGVidWcoYCdhZGIgJHtjbWQuam9pbignICcpfScgY29tbWFuZCBvdXRwdXQ6ICR7c3Rkb3V0fWApO1xuICBpZiAoc3Rkb3V0LmluY2x1ZGVzKCdTdWNjZXNzJykpIHtcbiAgICBsb2cuaW5mbyhgJHtwa2d9IHdhcyBzdWNjZXNzZnVsbHkgdW5pbnN0YWxsZWRgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsb2cuaW5mbyhgJHtwa2d9IHdhcyBub3QgdW5pbnN0YWxsZWRgKTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBJbnN0YWxsIHRoZSBwYWNrYWdlIGFmdGVyIGl0IHdhcyBwdXNoZWQgdG8gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtQYXRoT25EZXZpY2UgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBwYWNrYWdlIG9uIHRoZSBkZXZpY2UgZmlsZSBzeXN0ZW0uXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBbe31dIC0gQWRkaXRpb25hbCBleGVjIG9wdGlvbnMuIFNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9ub2RlLXRlZW5fcHJvY2Vzc31cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoaXMgcGFyYW1ldGVyLlxuICogQHRocm93cyB7ZXJyb3J9IElmIHRoZXJlIHdhcyBhIGZhaWx1cmUgZHVyaW5nIGFwcGxpY2F0aW9uIGluc3RhbGwuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5pbnN0YWxsRnJvbURldmljZVBhdGggPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsRnJvbURldmljZVBhdGggKGFwa1BhdGhPbkRldmljZSwgb3B0cyA9IHt9KSB7XG4gIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFsncG0nLCAnaW5zdGFsbCcsICctcicsIGFwa1BhdGhPbkRldmljZV0sIG9wdHMpO1xuICBpZiAoc3Rkb3V0LmluZGV4T2YoJ0ZhaWx1cmUnKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJlbW90ZSBpbnN0YWxsIGZhaWxlZDogJHtzdGRvdXR9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2FjaGluZ09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gdGltZW91dCBbYWRiRXhlY1RpbWVvdXRdIC0gVGhlIGNvdW50IG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAgaXMgdXBsb2FkZWQgdG8gdGhlIHJlbW90ZSBsb2NhdGlvbi5cbiAqL1xuXG4vKipcbiAqIENhY2hlcyB0aGUgZ2l2ZW4gQVBLIGF0IGEgcmVtb3RlIGxvY2F0aW9uIHRvIHNwZWVkIHVwIGZ1cnRoZXIgQVBLIGRlcGxveW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtQYXRoIC0gRnVsbCBwYXRoIHRvIHRoZSBhcGsgb24gdGhlIGxvY2FsIEZTXG4gKiBAcGFyYW0gez9DYWNoaW5nT3B0aW9uc30gb3B0aW9ucyAtIENhY2hpbmcgb3B0aW9uc1xuICogQHJldHVybnMge3N0cmluZ30gLSBGdWxsIHBhdGggdG8gdGhlIGNhY2hlZCBhcGsgb24gdGhlIHJlbW90ZSBmaWxlIHN5c3RlbVxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIHdhcyBhIGZhaWx1cmUgd2hpbGUgY2FjaGluZyB0aGUgYXBwXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5jYWNoZUFwayA9IGFzeW5jIGZ1bmN0aW9uIGNhY2hlQXBrIChhcGtQYXRoLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgYXBwSGFzaCA9IGF3YWl0IGZzLmhhc2goYXBrUGF0aCk7XG4gIGNvbnN0IHJlbW90ZVBhdGggPSBwYXRoLnBvc2l4LmpvaW4oUkVNT1RFX0NBQ0hFX1JPT1QsIGAke2FwcEhhc2h9LmFwa2ApO1xuICBjb25zdCByZW1vdGVDYWNoZWRGaWxlcyA9IFtdO1xuICAvLyBHZXQgY3VycmVudCBjb250ZW50cyBvZiB0aGUgcmVtb3RlIGNhY2hlIG9yIGNyZWF0ZSBpdCBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgdHJ5IHtcbiAgICBjb25zdCBlcnJvck1hcmtlciA9ICdfRVJST1JfJztcbiAgICBsZXQgbHNPdXRwdXQgPSBudWxsO1xuICAgIGlmICh0aGlzLl9hcmVFeHRlbmRlZExzT3B0aW9uc1N1cHBvcnRlZCA9PT0gdHJ1ZSB8fCAhXy5pc0Jvb2xlYW4odGhpcy5fYXJlRXh0ZW5kZWRMc09wdGlvbnNTdXBwb3J0ZWQpKSB7XG4gICAgICBsc091dHB1dCA9IGF3YWl0IHRoaXMuc2hlbGwoW2BscyAtdCAtMSAke1JFTU9URV9DQUNIRV9ST09UfSAyPiYxIHx8IGVjaG8gJHtlcnJvck1hcmtlcn1gXSk7XG4gICAgfVxuICAgIGlmICghXy5pc1N0cmluZyhsc091dHB1dCkgfHwgKGxzT3V0cHV0LmluY2x1ZGVzKGVycm9yTWFya2VyKSAmJiAhbHNPdXRwdXQuaW5jbHVkZXMoUkVNT1RFX0NBQ0hFX1JPT1QpKSkge1xuICAgICAgaWYgKCFfLmlzQm9vbGVhbih0aGlzLl9hcmVFeHRlbmRlZExzT3B0aW9uc1N1cHBvcnRlZCkpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdUaGUgY3VycmVudCBBbmRyb2lkIEFQSSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuZGVkIGxzIG9wdGlvbnMuICcgK1xuICAgICAgICAgICdEZWZhdWx0aW5nIHRvIG5vLW9wdGlvbnMgY2FsbCcpO1xuICAgICAgfVxuICAgICAgbHNPdXRwdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFtgbHMgJHtSRU1PVEVfQ0FDSEVfUk9PVH0gMj4mMSB8fCBlY2hvICR7ZXJyb3JNYXJrZXJ9YF0pO1xuICAgICAgdGhpcy5fYXJlRXh0ZW5kZWRMc09wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYXJlRXh0ZW5kZWRMc09wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobHNPdXRwdXQuaW5jbHVkZXMoZXJyb3JNYXJrZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobHNPdXRwdXQuc3Vic3RyaW5nKDAsIGxzT3V0cHV0LmluZGV4T2YoZXJyb3JNYXJrZXIpKSk7XG4gICAgfVxuICAgIHJlbW90ZUNhY2hlZEZpbGVzLnB1c2goLi4uKFxuICAgICAgbHNPdXRwdXQuc3BsaXQoJ1xcbicpXG4gICAgICAgIC5tYXAoKHgpID0+IHgudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZGVidWcoYEdvdCBhbiBlcnJvciAnJHtlLm1lc3NhZ2UudHJpbSgpfScgd2hpbGUgZ2V0dGluZyB0aGUgbGlzdCBvZiBmaWxlcyBpbiB0aGUgY2FjaGUuIGAgK1xuICAgICAgYEFzc3VtaW5nIHRoZSBjYWNoZSBkb2VzIG5vdCBleGlzdCB5ZXRgKTtcbiAgICBhd2FpdCB0aGlzLnNoZWxsKFsnbWtkaXInLCAnLXAnLCBSRU1PVEVfQ0FDSEVfUk9PVF0pO1xuICB9XG4gIGxvZy5kZWJ1ZyhgVGhlIGNvdW50IG9mIGFwcGxpY2F0aW9ucyBpbiB0aGUgY2FjaGU6ICR7cmVtb3RlQ2FjaGVkRmlsZXMubGVuZ3RofWApO1xuICBjb25zdCB0b0hhc2ggPSAocmVtb3RlUGF0aCkgPT4gcGF0aC5wb3NpeC5wYXJzZShyZW1vdGVQYXRoKS5uYW1lO1xuICAvLyBQdXNoIHRoZSBhcGsgdG8gdGhlIHJlbW90ZSBjYWNoZSBpZiBuZWVkZWRcbiAgaWYgKHJlbW90ZUNhY2hlZEZpbGVzLnNvbWUoKHgpID0+IHRvSGFzaCh4KSA9PT0gYXBwSGFzaCkpIHtcbiAgICBsb2cuaW5mbyhgVGhlIGFwcGxpY2F0aW9uIGF0ICcke2Fwa1BhdGh9JyBpcyBhbHJlYWR5IGNhY2hlZCB0byAnJHtyZW1vdGVQYXRofSdgKTtcbiAgICAvLyBVcGRhdGUgdGhlIGFwcGxpY2F0aW9uIHRpbWVzdGFtcCBhc3luY2hyb25vdXNseSBpbiBvcmRlciB0byBidW1wIGl0cyBwb3NpdGlvblxuICAgIC8vIGluIHRoZSBzb3J0ZWQgbHMgb3V0cHV0XG4gICAgdGhpcy5zaGVsbChbJ3RvdWNoJywgJy1hbScsIHJlbW90ZVBhdGhdKVxuICAgICAgLmNhdGNoKCgpID0+IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBsb2cuaW5mbyhgQ2FjaGluZyB0aGUgYXBwbGljYXRpb24gYXQgJyR7YXBrUGF0aH0nIHRvICcke3JlbW90ZVBhdGh9J2ApO1xuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgYXdhaXQgdGhpcy5wdXNoKGFwa1BhdGgsIHJlbW90ZVBhdGgsIHt0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXR9KTtcbiAgICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KGFwa1BhdGgpO1xuICAgIGxvZy5pbmZvKGBUaGUgdXBsb2FkIG9mICcke3BhdGguYmFzZW5hbWUoYXBrUGF0aCl9JyAoJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKHNpemUpfSkgYCArXG4gICAgICBgdG9vayAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNNaWxsaVNlY29uZHMudG9GaXhlZCgwKX1tc2ApO1xuICB9XG4gIGlmICghdGhpcy5yZW1vdGVBcHBzQ2FjaGUpIHtcbiAgICB0aGlzLnJlbW90ZUFwcHNDYWNoZSA9IG5ldyBMUlUoe1xuICAgICAgbWF4OiB0aGlzLnJlbW90ZUFwcHNDYWNoZUxpbWl0LFxuICAgIH0pO1xuICB9XG4gIC8vIENsZWFudXAgdGhlIGludmFsaWQgZW50cmllcyBmcm9tIHRoZSBjYWNoZVxuICBfLmRpZmZlcmVuY2UodGhpcy5yZW1vdGVBcHBzQ2FjaGUua2V5cygpLCByZW1vdGVDYWNoZWRGaWxlcy5tYXAodG9IYXNoKSlcbiAgICAuZm9yRWFjaCgoaGFzaCkgPT4gdGhpcy5yZW1vdGVBcHBzQ2FjaGUuZGVsKGhhc2gpKTtcbiAgLy8gQnVtcCB0aGUgY2FjaGUgcmVjb3JkIGZvciB0aGUgcmVjZW50bHkgY2FjaGVkIGl0ZW1cbiAgdGhpcy5yZW1vdGVBcHBzQ2FjaGUuc2V0KGFwcEhhc2gsIHJlbW90ZVBhdGgpO1xuICAvLyBJZiB0aGUgcmVtb3RlIGNhY2hlIGV4Y2VlZHMgdGhpcy5yZW1vdGVBcHBzQ2FjaGVMaW1pdCwgcmVtb3ZlIHRoZSBsZWFzdCByZWNlbnRseSB1c2VkIGVudHJpZXNcbiAgY29uc3QgZW50cmllc1RvQ2xlYW51cCA9IHJlbW90ZUNhY2hlZEZpbGVzXG4gICAgLm1hcCgoeCkgPT4gcGF0aC5wb3NpeC5qb2luKFJFTU9URV9DQUNIRV9ST09ULCB4KSlcbiAgICAuZmlsdGVyKCh4KSA9PiAhdGhpcy5yZW1vdGVBcHBzQ2FjaGUuaGFzKHRvSGFzaCh4KSkpXG4gICAgLnNsaWNlKHRoaXMucmVtb3RlQXBwc0NhY2hlTGltaXQgLSB0aGlzLnJlbW90ZUFwcHNDYWNoZS5rZXlzKCkubGVuZ3RoKTtcbiAgaWYgKCFfLmlzRW1wdHkoZW50cmllc1RvQ2xlYW51cCkpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5zaGVsbChbJ3JtJywgJy1mJywgLi4uZW50cmllc1RvQ2xlYW51cF0pO1xuICAgICAgbG9nLmRlYnVnKGBEZWxldGVkICR7ZW50cmllc1RvQ2xlYW51cC5sZW5ndGh9IGV4cGlyZWQgYXBwbGljYXRpb24gY2FjaGUgZW50cmllc2ApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy53YXJuKGBDYW5ub3QgZGVsZXRlICR7ZW50cmllc1RvQ2xlYW51cC5sZW5ndGh9IGV4cGlyZWQgYXBwbGljYXRpb24gY2FjaGUgZW50cmllcy4gYCArXG4gICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW1vdGVQYXRoO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbnN0YWxsT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgWzYwMDAwXSAtIFRoZSBjb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCB1bnRpbCB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAgaXMgaW5zdGFsbGVkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVvdXRDYXBOYW1lIFthbmRyb2lkSW5zdGFsbFRpbWVvdXRdIC0gVGhlIHRpbWVvdXQgb3B0aW9uIG5hbWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJzIGNhbiBpbmNyZWFzZSB0aGUgdGltZW91dC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYWxsb3dUZXN0UGFja2FnZXMgW2ZhbHNlXSAtIFNldCB0byB0cnVlIGluIG9yZGVyIHRvIGFsbG93IHRlc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VzIGluc3RhbGxhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdXNlU2RjYXJkIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSB0byBpbnN0YWxsIHRoZSBhcHAgb24gc2RjYXJkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiB0aGUgZGV2aWNlIG1lbW9yeS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZ3JhbnRQZXJtaXNzaW9ucyBbZmFsc2VdIC0gU2V0IHRvIHRydWUgaW4gb3JkZXIgdG8gZ3JhbnQgYWxsIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucyByZXF1ZXN0ZWQgaW4gdGhlIGFwcGxpY2F0aW9uJ3MgbWFuaWZlc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYWxseSBhZnRlciB0aGUgaW5zdGFsbGF0aW9uIGlzIGNvbXBsZXRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlciBBbmRyb2lkIDYrLlxuICogQHByb3BlcnR5IHtib29sZWFufSByZXBsYWNlIFt0cnVlXSAtIFNldCBpdCB0byBmYWxzZSBpZiB5b3UgZG9uJ3Qgd2FudFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhcHBsaWNhdGlvbiB0byBiZSB1cGdyYWRlZC9yZWluc3RhbGxlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGl0IGlzIGFscmVhZHkgcHJlc2VudCBvbiB0aGUgZGV2aWNlLlxuICovXG5cbi8qKlxuICogSW5zdGFsbCB0aGUgcGFja2FnZSBmcm9tIHRoZSBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIHBhY2thZ2UuXG4gKiBAcGFyYW0gez9JbnN0YWxsT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBzZXQgb2YgaW5zdGFsbGF0aW9uIG9wdGlvbnMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYW4gdW5leHBlY3RlZCBlcnJvciBoYXBwZW5zIGR1cmluZyBpbnN0YWxsLlxuICovXG5hcGtVdGlsc01ldGhvZHMuaW5zdGFsbCA9IGFzeW5jIGZ1bmN0aW9uIGluc3RhbGwgKGFwcFBhdGgsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoYXBwUGF0aC5lbmRzV2l0aChBUEtTX0VYVEVOU0lPTikpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5pbnN0YWxsQXBrcyhhcHBQYXRoLCBvcHRpb25zKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBfLmNsb25lRGVlcChvcHRpb25zKTtcbiAgXy5kZWZhdWx0cyhvcHRpb25zLCB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0aW1lb3V0OiB0aGlzLmFkYkV4ZWNUaW1lb3V0ID09PSBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQgPyBBUEtfSU5TVEFMTF9USU1FT1VUIDogdGhpcy5hZGJFeGVjVGltZW91dCxcbiAgICB0aW1lb3V0Q2FwTmFtZTogJ2FuZHJvaWRJbnN0YWxsVGltZW91dCcsXG4gIH0pO1xuXG4gIGNvbnN0IGluc3RhbGxBcmdzID0gYnVpbGRJbnN0YWxsQXJncyhhd2FpdCB0aGlzLmdldEFwaUxldmVsKCksIG9wdGlvbnMpO1xuICBjb25zdCBpbnN0YWxsT3B0cyA9IHtcbiAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQsXG4gICAgdGltZW91dENhcE5hbWU6IG9wdGlvbnMudGltZW91dENhcE5hbWUsXG4gIH07XG4gIGNvbnN0IGluc3RhbGxDbWQgPSBbXG4gICAgJ2luc3RhbGwnLFxuICAgIC4uLmluc3RhbGxBcmdzLFxuICAgIGFwcFBhdGgsXG4gIF07XG4gIGxldCBwZXJmb3JtQXBwSW5zdGFsbCA9IGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWRiRXhlYyhpbnN0YWxsQ21kLCBpbnN0YWxsT3B0cyk7XG4gIC8vIHRoaXMucmVtb3RlQXBwc0NhY2hlTGltaXQgPD0gMCBtZWFucyBubyBjYWNoaW5nIHNob3VsZCBiZSBhcHBsaWVkXG4gIGxldCBzaG91bGRDYWNoZUFwcCA9IHRoaXMucmVtb3RlQXBwc0NhY2hlTGltaXQgPiAwO1xuICBpZiAoc2hvdWxkQ2FjaGVBcHApIHtcbiAgICBzaG91bGRDYWNoZUFwcCA9ICEoYXdhaXQgdGhpcy5pc1N0cmVhbWVkSW5zdGFsbFN1cHBvcnRlZCgpKTtcbiAgICBpZiAoIXNob3VsZENhY2hlQXBwKSB7XG4gICAgICBsb2cuaW5mbyhgVGhlIGFwcGxpY2F0aW9uIGF0ICcke2FwcFBhdGh9JyB3aWxsIG5vdCBiZSBjYWNoZWQsIGJlY2F1c2UgdGhlIGRldmljZSB1bmRlciB0ZXN0IGhhcyBgICtcbiAgICAgICAgYGNvbmZpcm1lZCB0aGUgc3VwcG9ydCBvZiBzdHJlYW1lZCBpbnN0YWxsc2ApO1xuICAgIH1cbiAgfVxuICBpZiAoc2hvdWxkQ2FjaGVBcHApIHtcbiAgICBjb25zdCBjbGVhckNhY2hlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgbG9nLmluZm8oYENsZWFyaW5nIHRoZSBjYWNoZSBhdCAnJHtSRU1PVEVfQ0FDSEVfUk9PVH0nYCk7XG4gICAgICBhd2FpdCB0aGlzLnNoZWxsKFsncm0nLCAnLXJmJywgYCR7UkVNT1RFX0NBQ0hFX1JPT1R9LypgXSk7XG4gICAgfTtcbiAgICBjb25zdCBjYWNoZUFwcCA9IGFzeW5jICgpID0+IGF3YWl0IHRoaXMuY2FjaGVBcGsoYXBwUGF0aCwge1xuICAgICAgdGltZW91dDogb3B0aW9ucy50aW1lb3V0LFxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjYWNoZWRBcHBQYXRoID0gYXdhaXQgY2FjaGVBcHAoKTtcbiAgICAgIHBlcmZvcm1BcHBJbnN0YWxsID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwbUluc3RhbGxDbWRCeVJlbW90ZVBhdGggPSAocmVtb3RlUGF0aCkgPT4gW1xuICAgICAgICAgICdwbScsICdpbnN0YWxsJyxcbiAgICAgICAgICAuLi5pbnN0YWxsQXJncyxcbiAgICAgICAgICByZW1vdGVQYXRoLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLnNoZWxsKHBtSW5zdGFsbENtZEJ5UmVtb3RlUGF0aChjYWNoZWRBcHBQYXRoKSwgaW5zdGFsbE9wdHMpO1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvMTM5NzBcbiAgICAgICAgaWYgKC9cXGJJTlNUQUxMX0ZBSUxFRF9JTlNVRkZJQ0lFTlRfU1RPUkFHRVxcYi8udGVzdChvdXRwdXQpKSB7XG4gICAgICAgICAgbG9nLndhcm4oYFRoZXJlIHdhcyBhIGZhaWx1cmUgd2hpbGUgaW5zdGFsbGluZyAnJHthcHBQYXRofScgYCArXG4gICAgICAgICAgICBgYmVjYXVzZSBvZiB0aGUgaW5zdWZmaWNpZW50IGRldmljZSBzdG9yYWdlIHNwYWNlYCk7XG4gICAgICAgICAgYXdhaXQgY2xlYXJDYWNoZSgpO1xuICAgICAgICAgIGxvZy5pbmZvKGBDb25zaWRlciBkZWNyZWFzaW5nIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBjYWNoZWQgYXBwcyBgICtcbiAgICAgICAgICAgIGAoY3VycmVudGx5ICR7dGhpcy5yZW1vdGVBcHBzQ2FjaGVMaW1pdH0pIHRvIGF2b2lkIHN1Y2ggaXNzdWVzIGluIHRoZSBmdXR1cmVgKTtcbiAgICAgICAgICBjb25zdCBuZXdDYWNoZWRBcHBQYXRoID0gYXdhaXQgY2FjaGVBcHAoKTtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zaGVsbChwbUluc3RhbGxDbWRCeVJlbW90ZVBhdGgobmV3Q2FjaGVkQXBwUGF0aCksIGluc3RhbGxPcHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cuZGVidWcoZSk7XG4gICAgICBsb2cud2FybihgVGhlcmUgd2FzIGEgZmFpbHVyZSB3aGlsZSBjYWNoaW5nICcke2FwcFBhdGh9JzogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICBsb2cud2FybignRmFsbGluZyBiYWNrIHRvIHRoZSBkZWZhdWx0IGluc3RhbGxhdGlvbiBwcm9jZWR1cmUnKTtcbiAgICAgIGF3YWl0IGNsZWFyQ2FjaGUoKTtcbiAgICB9XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCB0aW1lciA9IG5ldyB0aW1pbmcuVGltZXIoKS5zdGFydCgpO1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHBlcmZvcm1BcHBJbnN0YWxsKCk7XG4gICAgbG9nLmluZm8oYFRoZSBpbnN0YWxsYXRpb24gb2YgJyR7cGF0aC5iYXNlbmFtZShhcHBQYXRoKX0nIHRvb2sgJHt0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzLnRvRml4ZWQoMCl9bXNgKTtcbiAgICBjb25zdCB0cnVuY2F0ZWRPdXRwdXQgPSAoIV8uaXNTdHJpbmcob3V0cHV0KSB8fCBvdXRwdXQubGVuZ3RoIDw9IDMwMCkgP1xuICAgICAgb3V0cHV0IDogYCR7b3V0cHV0LnN1YnN0cigwLCAxNTApfS4uLiR7b3V0cHV0LnN1YnN0cihvdXRwdXQubGVuZ3RoIC0gMTUwKX1gO1xuICAgIGxvZy5kZWJ1ZyhgSW5zdGFsbCBjb21tYW5kIHN0ZG91dDogJHt0cnVuY2F0ZWRPdXRwdXR9YCk7XG4gICAgaWYgKC9cXFtJTlNUQUxMW0EtWl9dK0ZBSUxFRFtBLVpfXStcXF0vLnRlc3Qob3V0cHV0KSkge1xuICAgICAgaWYgKHRoaXMuaXNUZXN0UGFja2FnZU9ubHlFcnJvcihvdXRwdXQpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBTZXQgJ2FsbG93VGVzdFBhY2thZ2VzJyBjYXBhYmlsaXR5IHRvIHRydWUgaW4gb3JkZXIgdG8gYWxsb3cgdGVzdCBwYWNrYWdlcyBpbnN0YWxsYXRpb24uYDtcbiAgICAgICAgbG9nLndhcm4obXNnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke291dHB1dH1cXG4ke21zZ31gKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihvdXRwdXQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gb24gc29tZSBzeXN0ZW1zIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgYXBwIGFscmVhZHlcbiAgICAvLyBleGlzdHNcbiAgICBpZiAoIWVyci5tZXNzYWdlLmluY2x1ZGVzKCdJTlNUQUxMX0ZBSUxFRF9BTFJFQURZX0VYSVNUUycpKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgQXBwbGljYXRpb24gJyR7YXBwUGF0aH0nIGFscmVhZHkgaW5zdGFsbGVkLiBDb250aW51aW5nLmApO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudCBpbnN0YWxsYXRpb24gc3RhdGUgb2YgdGhlIHBhcnRpY3VsYXIgYXBwbGljYXRpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIEZ1bGwgcGF0aCB0byB0aGUgYXBwbGljYXRpb25cbiAqIEBwYXJhbSB7P3N0cmluZ30gcGtnIC0gUGFja2FnZSBpZGVudGlmaWVyLiBJZiBvbWl0dGVkIHRoZW4gdGhlIHNjcmlwdCB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB0byBleHRyYWN0IGl0IG9uIGl0cyBvd25cbiAqIEByZXR1cm5zIHtzdHJpbmd9XU9uZSBvZiBgQVBQX0lOU1RBTExfU1RBVEVgIGNvbnN0YW50c1xuICovXG5hcGtVdGlsc01ldGhvZHMuZ2V0QXBwbGljYXRpb25JbnN0YWxsU3RhdGUgPSBhc3luYyBmdW5jdGlvbiBnZXRBcHBsaWNhdGlvbkluc3RhbGxTdGF0ZSAoYXBwUGF0aCwgcGtnID0gbnVsbCkge1xuICBsZXQgYXBrSW5mbyA9IG51bGw7XG4gIGlmICghcGtnKSB7XG4gICAgYXBrSW5mbyA9IGF3YWl0IHRoaXMuZ2V0QXBrSW5mbyhhcHBQYXRoKTtcbiAgICBwa2cgPSBhcGtJbmZvLm5hbWU7XG4gIH1cbiAgaWYgKCFwa2cpIHtcbiAgICBsb2cud2FybihgQ2Fubm90IHJlYWQgdGhlIHBhY2thZ2UgbmFtZSBvZiAnJHthcHBQYXRofSdgKTtcbiAgICByZXR1cm4gdGhpcy5BUFBfSU5TVEFMTF9TVEFURS5VTktOT1dOO1xuICB9XG5cbiAgaWYgKCFhd2FpdCB0aGlzLmlzQXBwSW5zdGFsbGVkKHBrZykpIHtcbiAgICBsb2cuZGVidWcoYEFwcCAnJHthcHBQYXRofScgaXMgbm90IGluc3RhbGxlZGApO1xuICAgIHJldHVybiB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLk5PVF9JTlNUQUxMRUQ7XG4gIH1cblxuICBjb25zdCB7dmVyc2lvbkNvZGU6IHBrZ1ZlcnNpb25Db2RlLCB2ZXJzaW9uTmFtZTogcGtnVmVyc2lvbk5hbWVTdHJ9ID0gYXdhaXQgdGhpcy5nZXRQYWNrYWdlSW5mbyhwa2cpO1xuICBjb25zdCBwa2dWZXJzaW9uTmFtZSA9IHNlbXZlci52YWxpZChzZW12ZXIuY29lcmNlKHBrZ1ZlcnNpb25OYW1lU3RyKSk7XG4gIGlmICghYXBrSW5mbykge1xuICAgIGFwa0luZm8gPSBhd2FpdCB0aGlzLmdldEFwa0luZm8oYXBwUGF0aCk7XG4gIH1cbiAgY29uc3Qge3ZlcnNpb25Db2RlOiBhcGtWZXJzaW9uQ29kZSwgdmVyc2lvbk5hbWU6IGFwa1ZlcnNpb25OYW1lU3RyfSA9IGFwa0luZm87XG4gIGNvbnN0IGFwa1ZlcnNpb25OYW1lID0gc2VtdmVyLnZhbGlkKHNlbXZlci5jb2VyY2UoYXBrVmVyc2lvbk5hbWVTdHIpKTtcblxuICBpZiAoIV8uaXNJbnRlZ2VyKGFwa1ZlcnNpb25Db2RlKSB8fCAhXy5pc0ludGVnZXIocGtnVmVyc2lvbkNvZGUpKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCByZWFkIHZlcnNpb24gY29kZXMgb2YgJyR7YXBwUGF0aH0nIGFuZC9vciAnJHtwa2d9J2ApO1xuICAgIGlmICghXy5pc1N0cmluZyhhcGtWZXJzaW9uTmFtZSkgfHwgIV8uaXNTdHJpbmcocGtnVmVyc2lvbk5hbWUpKSB7XG4gICAgICBsb2cud2FybihgQ2Fubm90IHJlYWQgdmVyc2lvbiBuYW1lcyBvZiAnJHthcHBQYXRofScgYW5kL29yICcke3BrZ30nYCk7XG4gICAgICByZXR1cm4gdGhpcy5BUFBfSU5TVEFMTF9TVEFURS5VTktOT1dOO1xuICAgIH1cbiAgfVxuICBpZiAoXy5pc0ludGVnZXIoYXBrVmVyc2lvbkNvZGUpICYmIF8uaXNJbnRlZ2VyKHBrZ1ZlcnNpb25Db2RlKSkge1xuICAgIGlmIChwa2dWZXJzaW9uQ29kZSA+IGFwa1ZlcnNpb25Db2RlKSB7XG4gICAgICBsb2cuZGVidWcoYFRoZSB2ZXJzaW9uIGNvZGUgb2YgdGhlIGluc3RhbGxlZCAnJHtwa2d9JyBpcyBncmVhdGVyIHRoYW4gdGhlIGFwcGxpY2F0aW9uIHZlcnNpb24gY29kZSAoJHtwa2dWZXJzaW9uQ29kZX0gPiAke2Fwa1ZlcnNpb25Db2RlfSlgKTtcbiAgICAgIHJldHVybiB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLk5FV0VSX1ZFUlNJT05fSU5TVEFMTEVEO1xuICAgIH1cbiAgICAvLyBWZXJzaW9uIGNvZGVzIG1pZ2h0IG5vdCBiZSBtYWludGFpbmVkLiBDaGVjayB2ZXJzaW9uIG5hbWVzLlxuICAgIGlmIChwa2dWZXJzaW9uQ29kZSA9PT0gYXBrVmVyc2lvbkNvZGUpIHtcbiAgICAgIGlmIChfLmlzU3RyaW5nKGFwa1ZlcnNpb25OYW1lKSAmJiBfLmlzU3RyaW5nKHBrZ1ZlcnNpb25OYW1lKSAmJiBzZW12ZXIuc2F0aXNmaWVzKHBrZ1ZlcnNpb25OYW1lLCBgPj0ke2Fwa1ZlcnNpb25OYW1lfWApKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgVGhlIHZlcnNpb24gbmFtZSBvZiB0aGUgaW5zdGFsbGVkICcke3BrZ30nIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIGFwcGxpY2F0aW9uIHZlcnNpb24gbmFtZSAoJyR7cGtnVmVyc2lvbk5hbWV9JyA+PSAnJHthcGtWZXJzaW9uTmFtZX0nKWApO1xuICAgICAgICByZXR1cm4gc2VtdmVyLnNhdGlzZmllcyhwa2dWZXJzaW9uTmFtZSwgYD4ke2Fwa1ZlcnNpb25OYW1lfWApXG4gICAgICAgICAgPyB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLk5FV0VSX1ZFUlNJT05fSU5TVEFMTEVEXG4gICAgICAgICAgOiB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLlNBTUVfVkVSU0lPTl9JTlNUQUxMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNTdHJpbmcoYXBrVmVyc2lvbk5hbWUpIHx8ICFfLmlzU3RyaW5nKHBrZ1ZlcnNpb25OYW1lKSkge1xuICAgICAgICBsb2cuZGVidWcoYFRoZSB2ZXJzaW9uIG5hbWUgb2YgdGhlIGluc3RhbGxlZCAnJHtwa2d9JyBpcyBlcXVhbCB0byBhcHBsaWNhdGlvbiB2ZXJzaW9uIG5hbWUgKCR7cGtnVmVyc2lvbkNvZGV9ID09PSAke2Fwa1ZlcnNpb25Db2RlfSlgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuQVBQX0lOU1RBTExfU1RBVEUuU0FNRV9WRVJTSU9OX0lOU1RBTExFRDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoXy5pc1N0cmluZyhhcGtWZXJzaW9uTmFtZSkgJiYgXy5pc1N0cmluZyhwa2dWZXJzaW9uTmFtZSkgJiYgc2VtdmVyLnNhdGlzZmllcyhwa2dWZXJzaW9uTmFtZSwgYD49JHthcGtWZXJzaW9uTmFtZX1gKSkge1xuICAgIGxvZy5kZWJ1ZyhgVGhlIHZlcnNpb24gbmFtZSBvZiB0aGUgaW5zdGFsbGVkICcke3BrZ30nIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIGFwcGxpY2F0aW9uIHZlcnNpb24gbmFtZSAoJyR7cGtnVmVyc2lvbk5hbWV9JyA+PSAnJHthcGtWZXJzaW9uTmFtZX0nKWApO1xuICAgIHJldHVybiBzZW12ZXIuc2F0aXNmaWVzKHBrZ1ZlcnNpb25OYW1lLCBgPiR7YXBrVmVyc2lvbk5hbWV9YClcbiAgICAgID8gdGhpcy5BUFBfSU5TVEFMTF9TVEFURS5ORVdFUl9WRVJTSU9OX0lOU1RBTExFRFxuICAgICAgOiB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLlNBTUVfVkVSU0lPTl9JTlNUQUxMRUQ7XG4gIH1cblxuICBsb2cuZGVidWcoYFRoZSBpbnN0YWxsZWQgJyR7cGtnfScgcGFja2FnZSBpcyBvbGRlciB0aGFuICcke2FwcFBhdGh9JyAoJHtwa2dWZXJzaW9uQ29kZX0gPCAke2Fwa1ZlcnNpb25Db2RlfSBvciAnJHtwa2dWZXJzaW9uTmFtZX0nIDwgJyR7YXBrVmVyc2lvbk5hbWV9JyknYCk7XG4gIHJldHVybiB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLk9MREVSX1ZFUlNJT05fSU5TVEFMTEVEO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbnN0YWxsT3JVcGdyYWRlT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgWzYwMDAwXSAtIFRoZSBjb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCB1bnRpbCB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAgaXMgaW5zdGFsbGVkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBhbGxvd1Rlc3RQYWNrYWdlcyBbZmFsc2VdIC0gU2V0IHRvIHRydWUgaW4gb3JkZXIgdG8gYWxsb3cgdGVzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2FnZXMgaW5zdGFsbGF0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSB1c2VTZGNhcmQgW2ZhbHNlXSAtIFNldCB0byB0cnVlIHRvIGluc3RhbGwgdGhlIGFwcCBvbiBTRENhcmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHRoZSBkZXZpY2UgbWVtb3J5LlxuICogQHByb3BlcnR5IHtib29sZWFufSBncmFudFBlcm1pc3Npb25zIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSBpbiBvcmRlciB0byBncmFudCBhbGwgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zIHJlcXVlc3RlZCBpbiB0aGUgYXBwbGljYXRpb24ncyBtYW5pZmVzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvbWF0aWNhbGx5IGFmdGVyIHRoZSBpbnN0YWxsYXRpb24gaXMgY29tcGxldGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyIEFuZHJvaWQgNisuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGVuZm9yY2VDdXJyZW50QnVpbGQgW2ZhbHNlXSAtIFNldCB0byBgdHJ1ZWAgaW4gb3JkZXIgdG8gYWx3YXlzIHByZWZlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY3VycmVudCBidWlsZCBvdmVyIGFueSBpbnN0YWxsZWQgcGFja2FnZXMgaGF2aW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGlkZW50aWZpZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluc3RhbGxPclVwZ3JhZGVSZXN1bHRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gd2FzVW5pbnN0YWxsZWQgLSBFcXVhbHMgdG8gYHRydWVgIGlmIHRoZSB0YXJnZXQgYXBwIGhhcyBiZWVuIHVuaW5zdGFsbGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGJlaW5nIGluc3RhbGxlZFxuICogQHByb3BlcnR5IHtBUFBfSU5TVEFMTF9TVEFURX0gYXBwU3RhdGUgLSBPbmUgb2YgYGFkYi5BUFBfSU5TVEFMTF9TVEFURWAgc3RhdGVzLCB3aGljaCByZWZsZWN0c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3RhdGUgb2YgdGhlIGFwcGxpY2F0aW9uIGJlZm9yZSBiZWluZyBpbnN0YWxsZWQuXG4gKi9cblxuLyoqXG4gKiBJbnN0YWxsIHRoZSBwYWNrYWdlIGZyb20gdGhlIGxvY2FsIGZpbGUgc3lzdGVtIG9yIHVwZ3JhZGUgaXQgaWYgYW4gb2xkZXJcbiAqIHZlcnNpb24gb2YgdGhlIHNhbWUgcGFja2FnZSBpcyBhbHJlYWR5IGluc3RhbGxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIHBhY2thZ2UuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBpbnN0YWxsZWQgcGFja2FnZS4gVGhlIG1ldGhvZCB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm0gZmFzdGVyIGlmIGl0IGlzIHNldC5cbiAqIEBwYXJhbSB7P0luc3RhbGxPclVwZ3JhZGVPcHRpb25zfSBvcHRpb25zIC0gU2V0IG9mIGluc3RhbGwgb3B0aW9ucy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhbiB1bmV4cGVjdGVkIGVycm9yIGhhcHBlbnMgZHVyaW5nIGluc3RhbGwuXG4gKiBAcmV0dXJucyB7SW5zdGFsbE9yVXBncmFkZVJlc3VsdH1cbiAqL1xuYXBrVXRpbHNNZXRob2RzLmluc3RhbGxPclVwZ3JhZGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsT3JVcGdyYWRlIChhcHBQYXRoLCBwa2cgPSBudWxsLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKCFwa2cpIHtcbiAgICBjb25zdCBhcGtJbmZvID0gYXdhaXQgdGhpcy5nZXRBcGtJbmZvKGFwcFBhdGgpO1xuICAgIHBrZyA9IGFwa0luZm8ubmFtZTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBlbmZvcmNlQ3VycmVudEJ1aWxkLFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgYXBwU3RhdGUgPSBhd2FpdCB0aGlzLmdldEFwcGxpY2F0aW9uSW5zdGFsbFN0YXRlKGFwcFBhdGgsIHBrZyk7XG4gIGxldCB3YXNVbmluc3RhbGxlZCA9IGZhbHNlO1xuICBjb25zdCB1bmluc3RhbGxQYWNrYWdlID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghYXdhaXQgdGhpcy51bmluc3RhbGxBcGsocGtnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtwa2d9JyBwYWNrYWdlIGNhbm5vdCBiZSB1bmluc3RhbGxlZGApO1xuICAgIH1cbiAgICB3YXNVbmluc3RhbGxlZCA9IHRydWU7XG4gIH07XG4gIHN3aXRjaCAoYXBwU3RhdGUpIHtcbiAgICBjYXNlIHRoaXMuQVBQX0lOU1RBTExfU1RBVEUuTk9UX0lOU1RBTExFRDpcbiAgICAgIGxvZy5kZWJ1ZyhgSW5zdGFsbGluZyAnJHthcHBQYXRofSdgKTtcbiAgICAgIGF3YWl0IHRoaXMuaW5zdGFsbChhcHBQYXRoLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7cmVwbGFjZTogZmFsc2V9KSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhcHBTdGF0ZSxcbiAgICAgICAgd2FzVW5pbnN0YWxsZWQsXG4gICAgICB9O1xuICAgIGNhc2UgdGhpcy5BUFBfSU5TVEFMTF9TVEFURS5ORVdFUl9WRVJTSU9OX0lOU1RBTExFRDpcbiAgICAgIGlmIChlbmZvcmNlQ3VycmVudEJ1aWxkKSB7XG4gICAgICAgIGxvZy5pbmZvKGBEb3duZ3JhZGluZyAnJHtwa2d9JyBhcyByZXF1ZXN0ZWRgKTtcbiAgICAgICAgYXdhaXQgdW5pbnN0YWxsUGFja2FnZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGxvZy5kZWJ1ZyhgVGhlcmUgaXMgbm8gbmVlZCB0byBkb3duZ3JhZGUgJyR7cGtnfSdgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFwcFN0YXRlLFxuICAgICAgICB3YXNVbmluc3RhbGxlZCxcbiAgICAgIH07XG4gICAgY2FzZSB0aGlzLkFQUF9JTlNUQUxMX1NUQVRFLlNBTUVfVkVSU0lPTl9JTlNUQUxMRUQ6XG4gICAgICBpZiAoZW5mb3JjZUN1cnJlbnRCdWlsZCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGxvZy5kZWJ1ZyhgVGhlcmUgaXMgbm8gbmVlZCB0byBpbnN0YWxsL3VwZ3JhZGUgJyR7YXBwUGF0aH0nYCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhcHBTdGF0ZSxcbiAgICAgICAgd2FzVW5pbnN0YWxsZWQsXG4gICAgICB9O1xuICAgIGNhc2UgdGhpcy5BUFBfSU5TVEFMTF9TVEFURS5PTERFUl9WRVJTSU9OX0lOU1RBTExFRDpcbiAgICAgIGxvZy5kZWJ1ZyhgRXhlY3V0aW5nIHVwZ3JhZGUgb2YgJyR7YXBwUGF0aH0nYCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nLmRlYnVnKGBUaGUgY3VycmVudCBpbnN0YWxsIHN0YXRlIG9mICcke2FwcFBhdGh9JyBpcyB1bmtub3duLiBJbnN0YWxsaW5nIGFueXdheWApO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW5zdGFsbChhcHBQYXRoLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7cmVwbGFjZTogdHJ1ZX0pKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCBpbnN0YWxsL3VwZ3JhZGUgJyR7cGtnfScgYmVjYXVzZSBvZiAnJHtlcnIubWVzc2FnZX0nLiBUcnlpbmcgZnVsbCByZWluc3RhbGxgKTtcbiAgICBhd2FpdCB1bmluc3RhbGxQYWNrYWdlKCk7XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwcFBhdGgsIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtyZXBsYWNlOiBmYWxzZX0pKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFwcFN0YXRlLFxuICAgIHdhc1VuaW5zdGFsbGVkLFxuICB9O1xufTtcblxuLyoqXG4gKiBFeHRyYWN0IHN0cmluZyByZXNvdXJjZXMgZnJvbSB0aGUgZ2l2ZW4gcGFja2FnZSBvbiBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIC5hcGsocykgcGFja2FnZS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gbGFuZ3VhZ2UgLSBUaGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gZXh0cmFjdCB0aGUgcmVzb3VyY2VzIGZvci5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZGVmYXVsdCBsYW5ndWFnZSBpcyB1c2VkIGlmIHRoaXMgZXF1YWxzIHRvIGBudWxsYC9gdW5kZWZpbmVkYFxuICogQHBhcmFtIHtzdHJpbmd9IG91dCAtIFRoZSBuYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiBmb2xkZXIgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUgdGhlIGV4dHJhY3RlZCBmaWxlIHRvLlxuICogQHJldHVybiB7T2JqZWN0fSBBIG1hcHBpbmcgb2JqZWN0LCB3aGVyZSBwcm9wZXJ0aWVzIGFyZTogJ2Fwa1N0cmluZ3MnLCBjb250YWluaW5nXG4gKiAgICAgICAgICAgICAgICAgIHBhcnNlZCByZXNvdXJjZSBmaWxlIHJlcHJlc2VudGVkIGFzIEpTT04gb2JqZWN0LCBhbmQgJ2xvY2FsUGF0aCcsXG4gKiAgICAgICAgICAgICAgICAgIGNvbnRhaW5pbmcgdGhlIHBhdGggdG8gdGhlIGV4dHJhY3RlZCBmaWxlIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLmV4dHJhY3RTdHJpbmdzRnJvbUFwayA9IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RTdHJpbmdzRnJvbUFwayAoYXBwUGF0aCwgbGFuZ3VhZ2UsIG91dCkge1xuICBsb2cuZGVidWcoYEV4dHJhY3Rpbmcgc3RyaW5ncyBmcm9tIGZvciBsYW5ndWFnZTogJHtsYW5ndWFnZSB8fCAnZGVmYXVsdCd9YCk7XG4gIGNvbnN0IG9yaWdpbmFsQXBwUGF0aCA9IGFwcFBhdGg7XG4gIGlmIChhcHBQYXRoLmVuZHNXaXRoKEFQS1NfRVhURU5TSU9OKSkge1xuICAgIGFwcFBhdGggPSBhd2FpdCB0aGlzLmV4dHJhY3RMYW5ndWFnZUFwayhhcHBQYXRoLCBsYW5ndWFnZSk7XG4gIH1cblxuICBsZXQgYXBrU3RyaW5ncyA9IHt9O1xuICBsZXQgY29uZmlnTWFya2VyO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW5pdEFhcHQoKTtcblxuICAgIGNvbmZpZ01hcmtlciA9IGF3YWl0IGZvcm1hdENvbmZpZ01hcmtlcihhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy5hYXB0LCBbXG4gICAgICAgICdkJyxcbiAgICAgICAgJ2NvbmZpZ3VyYXRpb25zJyxcbiAgICAgICAgYXBwUGF0aCxcbiAgICAgIF0pO1xuICAgICAgcmV0dXJuIHN0ZG91dC5zcGxpdChvcy5FT0wpO1xuICAgIH0sIGxhbmd1YWdlLCAnKGRlZmF1bHQpJyk7XG5cbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy5hYXB0LCBbXG4gICAgICAnZCcsXG4gICAgICAnLS12YWx1ZXMnLFxuICAgICAgJ3Jlc291cmNlcycsXG4gICAgICBhcHBQYXRoLFxuICAgIF0pO1xuICAgIGFwa1N0cmluZ3MgPSBwYXJzZUFhcHRTdHJpbmdzKHN0ZG91dCwgY29uZmlnTWFya2VyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5kZWJ1ZygnQ2Fubm90IGV4dHJhY3QgcmVzb3VyY2VzIHVzaW5nIGFhcHQuIFRyeWluZyBhYXB0Mi4gJyArXG4gICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZS5zdGRlcnIgfHwgZS5tZXNzYWdlfWApO1xuXG4gICAgYXdhaXQgdGhpcy5pbml0QWFwdDIoKTtcblxuICAgIGNvbmZpZ01hcmtlciA9IGF3YWl0IGZvcm1hdENvbmZpZ01hcmtlcihhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhcGthbmFseXplclBhdGggPSBhd2FpdCBnZXRBcGthbmFseXplckZvck9zKHRoaXMpO1xuICAgICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKGFwa2FuYWx5emVyUGF0aCwgW1xuICAgICAgICAncmVzb3VyY2VzJywgJ2NvbmZpZ3MnLFxuICAgICAgICAnLS10eXBlJywgJ3N0cmluZycsXG4gICAgICAgIGFwcFBhdGgsXG4gICAgICBdLCB7XG4gICAgICAgIHNoZWxsOiB0cnVlLFxuICAgICAgICBjd2Q6IHBhdGguZGlybmFtZShhcGthbmFseXplclBhdGgpLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3Rkb3V0LnNwbGl0KG9zLkVPTCk7XG4gICAgfSwgbGFuZ3VhZ2UsICcnKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy5hYXB0MiwgW1xuICAgICAgICAnZHVtcCcsIGFwcFBhdGgsXG4gICAgICBdKTtcbiAgICAgIGFwa1N0cmluZ3MgPSBwYXJzZUFhcHQyU3RyaW5ncyhzdGRvdXQsIGNvbmZpZ01hcmtlcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZXh0cmFjdCByZXNvdXJjZXMgZnJvbSAnJHtvcmlnaW5hbEFwcFBhdGh9Jy4gYCArXG4gICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKF8uaXNFbXB0eShhcGtTdHJpbmdzKSkge1xuICAgIGxvZy53YXJuKGBObyBzdHJpbmdzIGhhdmUgYmVlbiBmb3VuZCBpbiAnJHtvcmlnaW5hbEFwcFBhdGh9JyByZXNvdXJjZXMgYCArXG4gICAgICBgZm9yICcke2NvbmZpZ01hcmtlciB8fCAnZGVmYXVsdCd9JyBjb25maWd1cmF0aW9uYCk7XG4gIH0gZWxzZSB7XG4gICAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBleHRyYWN0ZWQgJHtfLmtleXMoYXBrU3RyaW5ncykubGVuZ3RofSBzdHJpbmdzIGZyb20gYCArXG4gICAgICBgJyR7b3JpZ2luYWxBcHBQYXRofScgcmVzb3VyY2VzIGZvciAnJHtjb25maWdNYXJrZXIgfHwgJ2RlZmF1bHQnfScgY29uZmlndXJhdGlvbmApO1xuICB9XG5cbiAgY29uc3QgbG9jYWxQYXRoID0gcGF0aC5yZXNvbHZlKG91dCwgJ3N0cmluZ3MuanNvbicpO1xuICBhd2FpdCBta2RpcnAob3V0KTtcbiAgYXdhaXQgZnMud3JpdGVGaWxlKGxvY2FsUGF0aCwgSlNPTi5zdHJpbmdpZnkoYXBrU3RyaW5ncywgbnVsbCwgMiksICd1dGYtOCcpO1xuICByZXR1cm4ge2Fwa1N0cmluZ3MsIGxvY2FsUGF0aH07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbGFuZ3VhZ2UgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvZiBkZXZpY2UgbGFuZ3VhZ2UuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXREZXZpY2VMYW5ndWFnZSA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZUxhbmd1YWdlICgpIHtcbiAgbGV0IGxhbmd1YWdlO1xuICBpZiAoYXdhaXQgdGhpcy5nZXRBcGlMZXZlbCgpIDwgMjMpIHtcbiAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlU3lzTGFuZ3VhZ2UoKTtcbiAgICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUHJvZHVjdExhbmd1YWdlKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxhbmd1YWdlID0gKGF3YWl0IHRoaXMuZ2V0RGV2aWNlTG9jYWxlKCkpLnNwbGl0KCctJylbMF07XG4gIH1cbiAgcmV0dXJuIGxhbmd1YWdlO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGNvdW50cnkgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvZiBkZXZpY2UgY291bnRyeS5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLmdldERldmljZUNvdW50cnkgPSBhc3luYyBmdW5jdGlvbiBnZXREZXZpY2VDb3VudHJ5ICgpIHtcbiAgLy8gdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGluIEFQSSA8IDIzXG4gIGxldCBjb3VudHJ5ID0gYXdhaXQgdGhpcy5nZXREZXZpY2VTeXNDb3VudHJ5KCk7XG4gIGlmICghY291bnRyeSkge1xuICAgIGNvdW50cnkgPSBhd2FpdCB0aGlzLmdldERldmljZVByb2R1Y3RDb3VudHJ5KCk7XG4gIH1cbiAgcmV0dXJuIGNvdW50cnk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbG9jYWxlIG5hbWUgb2YgdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5hbWUgb2YgZGV2aWNlIGxvY2FsZS5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLmdldERldmljZUxvY2FsZSA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZUxvY2FsZSAoKSB7XG4gIC8vIHRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZCBpbiBBUEkgPj0gMjNcbiAgbGV0IGxvY2FsZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlU3lzTG9jYWxlKCk7XG4gIGlmICghbG9jYWxlKSB7XG4gICAgbG9jYWxlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VQcm9kdWN0TG9jYWxlKCk7XG4gIH1cbiAgcmV0dXJuIGxvY2FsZTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBsb2NhbGUgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QgYW5kIHRoZSBmb3JtYXQgb2YgdGhlIGxvY2FsZSBpcyBlbi1VUywgZm9yIGV4YW1wbGUuXG4gKiBUaGlzIG1ldGhvZCBjYWxsIHNldERldmljZUxhbmd1YWdlQ291bnRyeSwgc28sIHBsZWFzZSB1c2Ugc2V0RGV2aWNlTGFuZ3VhZ2VDb3VudHJ5IGFzIHBvc3NpYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgLSBOYW1lcyBvZiB0aGUgZGV2aWNlIGxhbmd1YWdlIGFuZCB0aGUgY291bnRyeSBjb25uZWN0ZWQgd2l0aCBgLWAuIGUuZy4gZW4tVVMuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5zZXREZXZpY2VMb2NhbGUgPSBhc3luYyBmdW5jdGlvbiBzZXREZXZpY2VMb2NhbGUgKGxvY2FsZSkge1xuICBjb25zdCB2YWxpZGF0ZUxvY2FsZSA9IG5ldyBSZWdFeHAoL1thLXpBLVpdKy1bYS16QS1aMC05XSsvKTtcbiAgaWYgKCF2YWxpZGF0ZUxvY2FsZS50ZXN0KGxvY2FsZSkpIHtcbiAgICBsb2cud2Fybihgc2V0RGV2aWNlTG9jYWxlIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgZm9ybWF0OiBlbi1VUyBvciBqYS1KUGApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBzcGxpdF9sb2NhbGUgPSBsb2NhbGUuc3BsaXQoJy0nKTtcbiAgYXdhaXQgdGhpcy5zZXREZXZpY2VMYW5ndWFnZUNvdW50cnkoc3BsaXRfbG9jYWxlWzBdLCBzcGxpdF9sb2NhbGVbMV0pO1xufTtcblxuLyoqXG4gKiBNYWtlIHN1cmUgY3VycmVudCBkZXZpY2UgbG9jYWxlIGlzIGV4cGVjdGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2UgLSBMYW5ndWFnZS4gVGhlIGxhbmd1YWdlIGZpZWxkIGlzIGNhc2UgaW5zZW5zaXRpdmUsIGJ1dCBMb2NhbGUgYWx3YXlzIGNhbm9uaWNhbGl6ZXMgdG8gbG93ZXIgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb3VudHJ5IC0gQ291bnRyeS4gVGhlIGxhbmd1YWdlIGZpZWxkIGlzIGNhc2UgaW5zZW5zaXRpdmUsIGJ1dCBMb2NhbGUgYWx3YXlzIGNhbm9uaWNhbGl6ZXMgdG8gbG93ZXIgY2FzZS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gc2NyaXB0IC0gU2NyaXB0LiBUaGUgc2NyaXB0IGZpZWxkIGlzIGNhc2UgaW5zZW5zaXRpdmUgYnV0IExvY2FsZSBhbHdheXMgY2Fub25pY2FsaXplcyB0byB0aXRsZSBjYXNlLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IElmIGN1cnJlbnQgbG9jYWxlIGlzIGxhbmd1YWdlIGFuZCBjb3VudHJ5IGFzIGFyZ3VtZW50cywgcmV0dXJuIHRydWUuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5lbnN1cmVDdXJyZW50TG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gZW5zdXJlQ3VycmVudExvY2FsZSAobGFuZ3VhZ2UsIGNvdW50cnksIHNjcmlwdCA9IG51bGwpIHtcbiAgY29uc3QgaGFzTGFuZ3VhZ2UgPSBfLmlzU3RyaW5nKGxhbmd1YWdlKTtcbiAgY29uc3QgaGFzQ291bnRyeSA9IF8uaXNTdHJpbmcoY291bnRyeSk7XG5cbiAgaWYgKCFoYXNMYW5ndWFnZSAmJiAhaGFzQ291bnRyeSkge1xuICAgIGxvZy53YXJuKCdlbnN1cmVDdXJyZW50TG9jYWxlIHJlcXVpcmVzIGxhbmd1YWdlIG9yIGNvdW50cnknKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBnZXQgbG93ZXIgY2FzZSB2ZXJzaW9ucyBvZiB0aGUgc3RyaW5nc1xuICBsYW5ndWFnZSA9IChsYW5ndWFnZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgY291bnRyeSA9IChjb3VudHJ5IHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGNvbnN0IGFwaUxldmVsID0gYXdhaXQgdGhpcy5nZXRBcGlMZXZlbCgpO1xuXG4gIHJldHVybiBhd2FpdCByZXRyeUludGVydmFsKDUsIDEwMDAsIGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGFwaUxldmVsIDwgMjMpIHtcbiAgICAgICAgbGV0IGN1ckxhbmd1YWdlLCBjdXJDb3VudHJ5O1xuICAgICAgICBpZiAoaGFzTGFuZ3VhZ2UpIHtcbiAgICAgICAgICBjdXJMYW5ndWFnZSA9IChhd2FpdCB0aGlzLmdldERldmljZUxhbmd1YWdlKCkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKCFoYXNDb3VudHJ5ICYmIGxhbmd1YWdlID09PSBjdXJMYW5ndWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNDb3VudHJ5KSB7XG4gICAgICAgICAgY3VyQ291bnRyeSA9IChhd2FpdCB0aGlzLmdldERldmljZUNvdW50cnkoKSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAoIWhhc0xhbmd1YWdlICYmIGNvdW50cnkgPT09IGN1ckNvdW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IGN1ckxhbmd1YWdlICYmIGNvdW50cnkgPT09IGN1ckNvdW50cnkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3VyTG9jYWxlID0gKGF3YWl0IHRoaXMuZ2V0RGV2aWNlTG9jYWxlKCkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIC8vIHpoLWhhbnMtY24gOiB6aC1jblxuICAgICAgICBjb25zdCBsb2NhbGVDb2RlID0gc2NyaXB0ID8gYCR7bGFuZ3VhZ2V9LSR7c2NyaXB0LnRvTG93ZXJDYXNlKCl9LSR7Y291bnRyeX1gIDogYCR7bGFuZ3VhZ2V9LSR7Y291bnRyeX1gO1xuXG4gICAgICAgIGlmIChsb2NhbGVDb2RlID09PSBjdXJMb2NhbGUpIHtcbiAgICAgICAgICBsb2cuZGVidWcoYFJlcXVlc3RlZCBsb2NhbGUgaXMgZXF1YWwgdG8gY3VycmVudCBsb2NhbGU6ICcke2N1ckxvY2FsZX0nYCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGlmIHRoZXJlIGhhcyBiZWVuIGFuIGVycm9yLCByZXN0YXJ0IGFkYiBhbmQgcmV0cnlcbiAgICAgIGxvZy5lcnJvcihgVW5hYmxlIHRvIGNoZWNrIGRldmljZSBsb2NhbGl6YXRpb246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICBsb2cuZGVidWcoJ1Jlc3RhcnRpbmcgQURCIGFuZCByZXRyeWluZy4uLicpO1xuICAgICAgYXdhaXQgdGhpcy5yZXN0YXJ0QWRiKCk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBsb2NhbGUgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIC0gTGFuZ3VhZ2UuIFRoZSBsYW5ndWFnZSBmaWVsZCBpcyBjYXNlIGluc2Vuc2l0aXZlLCBidXQgTG9jYWxlIGFsd2F5cyBjYW5vbmljYWxpemVzIHRvIGxvd2VyIGNhc2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFthLXpBLVpdezIsOH0uIGUuZy4gZW4sIGphIDogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9Mb2NhbGUuaHRtbFxuICogQHBhcmFtIHtzdHJpbmd9IGNvdW50cnkgLSBDb3VudHJ5LiBUaGUgY291bnRyeSAocmVnaW9uKSBmaWVsZCBpcyBjYXNlIGluc2Vuc2l0aXZlLCBidXQgTG9jYWxlIGFsd2F5cyBjYW5vbmljYWxpemVzIHRvIHVwcGVyIGNhc2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFthLXpBLVpdezJ9IHwgWzAtOV17M30uIGUuZy4gVVMsIEpQIDogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9Mb2NhbGUuaHRtbFxuICogQHBhcmFtIHs/c3RyaW5nfSBzY3JpcHQgLSBTY3JpcHQuIFRoZSBzY3JpcHQgZmllbGQgaXMgY2FzZSBpbnNlbnNpdGl2ZSBidXQgTG9jYWxlIGFsd2F5cyBjYW5vbmljYWxpemVzIHRvIHRpdGxlIGNhc2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFthLXpBLVpdezR9LiBlLmcuIEhhbnMgaW4gemgtSGFucy1DTiA6IGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9qYXZhL3V0aWwvTG9jYWxlLmh0bWxcbiAqL1xuYXBrVXRpbHNNZXRob2RzLnNldERldmljZUxhbmd1YWdlQ291bnRyeSA9IGFzeW5jIGZ1bmN0aW9uIHNldERldmljZUxhbmd1YWdlQ291bnRyeSAobGFuZ3VhZ2UsIGNvdW50cnksIHNjcmlwdCA9IG51bGwpIHtcbiAgbGV0IGhhc0xhbmd1YWdlID0gbGFuZ3VhZ2UgJiYgXy5pc1N0cmluZyhsYW5ndWFnZSk7XG4gIGxldCBoYXNDb3VudHJ5ID0gY291bnRyeSAmJiBfLmlzU3RyaW5nKGNvdW50cnkpO1xuICBpZiAoIWhhc0xhbmd1YWdlIHx8ICFoYXNDb3VudHJ5KSB7XG4gICAgbG9nLndhcm4oYHNldERldmljZUxhbmd1YWdlQ291bnRyeSByZXF1aXJlcyBsYW5ndWFnZSBhbmQgY291bnRyeSBhdCBsZWFzdGApO1xuICAgIGxvZy53YXJuKGBHb3QgbGFuZ3VhZ2U6ICcke2xhbmd1YWdlfScgYW5kIGNvdW50cnk6ICcke2NvdW50cnl9J2ApO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgYXBpTGV2ZWwgPSBhd2FpdCB0aGlzLmdldEFwaUxldmVsKCk7XG5cbiAgbGFuZ3VhZ2UgPSAobGFuZ3VhZ2UgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gIGNvdW50cnkgPSAoY291bnRyeSB8fCAnJykudG9VcHBlckNhc2UoKTtcblxuICBpZiAoYXBpTGV2ZWwgPCAyMykge1xuICAgIGxldCBjdXJMYW5ndWFnZSA9IChhd2FpdCB0aGlzLmdldERldmljZUxhbmd1YWdlKCkpLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGN1ckNvdW50cnkgPSAoYXdhaXQgdGhpcy5nZXREZXZpY2VDb3VudHJ5KCkpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAobGFuZ3VhZ2UgIT09IGN1ckxhbmd1YWdlIHx8IGNvdW50cnkgIT09IGN1ckNvdW50cnkpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0RGV2aWNlU3lzTG9jYWxlVmlhU2V0dGluZ0FwcChsYW5ndWFnZSwgY291bnRyeSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBjdXJMb2NhbGUgPSBhd2FpdCB0aGlzLmdldERldmljZUxvY2FsZSgpO1xuXG4gICAgLy8gemgtSGFucy1DTiA6IHpoLUNOXG4gICAgY29uc3QgbG9jYWxlQ29kZSA9IHNjcmlwdCA/IGAke2xhbmd1YWdlfS0ke3NjcmlwdH0tJHtjb3VudHJ5fWAgOiBgJHtsYW5ndWFnZX0tJHtjb3VudHJ5fWA7XG4gICAgbG9nLmRlYnVnKGBDdXJyZW50IGxvY2FsZTogJyR7Y3VyTG9jYWxlfSc7IHJlcXVlc3RlZCBsb2NhbGU6ICcke2xvY2FsZUNvZGV9J2ApO1xuICAgIGlmIChsb2NhbGVDb2RlLnRvTG93ZXJDYXNlKCkgIT09IGN1ckxvY2FsZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldERldmljZVN5c0xvY2FsZVZpYVNldHRpbmdBcHAobGFuZ3VhZ2UsIGNvdW50cnksIHNjcmlwdCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFwcEluZm9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIC0gUGFja2FnZSBuYW1lLCBmb3IgZXhhbXBsZSAnY29tLmFjbWUuYXBwJy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB2ZXJzaW9uQ29kZSAtIFZlcnNpb24gY29kZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB2ZXJzaW9uTmFtZSAtIFZlcnNpb24gbmFtZSwgZm9yIGV4YW1wbGUgJzEuMCcuXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIHBhY2thZ2UgaW5mbyBmcm9tIGxvY2FsIGFwayBmaWxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBQYXRoIC0gVGhlIGZ1bGwgcGF0aCB0byBleGlzdGluZyAuYXBrKHMpIHBhY2thZ2Ugb24gdGhlIGxvY2FsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgc3lzdGVtLlxuICogQHJldHVybiB7P0FwcEluZm99IFRoZSBwYXJzZWQgYXBwbGljYXRpb24gaW5mb3JtYXRpb24uXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXRBcGtJbmZvID0gYXN5bmMgZnVuY3Rpb24gZ2V0QXBrSW5mbyAoYXBwUGF0aCkge1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhhcHBQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpbGUgYXQgcGF0aCAke2FwcFBhdGh9IGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBhY2Nlc3NpYmxlYCk7XG4gIH1cblxuICBpZiAoYXBwUGF0aC5lbmRzV2l0aChBUEtTX0VYVEVOU0lPTikpIHtcbiAgICBhcHBQYXRoID0gYXdhaXQgdGhpcy5leHRyYWN0QmFzZUFwayhhcHBQYXRoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgYXBrUmVhZGVyID0gYXdhaXQgQXBrUmVhZGVyLm9wZW4oYXBwUGF0aCk7XG4gICAgY29uc3QgbWFuaWZlc3QgPSBhd2FpdCBhcGtSZWFkZXIucmVhZE1hbmlmZXN0KCk7XG4gICAgY29uc3Qge3BrZywgdmVyc2lvbk5hbWUsIHZlcnNpb25Db2RlfSA9IHBhcnNlTWFuaWZlc3QobWFuaWZlc3QpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBwa2csXG4gICAgICB2ZXJzaW9uQ29kZSxcbiAgICAgIHZlcnNpb25OYW1lLFxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cud2FybihgRXJyb3IgJyR7ZS5tZXNzYWdlfScgd2hpbGUgZ2V0dGluZyBiYWRnaW5nIGluZm9gKTtcbiAgfVxuICByZXR1cm4ge307XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcGFja2FnZSBpbmZvIGZyb20gdGhlIGluc3RhbGxlZCBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIGluc3RhbGxlZCBwYWNrYWdlLlxuICogQHJldHVybiB7P0FwcEluZm99IFRoZSBwYXJzZWQgYXBwbGljYXRpb24gaW5mb3JtYXRpb24uXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXRQYWNrYWdlSW5mbyA9IGFzeW5jIGZ1bmN0aW9uIGdldFBhY2thZ2VJbmZvIChwa2cpIHtcbiAgbG9nLmRlYnVnKGBHZXR0aW5nIHBhY2thZ2UgaW5mbyBmb3IgJyR7cGtnfSdgKTtcbiAgbGV0IHJlc3VsdCA9IHtuYW1lOiBwa2d9O1xuICB0cnkge1xuICAgIGNvbnN0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoWydkdW1wc3lzJywgJ3BhY2thZ2UnLCBwa2ddKTtcbiAgICBjb25zdCB2ZXJzaW9uTmFtZU1hdGNoID0gbmV3IFJlZ0V4cCgvdmVyc2lvbk5hbWU9KFtcXGQrLl0rKS8pLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAodmVyc2lvbk5hbWVNYXRjaCkge1xuICAgICAgcmVzdWx0LnZlcnNpb25OYW1lID0gdmVyc2lvbk5hbWVNYXRjaFsxXTtcbiAgICB9XG4gICAgY29uc3QgdmVyc2lvbkNvZGVNYXRjaCA9IG5ldyBSZWdFeHAoL3ZlcnNpb25Db2RlPShcXGQrKS8pLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAodmVyc2lvbkNvZGVNYXRjaCkge1xuICAgICAgcmVzdWx0LnZlcnNpb25Db2RlID0gcGFyc2VJbnQodmVyc2lvbkNvZGVNYXRjaFsxXSwgMTApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybihgRXJyb3IgJyR7ZXJyLm1lc3NhZ2V9JyB3aGlsZSBkdW1waW5nIHBhY2thZ2UgaW5mb2ApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMucHVsbEFwayA9IGFzeW5jIGZ1bmN0aW9uIHB1bGxBcGsgKHBrZywgdG1wRGlyKSB7XG4gIGNvbnN0IHBrZ1BhdGggPSAoYXdhaXQgdGhpcy5hZGJFeGVjKFsnc2hlbGwnLCAncG0nLCAncGF0aCcsIHBrZ10pKS5yZXBsYWNlKCdwYWNrYWdlOicsICcnKTtcbiAgY29uc3QgdG1wQXBwID0gcGF0aC5yZXNvbHZlKHRtcERpciwgYCR7cGtnfS5hcGtgKTtcbiAgYXdhaXQgdGhpcy5wdWxsKHBrZ1BhdGgsIHRtcEFwcCk7XG4gIGxvZy5kZWJ1ZyhgUHVsbGVkIGFwcCBmb3IgcGFja2FnZSAnJHtwa2d9JyB0byAnJHt0bXBBcHB9J2ApO1xuICByZXR1cm4gdG1wQXBwO1xufTtcblxuZXhwb3J0IHsgUkVNT1RFX0NBQ0hFX1JPT1QgfTtcbmV4cG9ydCBkZWZhdWx0IGFwa1V0aWxzTWV0aG9kcztcbiJdLCJmaWxlIjoibGliL3Rvb2xzL2Fway11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
