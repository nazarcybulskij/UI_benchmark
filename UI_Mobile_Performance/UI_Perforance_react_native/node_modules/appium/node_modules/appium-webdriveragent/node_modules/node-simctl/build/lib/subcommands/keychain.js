"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

const commands = {};

async function handleRawPayload(payload, onPayloadStored) {
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const filePath = _path.default.resolve(tmpRoot, 'certificate.pem');

    if (_lodash.default.isBuffer(payload)) {
      await _appiumSupport.fs.writeFile(filePath, payload);
    } else {
      await _appiumSupport.fs.writeFile(filePath, payload, 'utf8');
    }

    await onPayloadStored(filePath);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
}

commands.addRootCertificate = async function addRootCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;

  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-root-cert'), 'add-root-cert', certPath]
  });

  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};

commands.addCertificate = async function addCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;

  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-cert'), 'add-cert', certPath]
  });

  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};

commands.resetKeychain = async function resetKeychain() {
  await this.exec('keychain', {
    args: [this.requireUdid('keychain reset'), 'reset']
  });
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zdWJjb21tYW5kcy9rZXljaGFpbi5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhhbmRsZVJhd1BheWxvYWQiLCJwYXlsb2FkIiwib25QYXlsb2FkU3RvcmVkIiwidG1wUm9vdCIsInRlbXBEaXIiLCJvcGVuRGlyIiwiZmlsZVBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsIl8iLCJpc0J1ZmZlciIsImZzIiwid3JpdGVGaWxlIiwicmltcmFmIiwiYWRkUm9vdENlcnRpZmljYXRlIiwiY2VydCIsIm9wdHMiLCJyYXciLCJleGVjTWV0aG9kIiwiY2VydFBhdGgiLCJleGVjIiwiYXJncyIsInJlcXVpcmVVZGlkIiwiYWRkQ2VydGlmaWNhdGUiLCJyZXNldEtleWNoYWluIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjs7QUFFQSxlQUFlQyxnQkFBZixDQUFpQ0MsT0FBakMsRUFBMENDLGVBQTFDLEVBQTJEO0FBQ3pELFFBQU1DLE9BQU8sR0FBRyxNQUFNQyx1QkFBUUMsT0FBUixFQUF0Qjs7QUFDQSxNQUFJO0FBQ0YsVUFBTUMsUUFBUSxHQUFHQyxjQUFLQyxPQUFMLENBQWFMLE9BQWIsRUFBc0IsaUJBQXRCLENBQWpCOztBQUNBLFFBQUlNLGdCQUFFQyxRQUFGLENBQVdULE9BQVgsQ0FBSixFQUF5QjtBQUN2QixZQUFNVSxrQkFBR0MsU0FBSCxDQUFhTixRQUFiLEVBQXVCTCxPQUF2QixDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTVUsa0JBQUdDLFNBQUgsQ0FBYU4sUUFBYixFQUF1QkwsT0FBdkIsRUFBZ0MsTUFBaEMsQ0FBTjtBQUNEOztBQUNELFVBQU1DLGVBQWUsQ0FBQ0ksUUFBRCxDQUFyQjtBQUNELEdBUkQsU0FRVTtBQUNSLFVBQU1LLGtCQUFHRSxNQUFILENBQVVWLE9BQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBc0JESixRQUFRLENBQUNlLGtCQUFULEdBQThCLGVBQWVBLGtCQUFmLENBQW1DQyxJQUFuQyxFQUF5Q0MsSUFBSSxHQUFHLEVBQWhELEVBQW9EO0FBQ2hGLFFBQU07QUFDSkMsSUFBQUEsR0FBRyxHQUFHO0FBREYsTUFFRkQsSUFGSjs7QUFHQSxRQUFNRSxVQUFVLEdBQUcsTUFBT0MsUUFBUCxJQUFvQixNQUFNLEtBQUtDLElBQUwsQ0FBVSxVQUFWLEVBQXNCO0FBQ2pFQyxJQUFBQSxJQUFJLEVBQUUsQ0FBQyxLQUFLQyxXQUFMLENBQWlCLHdCQUFqQixDQUFELEVBQTZDLGVBQTdDLEVBQThESCxRQUE5RDtBQUQyRCxHQUF0QixDQUE3Qzs7QUFHQSxNQUFJRixHQUFKLEVBQVM7QUFDUCxVQUFNakIsZ0JBQWdCLENBQUNlLElBQUQsRUFBT0csVUFBUCxDQUF0QjtBQUNELEdBRkQsTUFFTztBQUNMLFVBQU1BLFVBQVUsQ0FBQ0gsSUFBRCxDQUFoQjtBQUNEO0FBQ0YsQ0FaRDs7QUEwQkFoQixRQUFRLENBQUN3QixjQUFULEdBQTBCLGVBQWVBLGNBQWYsQ0FBK0JSLElBQS9CLEVBQXFDQyxJQUFJLEdBQUcsRUFBNUMsRUFBZ0Q7QUFDeEUsUUFBTTtBQUNKQyxJQUFBQSxHQUFHLEdBQUc7QUFERixNQUVGRCxJQUZKOztBQUdBLFFBQU1FLFVBQVUsR0FBRyxNQUFPQyxRQUFQLElBQW9CLE1BQU0sS0FBS0MsSUFBTCxDQUFVLFVBQVYsRUFBc0I7QUFDakVDLElBQUFBLElBQUksRUFBRSxDQUFDLEtBQUtDLFdBQUwsQ0FBaUIsbUJBQWpCLENBQUQsRUFBd0MsVUFBeEMsRUFBb0RILFFBQXBEO0FBRDJELEdBQXRCLENBQTdDOztBQUdBLE1BQUlGLEdBQUosRUFBUztBQUNQLFVBQU1qQixnQkFBZ0IsQ0FBQ2UsSUFBRCxFQUFPRyxVQUFQLENBQXRCO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsVUFBTUEsVUFBVSxDQUFDSCxJQUFELENBQWhCO0FBQ0Q7QUFDRixDQVpEOztBQXNCQWhCLFFBQVEsQ0FBQ3lCLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxRQUFNLEtBQUtKLElBQUwsQ0FBVSxVQUFWLEVBQXNCO0FBQzFCQyxJQUFBQSxJQUFJLEVBQUUsQ0FBQyxLQUFLQyxXQUFMLENBQWlCLGdCQUFqQixDQUFELEVBQXFDLE9BQXJDO0FBRG9CLEdBQXRCLENBQU47QUFHRCxDQUpEOztlQU1ldkIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJhd1BheWxvYWQgKHBheWxvYWQsIG9uUGF5bG9hZFN0b3JlZCkge1xuICBjb25zdCB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUodG1wUm9vdCwgJ2NlcnRpZmljYXRlLnBlbScpO1xuICAgIGlmIChfLmlzQnVmZmVyKHBheWxvYWQpKSB7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIHBheWxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIHBheWxvYWQsICd1dGY4Jyk7XG4gICAgfVxuICAgIGF3YWl0IG9uUGF5bG9hZFN0b3JlZChmaWxlUGF0aCk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG59XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDZXJ0T3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSByYXcgW2ZhbHNlXSAtIHdoZXRoZXIgdGhlIGBjZXJ0YCBhcmd1bWVudFxuICogaXMgdGhlIHBhdGggdG8gdGhlIGNlcnRpZmljYXRlIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSBvclxuICogYSByYXcgY2VydGlmaWNhdGUgY29udGVudFxuICovXG5cbi8qKlxuICogQWRkcyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgdG8gdGhlIFRydXN0ZWQgUm9vdCBTdG9yZSBvbiB0aGUgc2ltdWxhdG9yXG4gKlxuICogQHNpbmNlIFhjb2RlIDExLjQgU0RLXG4gKiBAcGFyYW0ge3N0cmluZ30gY2VydCB0aGUgZnVsbCBwYXRoIHRvIGEgdmFsaWQgLmNlcnQgZmlsZSBjb250YWluaW5nXG4gKiB0aGUgY2VydGlmaWNhdGUgY29udGVudCBvciB0aGUgY2VydGlmaWNhdGUgY29udGVudCBpdHNlbGYsIGRlcGVuZGluZyBvblxuICogb3B0aW9uc1xuICogQHBhcmFtIHtDZXJ0T3B0aW9uc30gb3B0c1xuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjdXJyZW50IFNESyB2ZXJzaW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGNvbW1hbmRcbiAqIG9yIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBhZGRpbmcgdGhlIGNlcnRpZmljYXRlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGB1ZGlkYCBpbnN0YW5jZSBwcm9wZXJ0eSBpcyB1bnNldFxuICovXG5jb21tYW5kcy5hZGRSb290Q2VydGlmaWNhdGUgPSBhc3luYyBmdW5jdGlvbiBhZGRSb290Q2VydGlmaWNhdGUgKGNlcnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcmF3ID0gZmFsc2UsXG4gIH0gPSBvcHRzO1xuICBjb25zdCBleGVjTWV0aG9kID0gYXN5bmMgKGNlcnRQYXRoKSA9PiBhd2FpdCB0aGlzLmV4ZWMoJ2tleWNoYWluJywge1xuICAgIGFyZ3M6IFt0aGlzLnJlcXVpcmVVZGlkKCdrZXljaGFpbiBhZGQtcm9vdC1jZXJ0JyksICdhZGQtcm9vdC1jZXJ0JywgY2VydFBhdGhdLFxuICB9KTtcbiAgaWYgKHJhdykge1xuICAgIGF3YWl0IGhhbmRsZVJhd1BheWxvYWQoY2VydCwgZXhlY01ldGhvZCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgZXhlY01ldGhvZChjZXJ0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBBZGRzIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSB0byB0aGUgS2V5Y2hhaW4gU3RvcmUgb24gdGhlIHNpbXVsYXRvclxuICpcbiAqIEBzaW5jZSBYY29kZSAxMS40IFNES1xuICogQHBhcmFtIHtzdHJpbmd9IGNlcnQgdGhlIGZ1bGwgcGF0aCB0byBhIHZhbGlkIC5jZXJ0IGZpbGUgY29udGFpbmluZ1xuICogdGhlIGNlcnRpZmljYXRlIGNvbnRlbnQgb3IgdGhlIGNlcnRpZmljYXRlIGNvbnRlbnQgaXRzZWxmLCBkZXBlbmRpbmcgb25cbiAqIG9wdGlvbnNcbiAqIEBwYXJhbSB7Q2VydE9wdGlvbnN9IG9wdHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgY3VycmVudCBTREsgdmVyc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjb21tYW5kXG4gKiBvciB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgYWRkaW5nIHRoZSBjZXJ0aWZpY2F0ZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBgdWRpZGAgaW5zdGFuY2UgcHJvcGVydHkgaXMgdW5zZXRcbiAqL1xuY29tbWFuZHMuYWRkQ2VydGlmaWNhdGUgPSBhc3luYyBmdW5jdGlvbiBhZGRDZXJ0aWZpY2F0ZSAoY2VydCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICByYXcgPSBmYWxzZSxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IGV4ZWNNZXRob2QgPSBhc3luYyAoY2VydFBhdGgpID0+IGF3YWl0IHRoaXMuZXhlYygna2V5Y2hhaW4nLCB7XG4gICAgYXJnczogW3RoaXMucmVxdWlyZVVkaWQoJ2tleWNoYWluIGFkZC1jZXJ0JyksICdhZGQtY2VydCcsIGNlcnRQYXRoXSxcbiAgfSk7XG4gIGlmIChyYXcpIHtcbiAgICBhd2FpdCBoYW5kbGVSYXdQYXlsb2FkKGNlcnQsIGV4ZWNNZXRob2QpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGV4ZWNNZXRob2QoY2VydCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVzZXRzIHRoZSBzaW11bGF0b3Iga2V5Y2hhaW5cbiAqXG4gKiBAc2luY2UgWGNvZGUgMTEuNCBTREtcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgY3VycmVudCBTREsgdmVyc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjb21tYW5kXG4gKiBvciB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgcmVzZXR0aW5nIHRoZSBrZXljaGFpblxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBgdWRpZGAgaW5zdGFuY2UgcHJvcGVydHkgaXMgdW5zZXRcbiAqL1xuY29tbWFuZHMucmVzZXRLZXljaGFpbiA9IGFzeW5jIGZ1bmN0aW9uIHJlc2V0S2V5Y2hhaW4gKCkge1xuICBhd2FpdCB0aGlzLmV4ZWMoJ2tleWNoYWluJywge1xuICAgIGFyZ3M6IFt0aGlzLnJlcXVpcmVVZGlkKCdrZXljaGFpbiByZXNldCcpLCAncmVzZXQnXSxcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL3N1YmNvbW1hbmRzL2tleWNoYWluLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
