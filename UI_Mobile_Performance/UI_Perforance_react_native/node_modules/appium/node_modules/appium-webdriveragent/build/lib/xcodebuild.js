"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.XcodeBuild = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("./utils");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

var _constants = require("./constants");

const DEFAULT_SIGNING_ID = 'iPhone Developer';
const PREBUILD_DELAY = 0;
const RUNNER_SCHEME_IOS = 'WebDriverAgentRunner';
const LIB_SCHEME_IOS = 'WebDriverAgentLib';
const ERROR_WRITING_ATTACHMENT = 'Error writing attachment data to file';
const ERROR_COPYING_ATTACHMENT = 'Error copying testing attachment';
const IGNORED_ERRORS = [ERROR_WRITING_ATTACHMENT, ERROR_COPYING_ATTACHMENT, 'Failed to remove screenshot at path'];
const RUNNER_SCHEME_TV = 'WebDriverAgentRunner_tvOS';
const LIB_SCHEME_TV = 'WebDriverAgentLib_tvOS';

const xcodeLog = _appiumSupport.logger.getLogger('Xcode');

class XcodeBuild {
  constructor(xcodeVersion, device, args = {}) {
    this.xcodeVersion = xcodeVersion;
    this.device = device;
    this.realDevice = args.realDevice;
    this.agentPath = args.agentPath;
    this.bootstrapPath = args.bootstrapPath;
    this.platformVersion = args.platformVersion;
    this.platformName = args.platformName;
    this.iosSdkVersion = args.iosSdkVersion;
    this.showXcodeLog = args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.xcodeOrgId = args.xcodeOrgId;
    this.xcodeSigningId = args.xcodeSigningId || DEFAULT_SIGNING_ID;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;
    this.prebuildWDA = args.prebuildWDA;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.useSimpleBuildTest = args.useSimpleBuildTest;
    this.useXctestrunFile = args.useXctestrunFile;
    this.launchTimeout = args.launchTimeout;
    this.wdaRemotePort = args.wdaRemotePort;
    this.updatedWDABundleId = args.updatedWDABundleId;
    this.derivedDataPath = args.derivedDataPath;
    this.mjpegServerPort = args.mjpegServerPort;
    this.prebuildDelay = _lodash.default.isNumber(args.prebuildDelay) ? args.prebuildDelay : PREBUILD_DELAY;
  }

  async init(noSessionProxy) {
    this.noSessionProxy = noSessionProxy;

    if (this.useXctestrunFile) {
      const deviveInfo = {
        isRealDevice: this.realDevice,
        udid: this.device.udid,
        platformVersion: this.platformVersion,
        platformName: this.platformName
      };
      this.xctestrunFilePath = await (0, _utils.setXctestrunFile)(deviveInfo, this.iosSdkVersion, this.bootstrapPath, this.wdaRemotePort);
      return;
    }

    if (this.realDevice) {
      await (0, _utils.resetProjectFile)(this.agentPath);

      if (this.updatedWDABundleId) {
        await (0, _utils.updateProjectFile)(this.agentPath, this.updatedWDABundleId);
      }
    }
  }

  async retrieveDerivedDataPath() {
    if (this.derivedDataPath) {
      return this.derivedDataPath;
    }

    let stdout;

    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('xcodebuild', ['-project', this.agentPath, '-showBuildSettings']));
    } catch (err) {
      _logger.default.warn(`Cannot retrieve WDA build settings. Original error: ${err.message}`);

      return;
    }

    const pattern = /^\s*BUILD_DIR\s+=\s+(\/.*)/m;
    const match = pattern.exec(stdout);

    if (!match) {
      _logger.default.warn(`Cannot parse WDA build dir from ${_lodash.default.truncate(stdout, {
        length: 300
      })}`);

      return;
    }

    _logger.default.debug(`Parsed BUILD_DIR configuration value: '${match[1]}'`);

    this.derivedDataPath = _path.default.dirname(_path.default.dirname(_path.default.normalize(match[1])));

    _logger.default.debug(`Got derived data root: '${this.derivedDataPath}'`);

    return this.derivedDataPath;
  }

  async reset() {
    if (this.realDevice && this.updatedWDABundleId) {
      await (0, _utils.resetProjectFile)(this.agentPath);
    }
  }

  async prebuild() {
    _logger.default.debug('Pre-building WDA before launching test');

    this.usePrebuiltWDA = true;
    await this.start(true);
    this.xcodebuild = null;
    await _bluebird.default.delay(this.prebuildDelay);
  }

  async cleanProject() {
    const tmpIsTvOS = (0, _utils.isTvOS)(this.platformName);
    const libScheme = tmpIsTvOS ? LIB_SCHEME_TV : LIB_SCHEME_IOS;
    const runnerScheme = tmpIsTvOS ? RUNNER_SCHEME_TV : RUNNER_SCHEME_IOS;

    for (const scheme of [libScheme, runnerScheme]) {
      _logger.default.debug(`Cleaning the project scheme '${scheme}' to make sure there are no leftovers from previous installs`);

      await (0, _teen_process.exec)('xcodebuild', ['clean', '-project', this.agentPath, '-scheme', scheme]);
    }
  }

  getCommand(buildOnly = false) {
    let cmd = 'xcodebuild';
    let args;
    const [buildCmd, testCmd] = this.useSimpleBuildTest ? ['build', 'test'] : ['build-for-testing', 'test-without-building'];

    if (buildOnly) {
      args = [buildCmd];
    } else if (this.usePrebuiltWDA || this.useXctestrunFile) {
      args = [testCmd];
    } else {
      args = [buildCmd, testCmd];
    }

    if (this.useXctestrunFile) {
      args.push('-xctestrun', this.xctestrunFilePath);
    } else {
      const runnerScheme = (0, _utils.isTvOS)(this.platformName) ? RUNNER_SCHEME_TV : RUNNER_SCHEME_IOS;
      args.push('-project', this.agentPath, '-scheme', runnerScheme);

      if (this.derivedDataPath) {
        args.push('-derivedDataPath', this.derivedDataPath);
      }
    }

    args.push('-destination', `id=${this.device.udid}`);
    const versionMatch = new RegExp(/^(\d+)\.(\d+)/).exec(this.platformVersion);

    if (versionMatch) {
      args.push(`IPHONEOS_DEPLOYMENT_TARGET=${versionMatch[1]}.${versionMatch[2]}`);
    } else {
      _logger.default.warn(`Cannot parse major and minor version numbers from platformVersion "${this.platformVersion}". ` + 'Will build for the default platform instead');
    }

    if (this.realDevice && this.xcodeConfigFile) {
      _logger.default.debug(`Using Xcode configuration file: '${this.xcodeConfigFile}'`);

      args.push('-xcconfig', this.xcodeConfigFile);
    }

    if (!process.env.APPIUM_XCUITEST_TREAT_WARNINGS_AS_ERRORS) {
      args.push('GCC_TREAT_WARNINGS_AS_ERRORS=0');
    }

    args.push('COMPILER_INDEX_STORE_ENABLE=NO');
    return {
      cmd,
      args
    };
  }

  async createSubProcess(buildOnly = false) {
    if (!this.useXctestrunFile && this.realDevice) {
      if (this.keychainPath && this.keychainPassword) {
        await (0, _utils.setRealDeviceSecurity)(this.keychainPath, this.keychainPassword);
      }

      if (this.xcodeOrgId && this.xcodeSigningId && !this.xcodeConfigFile) {
        this.xcodeConfigFile = await (0, _utils.generateXcodeConfigFile)(this.xcodeOrgId, this.xcodeSigningId);
      }
    }

    const {
      cmd,
      args
    } = this.getCommand(buildOnly);

    _logger.default.debug(`Beginning ${buildOnly ? 'build' : 'test'} with command '${cmd} ${args.join(' ')}' ` + `in directory '${this.bootstrapPath}'`);

    const env = Object.assign({}, process.env, {
      USE_PORT: this.wdaRemotePort,
      WDA_PRODUCT_BUNDLE_IDENTIFIER: this.updatedWDABundleId || _constants.WDA_RUNNER_BUNDLE_ID
    });

    if (this.mjpegServerPort) {
      env.MJPEG_SERVER_PORT = this.mjpegServerPort;
    }

    const upgradeTimestamp = await (0, _utils.getWDAUpgradeTimestamp)(this.bootstrapPath);

    if (upgradeTimestamp) {
      env.UPGRADE_TIMESTAMP = upgradeTimestamp;
    }

    const xcodebuild = new _teen_process.SubProcess(cmd, args, {
      cwd: this.bootstrapPath,
      env,
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });
    let logXcodeOutput = !!this.showXcodeLog;
    const logMsg = _lodash.default.isBoolean(this.showXcodeLog) ? `Output from xcodebuild ${this.showXcodeLog ? 'will' : 'will not'} be logged` : 'Output from xcodebuild will only be logged if any errors are present there';

    _logger.default.debug(`${logMsg}. To change this, use 'showXcodeLog' desired capability`);

    xcodebuild.on('output', (stdout, stderr) => {
      let out = stdout || stderr;

      if (out.includes('Writing diagnostic log for test session to')) {
        xcodebuild.logLocation = _lodash.default.first(_lodash.default.remove(out.trim().split('\n'), v => v.startsWith(_path.default.sep)));

        _logger.default.debug(`Log file for xcodebuild test: ${xcodebuild.logLocation}`);
      }

      const ignoreError = IGNORED_ERRORS.some(x => out.includes(x));

      if (this.showXcodeLog !== false && out.includes('Error Domain=') && !ignoreError) {
        logXcodeOutput = true;
        xcodebuild._wda_error_occurred = true;
      }

      if (logXcodeOutput && !ignoreError) {
        for (const line of out.split(_os.EOL)) {
          xcodeLog.error(line);

          if (line) {
            xcodebuild._wda_error_message += `${_os.EOL}${line}`;
          }
        }
      }
    });
    return xcodebuild;
  }

  async start(buildOnly = false) {
    this.xcodebuild = await this.createSubProcess(buildOnly);
    this.xcodebuild._wda_error_message = '';
    return await new _bluebird.default((resolve, reject) => {
      this.xcodebuild.on('exit', async (code, signal) => {
        _logger.default.error(`xcodebuild exited with code '${code}' and signal '${signal}'`);

        if (this.showXcodeLog && this.xcodebuild.logLocation) {
          xcodeLog.error(`Contents of xcodebuild log file '${this.xcodebuild.logLocation}':`);

          try {
            let data = await _appiumSupport.fs.readFile(this.xcodebuild.logLocation, 'utf8');

            for (let line of data.split('\n')) {
              xcodeLog.error(line);
            }
          } catch (err) {
            _logger.default.error(`Unable to access xcodebuild log file: '${err.message}'`);
          }
        }

        this.xcodebuild.processExited = true;

        if (this.xcodebuild._wda_error_occurred || !signal && code !== 0) {
          return reject(new Error(`xcodebuild failed with code ${code}${_os.EOL}` + `xcodebuild error message:${_os.EOL}${this.xcodebuild._wda_error_message}`));
        }

        if (buildOnly) {
          return resolve();
        }
      });
      return (async () => {
        try {
          const timer = new _appiumSupport.timing.Timer().start();
          await this.xcodebuild.start(true);

          if (!buildOnly) {
            let status = await this.waitForStart(timer);
            resolve(status);
          }
        } catch (err) {
          let msg = `Unable to start WebDriverAgent: ${err}`;

          _logger.default.error(msg);

          reject(new Error(msg));
        }
      })();
    });
  }

  async waitForStart(timer) {
    _logger.default.debug(`Waiting up to ${this.launchTimeout}ms for WebDriverAgent to start`);

    let currentStatus = null;

    try {
      let retries = parseInt(this.launchTimeout / 500, 10);
      await (0, _asyncbox.retryInterval)(retries, 1000, async () => {
        if (this.xcodebuild.processExited) {
          return;
        }

        const proxyTimeout = this.noSessionProxy.timeout;
        this.noSessionProxy.timeout = 1000;

        try {
          currentStatus = await this.noSessionProxy.command('/status', 'GET');

          if (currentStatus && currentStatus.ios && currentStatus.ios.ip) {
            this.agentUrl = currentStatus.ios.ip;
          }

          _logger.default.debug(`WebDriverAgent information:`);

          _logger.default.debug(JSON.stringify(currentStatus, null, 2));
        } catch (err) {
          throw new Error(`Unable to connect to running WebDriverAgent: ${err.message}`);
        } finally {
          this.noSessionProxy.timeout = proxyTimeout;
        }
      });

      if (this.xcodebuild.processExited) {
        return currentStatus;
      }

      _logger.default.debug(`WebDriverAgent successfully started after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    } catch (err) {
      _logger.default.debug(err.message);

      _logger.default.warn(`Getting status of WebDriverAgent on device timed out. Continuing`);
    }

    return currentStatus;
  }

  async quit() {
    await (0, _utils.killProcess)('xcodebuild', this.xcodebuild);
  }

}

exports.XcodeBuild = XcodeBuild;
var _default = XcodeBuild;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
